import { ResponseContext, RequestContext, HttpFile } from '../http/http';
import * as models from '../models/all';
import { Configuration} from '../configuration'

import { AaaAbstractAuditRecord } from '../models/AaaAbstractAuditRecord';
import { AaaAbstractAuditRecordAllOf } from '../models/AaaAbstractAuditRecordAllOf';
import { AaaAuditRecord } from '../models/AaaAuditRecord';
import { AaaAuditRecordAllOf } from '../models/AaaAuditRecordAllOf';
import { AaaAuditRecordList } from '../models/AaaAuditRecordList';
import { AaaAuditRecordListAllOf } from '../models/AaaAuditRecordListAllOf';
import { AaaAuditRecordResponse } from '../models/AaaAuditRecordResponse';
import { AdapterAdapterConfig } from '../models/AdapterAdapterConfig';
import { AdapterAdapterConfigAllOf } from '../models/AdapterAdapterConfigAllOf';
import { AdapterConfigPolicy } from '../models/AdapterConfigPolicy';
import { AdapterConfigPolicyAllOf } from '../models/AdapterConfigPolicyAllOf';
import { AdapterConfigPolicyList } from '../models/AdapterConfigPolicyList';
import { AdapterConfigPolicyListAllOf } from '../models/AdapterConfigPolicyListAllOf';
import { AdapterConfigPolicyResponse } from '../models/AdapterConfigPolicyResponse';
import { AdapterDceInterfaceSettings } from '../models/AdapterDceInterfaceSettings';
import { AdapterDceInterfaceSettingsAllOf } from '../models/AdapterDceInterfaceSettingsAllOf';
import { AdapterEthSettings } from '../models/AdapterEthSettings';
import { AdapterEthSettingsAllOf } from '../models/AdapterEthSettingsAllOf';
import { AdapterExtEthInterface } from '../models/AdapterExtEthInterface';
import { AdapterExtEthInterfaceAllOf } from '../models/AdapterExtEthInterfaceAllOf';
import { AdapterExtEthInterfaceList } from '../models/AdapterExtEthInterfaceList';
import { AdapterExtEthInterfaceListAllOf } from '../models/AdapterExtEthInterfaceListAllOf';
import { AdapterExtEthInterfaceRelationship } from '../models/AdapterExtEthInterfaceRelationship';
import { AdapterExtEthInterfaceResponse } from '../models/AdapterExtEthInterfaceResponse';
import { AdapterFcSettings } from '../models/AdapterFcSettings';
import { AdapterFcSettingsAllOf } from '../models/AdapterFcSettingsAllOf';
import { AdapterHostEthInterface } from '../models/AdapterHostEthInterface';
import { AdapterHostEthInterfaceAllOf } from '../models/AdapterHostEthInterfaceAllOf';
import { AdapterHostEthInterfaceList } from '../models/AdapterHostEthInterfaceList';
import { AdapterHostEthInterfaceListAllOf } from '../models/AdapterHostEthInterfaceListAllOf';
import { AdapterHostEthInterfaceRelationship } from '../models/AdapterHostEthInterfaceRelationship';
import { AdapterHostEthInterfaceResponse } from '../models/AdapterHostEthInterfaceResponse';
import { AdapterHostFcInterface } from '../models/AdapterHostFcInterface';
import { AdapterHostFcInterfaceAllOf } from '../models/AdapterHostFcInterfaceAllOf';
import { AdapterHostFcInterfaceList } from '../models/AdapterHostFcInterfaceList';
import { AdapterHostFcInterfaceListAllOf } from '../models/AdapterHostFcInterfaceListAllOf';
import { AdapterHostFcInterfaceRelationship } from '../models/AdapterHostFcInterfaceRelationship';
import { AdapterHostFcInterfaceResponse } from '../models/AdapterHostFcInterfaceResponse';
import { AdapterHostIscsiInterface } from '../models/AdapterHostIscsiInterface';
import { AdapterHostIscsiInterfaceAllOf } from '../models/AdapterHostIscsiInterfaceAllOf';
import { AdapterHostIscsiInterfaceList } from '../models/AdapterHostIscsiInterfaceList';
import { AdapterHostIscsiInterfaceListAllOf } from '../models/AdapterHostIscsiInterfaceListAllOf';
import { AdapterHostIscsiInterfaceRelationship } from '../models/AdapterHostIscsiInterfaceRelationship';
import { AdapterHostIscsiInterfaceResponse } from '../models/AdapterHostIscsiInterfaceResponse';
import { AdapterPortChannelSettings } from '../models/AdapterPortChannelSettings';
import { AdapterPortChannelSettingsAllOf } from '../models/AdapterPortChannelSettingsAllOf';
import { AdapterUnit } from '../models/AdapterUnit';
import { AdapterUnitAllOf } from '../models/AdapterUnitAllOf';
import { AdapterUnitList } from '../models/AdapterUnitList';
import { AdapterUnitListAllOf } from '../models/AdapterUnitListAllOf';
import { AdapterUnitRelationship } from '../models/AdapterUnitRelationship';
import { AdapterUnitResponse } from '../models/AdapterUnitResponse';
import { ApplianceBackup } from '../models/ApplianceBackup';
import { ApplianceBackupAllOf } from '../models/ApplianceBackupAllOf';
import { ApplianceBackupBase } from '../models/ApplianceBackupBase';
import { ApplianceBackupBaseAllOf } from '../models/ApplianceBackupBaseAllOf';
import { ApplianceBackupList } from '../models/ApplianceBackupList';
import { ApplianceBackupListAllOf } from '../models/ApplianceBackupListAllOf';
import { ApplianceBackupPolicy } from '../models/ApplianceBackupPolicy';
import { ApplianceBackupPolicyAllOf } from '../models/ApplianceBackupPolicyAllOf';
import { ApplianceBackupPolicyList } from '../models/ApplianceBackupPolicyList';
import { ApplianceBackupPolicyListAllOf } from '../models/ApplianceBackupPolicyListAllOf';
import { ApplianceBackupPolicyResponse } from '../models/ApplianceBackupPolicyResponse';
import { ApplianceBackupResponse } from '../models/ApplianceBackupResponse';
import { ApplianceCertificateSetting } from '../models/ApplianceCertificateSetting';
import { ApplianceCertificateSettingAllOf } from '../models/ApplianceCertificateSettingAllOf';
import { ApplianceCertificateSettingList } from '../models/ApplianceCertificateSettingList';
import { ApplianceCertificateSettingListAllOf } from '../models/ApplianceCertificateSettingListAllOf';
import { ApplianceCertificateSettingResponse } from '../models/ApplianceCertificateSettingResponse';
import { ApplianceDataExportPolicy } from '../models/ApplianceDataExportPolicy';
import { ApplianceDataExportPolicyAllOf } from '../models/ApplianceDataExportPolicyAllOf';
import { ApplianceDataExportPolicyList } from '../models/ApplianceDataExportPolicyList';
import { ApplianceDataExportPolicyListAllOf } from '../models/ApplianceDataExportPolicyListAllOf';
import { ApplianceDataExportPolicyRelationship } from '../models/ApplianceDataExportPolicyRelationship';
import { ApplianceDataExportPolicyResponse } from '../models/ApplianceDataExportPolicyResponse';
import { ApplianceDeviceClaim } from '../models/ApplianceDeviceClaim';
import { ApplianceDeviceClaimAllOf } from '../models/ApplianceDeviceClaimAllOf';
import { ApplianceDeviceClaimList } from '../models/ApplianceDeviceClaimList';
import { ApplianceDeviceClaimListAllOf } from '../models/ApplianceDeviceClaimListAllOf';
import { ApplianceDeviceClaimResponse } from '../models/ApplianceDeviceClaimResponse';
import { ApplianceDiagSetting } from '../models/ApplianceDiagSetting';
import { ApplianceDiagSettingAllOf } from '../models/ApplianceDiagSettingAllOf';
import { ApplianceDiagSettingList } from '../models/ApplianceDiagSettingList';
import { ApplianceDiagSettingListAllOf } from '../models/ApplianceDiagSettingListAllOf';
import { ApplianceDiagSettingResponse } from '../models/ApplianceDiagSettingResponse';
import { ApplianceImageBundle } from '../models/ApplianceImageBundle';
import { ApplianceImageBundleAllOf } from '../models/ApplianceImageBundleAllOf';
import { ApplianceImageBundleList } from '../models/ApplianceImageBundleList';
import { ApplianceImageBundleListAllOf } from '../models/ApplianceImageBundleListAllOf';
import { ApplianceImageBundleRelationship } from '../models/ApplianceImageBundleRelationship';
import { ApplianceImageBundleResponse } from '../models/ApplianceImageBundleResponse';
import { ApplianceKeyValuePair } from '../models/ApplianceKeyValuePair';
import { ApplianceKeyValuePairAllOf } from '../models/ApplianceKeyValuePairAllOf';
import { ApplianceNodeInfo } from '../models/ApplianceNodeInfo';
import { ApplianceNodeInfoAllOf } from '../models/ApplianceNodeInfoAllOf';
import { ApplianceNodeInfoList } from '../models/ApplianceNodeInfoList';
import { ApplianceNodeInfoListAllOf } from '../models/ApplianceNodeInfoListAllOf';
import { ApplianceNodeInfoResponse } from '../models/ApplianceNodeInfoResponse';
import { ApplianceReleaseNote } from '../models/ApplianceReleaseNote';
import { ApplianceReleaseNoteAllOf } from '../models/ApplianceReleaseNoteAllOf';
import { ApplianceReleaseNoteList } from '../models/ApplianceReleaseNoteList';
import { ApplianceReleaseNoteListAllOf } from '../models/ApplianceReleaseNoteListAllOf';
import { ApplianceReleaseNoteResponse } from '../models/ApplianceReleaseNoteResponse';
import { ApplianceRestore } from '../models/ApplianceRestore';
import { ApplianceRestoreAllOf } from '../models/ApplianceRestoreAllOf';
import { ApplianceRestoreList } from '../models/ApplianceRestoreList';
import { ApplianceRestoreListAllOf } from '../models/ApplianceRestoreListAllOf';
import { ApplianceRestoreResponse } from '../models/ApplianceRestoreResponse';
import { ApplianceSetupInfo } from '../models/ApplianceSetupInfo';
import { ApplianceSetupInfoAllOf } from '../models/ApplianceSetupInfoAllOf';
import { ApplianceSetupInfoList } from '../models/ApplianceSetupInfoList';
import { ApplianceSetupInfoListAllOf } from '../models/ApplianceSetupInfoListAllOf';
import { ApplianceSetupInfoResponse } from '../models/ApplianceSetupInfoResponse';
import { ApplianceSystemInfo } from '../models/ApplianceSystemInfo';
import { ApplianceSystemInfoAllOf } from '../models/ApplianceSystemInfoAllOf';
import { ApplianceSystemInfoList } from '../models/ApplianceSystemInfoList';
import { ApplianceSystemInfoListAllOf } from '../models/ApplianceSystemInfoListAllOf';
import { ApplianceSystemInfoResponse } from '../models/ApplianceSystemInfoResponse';
import { ApplianceUpgrade } from '../models/ApplianceUpgrade';
import { ApplianceUpgradeAllOf } from '../models/ApplianceUpgradeAllOf';
import { ApplianceUpgradeList } from '../models/ApplianceUpgradeList';
import { ApplianceUpgradeListAllOf } from '../models/ApplianceUpgradeListAllOf';
import { ApplianceUpgradePolicy } from '../models/ApplianceUpgradePolicy';
import { ApplianceUpgradePolicyAllOf } from '../models/ApplianceUpgradePolicyAllOf';
import { ApplianceUpgradePolicyList } from '../models/ApplianceUpgradePolicyList';
import { ApplianceUpgradePolicyListAllOf } from '../models/ApplianceUpgradePolicyListAllOf';
import { ApplianceUpgradePolicyResponse } from '../models/ApplianceUpgradePolicyResponse';
import { ApplianceUpgradeResponse } from '../models/ApplianceUpgradeResponse';
import { AssetAddressInformation } from '../models/AssetAddressInformation';
import { AssetAddressInformationAllOf } from '../models/AssetAddressInformationAllOf';
import { AssetCloudConnection } from '../models/AssetCloudConnection';
import { AssetCloudConnectionAllOf } from '../models/AssetCloudConnectionAllOf';
import { AssetClusterMember } from '../models/AssetClusterMember';
import { AssetClusterMemberAllOf } from '../models/AssetClusterMemberAllOf';
import { AssetClusterMemberList } from '../models/AssetClusterMemberList';
import { AssetClusterMemberListAllOf } from '../models/AssetClusterMemberListAllOf';
import { AssetClusterMemberRelationship } from '../models/AssetClusterMemberRelationship';
import { AssetClusterMemberResponse } from '../models/AssetClusterMemberResponse';
import { AssetConnection } from '../models/AssetConnection';
import { AssetConnectionControlMessage } from '../models/AssetConnectionControlMessage';
import { AssetConnectionControlMessageAllOf } from '../models/AssetConnectionControlMessageAllOf';
import { AssetContractInformation } from '../models/AssetContractInformation';
import { AssetContractInformationAllOf } from '../models/AssetContractInformationAllOf';
import { AssetCredential } from '../models/AssetCredential';
import { AssetCustomerInformation } from '../models/AssetCustomerInformation';
import { AssetCustomerInformationAllOf } from '../models/AssetCustomerInformationAllOf';
import { AssetDeviceClaim } from '../models/AssetDeviceClaim';
import { AssetDeviceClaimAllOf } from '../models/AssetDeviceClaimAllOf';
import { AssetDeviceClaimRelationship } from '../models/AssetDeviceClaimRelationship';
import { AssetDeviceConfiguration } from '../models/AssetDeviceConfiguration';
import { AssetDeviceConfigurationAllOf } from '../models/AssetDeviceConfigurationAllOf';
import { AssetDeviceConfigurationList } from '../models/AssetDeviceConfigurationList';
import { AssetDeviceConfigurationListAllOf } from '../models/AssetDeviceConfigurationListAllOf';
import { AssetDeviceConfigurationRelationship } from '../models/AssetDeviceConfigurationRelationship';
import { AssetDeviceConfigurationResponse } from '../models/AssetDeviceConfigurationResponse';
import { AssetDeviceConnection } from '../models/AssetDeviceConnection';
import { AssetDeviceConnectionAllOf } from '../models/AssetDeviceConnectionAllOf';
import { AssetDeviceConnectionRelationship } from '../models/AssetDeviceConnectionRelationship';
import { AssetDeviceConnectorManager } from '../models/AssetDeviceConnectorManager';
import { AssetDeviceConnectorManagerAllOf } from '../models/AssetDeviceConnectorManagerAllOf';
import { AssetDeviceConnectorManagerList } from '../models/AssetDeviceConnectorManagerList';
import { AssetDeviceConnectorManagerListAllOf } from '../models/AssetDeviceConnectorManagerListAllOf';
import { AssetDeviceConnectorManagerResponse } from '../models/AssetDeviceConnectorManagerResponse';
import { AssetDeviceContractInformation } from '../models/AssetDeviceContractInformation';
import { AssetDeviceContractInformationAllOf } from '../models/AssetDeviceContractInformationAllOf';
import { AssetDeviceContractInformationList } from '../models/AssetDeviceContractInformationList';
import { AssetDeviceContractInformationListAllOf } from '../models/AssetDeviceContractInformationListAllOf';
import { AssetDeviceContractInformationResponse } from '../models/AssetDeviceContractInformationResponse';
import { AssetDeviceRegistration } from '../models/AssetDeviceRegistration';
import { AssetDeviceRegistrationAllOf } from '../models/AssetDeviceRegistrationAllOf';
import { AssetDeviceRegistrationList } from '../models/AssetDeviceRegistrationList';
import { AssetDeviceRegistrationListAllOf } from '../models/AssetDeviceRegistrationListAllOf';
import { AssetDeviceRegistrationRelationship } from '../models/AssetDeviceRegistrationRelationship';
import { AssetDeviceRegistrationResponse } from '../models/AssetDeviceRegistrationResponse';
import { AssetGlobalUltimate } from '../models/AssetGlobalUltimate';
import { AssetGlobalUltimateAllOf } from '../models/AssetGlobalUltimateAllOf';
import { AssetHttpConnection } from '../models/AssetHttpConnection';
import { AssetHttpConnectionAllOf } from '../models/AssetHttpConnectionAllOf';
import { AssetManagedDevice } from '../models/AssetManagedDevice';
import { AssetManagedDeviceAllOf } from '../models/AssetManagedDeviceAllOf';
import { AssetManagedDeviceList } from '../models/AssetManagedDeviceList';
import { AssetManagedDeviceListAllOf } from '../models/AssetManagedDeviceListAllOf';
import { AssetManagedDeviceResponse } from '../models/AssetManagedDeviceResponse';
import { AssetManagedDeviceStatus } from '../models/AssetManagedDeviceStatus';
import { AssetManagedDeviceStatusAllOf } from '../models/AssetManagedDeviceStatusAllOf';
import { AssetOrchestrationService } from '../models/AssetOrchestrationService';
import { AssetOrchestrationServiceAllOf } from '../models/AssetOrchestrationServiceAllOf';
import { AssetParentConnectionSignature } from '../models/AssetParentConnectionSignature';
import { AssetParentConnectionSignatureAllOf } from '../models/AssetParentConnectionSignatureAllOf';
import { AssetProductInformation } from '../models/AssetProductInformation';
import { AssetProductInformationAllOf } from '../models/AssetProductInformationAllOf';
import { AssetService } from '../models/AssetService';
import { AssetServiceAllOf } from '../models/AssetServiceAllOf';
import { AssetServiceOptions } from '../models/AssetServiceOptions';
import { AssetSudiInfo } from '../models/AssetSudiInfo';
import { AssetSudiInfoAllOf } from '../models/AssetSudiInfoAllOf';
import { AssetTarget } from '../models/AssetTarget';
import { AssetTargetAllOf } from '../models/AssetTargetAllOf';
import { AssetTargetList } from '../models/AssetTargetList';
import { AssetTargetListAllOf } from '../models/AssetTargetListAllOf';
import { AssetTargetResponse } from '../models/AssetTargetResponse';
import { AssetUsernamePasswordCredential } from '../models/AssetUsernamePasswordCredential';
import { AssetUsernamePasswordCredentialAllOf } from '../models/AssetUsernamePasswordCredentialAllOf';
import { AssetWorkloadOptimizerService } from '../models/AssetWorkloadOptimizerService';
import { AssetWorkloadOptimizerVmwareVcenterOptionsanyType } from '../models/AssetWorkloadOptimizerVmwareVcenterOptionsanyType';
import { AssetWorkloadOptimizerVmwareVcenterOptionsanyTypeAllOf } from '../models/AssetWorkloadOptimizerVmwareVcenterOptionsanyTypeAllOf';
import { BiosBootMode } from '../models/BiosBootMode';
import { BiosBootModeAllOf } from '../models/BiosBootModeAllOf';
import { BiosBootModeList } from '../models/BiosBootModeList';
import { BiosBootModeListAllOf } from '../models/BiosBootModeListAllOf';
import { BiosBootModeRelationship } from '../models/BiosBootModeRelationship';
import { BiosBootModeResponse } from '../models/BiosBootModeResponse';
import { BiosPolicy } from '../models/BiosPolicy';
import { BiosPolicyAllOf } from '../models/BiosPolicyAllOf';
import { BiosPolicyList } from '../models/BiosPolicyList';
import { BiosPolicyListAllOf } from '../models/BiosPolicyListAllOf';
import { BiosPolicyResponse } from '../models/BiosPolicyResponse';
import { BiosUnit } from '../models/BiosUnit';
import { BiosUnitAllOf } from '../models/BiosUnitAllOf';
import { BiosUnitList } from '../models/BiosUnitList';
import { BiosUnitListAllOf } from '../models/BiosUnitListAllOf';
import { BiosUnitRelationship } from '../models/BiosUnitRelationship';
import { BiosUnitResponse } from '../models/BiosUnitResponse';
import { BootBootloader } from '../models/BootBootloader';
import { BootBootloaderAllOf } from '../models/BootBootloaderAllOf';
import { BootDeviceBase } from '../models/BootDeviceBase';
import { BootDeviceBaseAllOf } from '../models/BootDeviceBaseAllOf';
import { BootDeviceBootMode } from '../models/BootDeviceBootMode';
import { BootDeviceBootModeAllOf } from '../models/BootDeviceBootModeAllOf';
import { BootDeviceBootModeList } from '../models/BootDeviceBootModeList';
import { BootDeviceBootModeListAllOf } from '../models/BootDeviceBootModeListAllOf';
import { BootDeviceBootModeRelationship } from '../models/BootDeviceBootModeRelationship';
import { BootDeviceBootModeResponse } from '../models/BootDeviceBootModeResponse';
import { BootIscsi } from '../models/BootIscsi';
import { BootIscsiAllOf } from '../models/BootIscsiAllOf';
import { BootLocalCdd } from '../models/BootLocalCdd';
import { BootLocalDisk } from '../models/BootLocalDisk';
import { BootLocalDiskAllOf } from '../models/BootLocalDiskAllOf';
import { BootNvme } from '../models/BootNvme';
import { BootPchStorage } from '../models/BootPchStorage';
import { BootPchStorageAllOf } from '../models/BootPchStorageAllOf';
import { BootPrecisionPolicy } from '../models/BootPrecisionPolicy';
import { BootPrecisionPolicyAllOf } from '../models/BootPrecisionPolicyAllOf';
import { BootPrecisionPolicyList } from '../models/BootPrecisionPolicyList';
import { BootPrecisionPolicyListAllOf } from '../models/BootPrecisionPolicyListAllOf';
import { BootPrecisionPolicyResponse } from '../models/BootPrecisionPolicyResponse';
import { BootPxe } from '../models/BootPxe';
import { BootPxeAllOf } from '../models/BootPxeAllOf';
import { BootSan } from '../models/BootSan';
import { BootSanAllOf } from '../models/BootSanAllOf';
import { BootSdCard } from '../models/BootSdCard';
import { BootSdCardAllOf } from '../models/BootSdCardAllOf';
import { BootUefiShell } from '../models/BootUefiShell';
import { BootUsb } from '../models/BootUsb';
import { BootUsbAllOf } from '../models/BootUsbAllOf';
import { BootVirtualMedia } from '../models/BootVirtualMedia';
import { BootVirtualMediaAllOf } from '../models/BootVirtualMediaAllOf';
import { CmrfCmRf } from '../models/CmrfCmRf';
import { CmrfCmRfAllOf } from '../models/CmrfCmRfAllOf';
import { CommConcreteCredential } from '../models/CommConcreteCredential';
import { CommConcreteCredentialAllOf } from '../models/CommConcreteCredentialAllOf';
import { CommCredential } from '../models/CommCredential';
import { CommCredentialAllOf } from '../models/CommCredentialAllOf';
import { CommIpV4Interface } from '../models/CommIpV4Interface';
import { CommIpV4InterfaceAllOf } from '../models/CommIpV4InterfaceAllOf';
import { CommVmwareCredential } from '../models/CommVmwareCredential';
import { CommVmwareCredentialAllOf } from '../models/CommVmwareCredentialAllOf';
import { ComputeBlade } from '../models/ComputeBlade';
import { ComputeBladeAllOf } from '../models/ComputeBladeAllOf';
import { ComputeBladeList } from '../models/ComputeBladeList';
import { ComputeBladeListAllOf } from '../models/ComputeBladeListAllOf';
import { ComputeBladeRelationship } from '../models/ComputeBladeRelationship';
import { ComputeBladeResponse } from '../models/ComputeBladeResponse';
import { ComputeBoard } from '../models/ComputeBoard';
import { ComputeBoardAllOf } from '../models/ComputeBoardAllOf';
import { ComputeBoardList } from '../models/ComputeBoardList';
import { ComputeBoardListAllOf } from '../models/ComputeBoardListAllOf';
import { ComputeBoardRelationship } from '../models/ComputeBoardRelationship';
import { ComputeBoardResponse } from '../models/ComputeBoardResponse';
import { ComputeIpAddress } from '../models/ComputeIpAddress';
import { ComputeIpAddressAllOf } from '../models/ComputeIpAddressAllOf';
import { ComputePersistentMemoryModule } from '../models/ComputePersistentMemoryModule';
import { ComputePersistentMemoryModuleAllOf } from '../models/ComputePersistentMemoryModuleAllOf';
import { ComputePersistentMemoryOperation } from '../models/ComputePersistentMemoryOperation';
import { ComputePersistentMemoryOperationAllOf } from '../models/ComputePersistentMemoryOperationAllOf';
import { ComputePhysical } from '../models/ComputePhysical';
import { ComputePhysicalAllOf } from '../models/ComputePhysicalAllOf';
import { ComputePhysicalRelationship } from '../models/ComputePhysicalRelationship';
import { ComputePhysicalSummary } from '../models/ComputePhysicalSummary';
import { ComputePhysicalSummaryAllOf } from '../models/ComputePhysicalSummaryAllOf';
import { ComputePhysicalSummaryList } from '../models/ComputePhysicalSummaryList';
import { ComputePhysicalSummaryListAllOf } from '../models/ComputePhysicalSummaryListAllOf';
import { ComputePhysicalSummaryResponse } from '../models/ComputePhysicalSummaryResponse';
import { ComputeRackUnit } from '../models/ComputeRackUnit';
import { ComputeRackUnitAllOf } from '../models/ComputeRackUnitAllOf';
import { ComputeRackUnitList } from '../models/ComputeRackUnitList';
import { ComputeRackUnitListAllOf } from '../models/ComputeRackUnitListAllOf';
import { ComputeRackUnitRelationship } from '../models/ComputeRackUnitRelationship';
import { ComputeRackUnitResponse } from '../models/ComputeRackUnitResponse';
import { ComputeServerConfig } from '../models/ComputeServerConfig';
import { ComputeServerConfigAllOf } from '../models/ComputeServerConfigAllOf';
import { ComputeServerSetting } from '../models/ComputeServerSetting';
import { ComputeServerSettingAllOf } from '../models/ComputeServerSettingAllOf';
import { ComputeServerSettingList } from '../models/ComputeServerSettingList';
import { ComputeServerSettingListAllOf } from '../models/ComputeServerSettingListAllOf';
import { ComputeServerSettingResponse } from '../models/ComputeServerSettingResponse';
import { CondAlarm } from '../models/CondAlarm';
import { CondAlarmAllOf } from '../models/CondAlarmAllOf';
import { CondAlarmList } from '../models/CondAlarmList';
import { CondAlarmListAllOf } from '../models/CondAlarmListAllOf';
import { CondAlarmResponse } from '../models/CondAlarmResponse';
import { CondHclStatus } from '../models/CondHclStatus';
import { CondHclStatusAllOf } from '../models/CondHclStatusAllOf';
import { CondHclStatusDetail } from '../models/CondHclStatusDetail';
import { CondHclStatusDetailAllOf } from '../models/CondHclStatusDetailAllOf';
import { CondHclStatusDetailList } from '../models/CondHclStatusDetailList';
import { CondHclStatusDetailListAllOf } from '../models/CondHclStatusDetailListAllOf';
import { CondHclStatusDetailRelationship } from '../models/CondHclStatusDetailRelationship';
import { CondHclStatusDetailResponse } from '../models/CondHclStatusDetailResponse';
import { CondHclStatusJob } from '../models/CondHclStatusJob';
import { CondHclStatusJobAllOf } from '../models/CondHclStatusJobAllOf';
import { CondHclStatusJobList } from '../models/CondHclStatusJobList';
import { CondHclStatusJobListAllOf } from '../models/CondHclStatusJobListAllOf';
import { CondHclStatusJobResponse } from '../models/CondHclStatusJobResponse';
import { CondHclStatusList } from '../models/CondHclStatusList';
import { CondHclStatusListAllOf } from '../models/CondHclStatusListAllOf';
import { CondHclStatusRelationship } from '../models/CondHclStatusRelationship';
import { CondHclStatusResponse } from '../models/CondHclStatusResponse';
import { ConnectorScopedInventory } from '../models/ConnectorScopedInventory';
import { ConnectorScopedInventoryAllOf } from '../models/ConnectorScopedInventoryAllOf';
import { ConnectorpackConnectorPackUpdate } from '../models/ConnectorpackConnectorPackUpdate';
import { ConnectorpackConnectorPackUpdateAllOf } from '../models/ConnectorpackConnectorPackUpdateAllOf';
import { ConnectorpackConnectorPackUpgrade } from '../models/ConnectorpackConnectorPackUpgrade';
import { ConnectorpackConnectorPackUpgradeAllOf } from '../models/ConnectorpackConnectorPackUpgradeAllOf';
import { ConnectorpackConnectorPackUpgradeList } from '../models/ConnectorpackConnectorPackUpgradeList';
import { ConnectorpackConnectorPackUpgradeListAllOf } from '../models/ConnectorpackConnectorPackUpgradeListAllOf';
import { ConnectorpackConnectorPackUpgradeResponse } from '../models/ConnectorpackConnectorPackUpgradeResponse';
import { ConnectorpackUpgradeImpact } from '../models/ConnectorpackUpgradeImpact';
import { ConnectorpackUpgradeImpactAllOf } from '../models/ConnectorpackUpgradeImpactAllOf';
import { ConnectorpackUpgradeImpactList } from '../models/ConnectorpackUpgradeImpactList';
import { ConnectorpackUpgradeImpactListAllOf } from '../models/ConnectorpackUpgradeImpactListAllOf';
import { ConnectorpackUpgradeImpactResponse } from '../models/ConnectorpackUpgradeImpactResponse';
import { ContentBaseParameter } from '../models/ContentBaseParameter';
import { ContentBaseParameterAllOf } from '../models/ContentBaseParameterAllOf';
import { ContentComplexType } from '../models/ContentComplexType';
import { ContentComplexTypeAllOf } from '../models/ContentComplexTypeAllOf';
import { ContentGrammar } from '../models/ContentGrammar';
import { ContentGrammarAllOf } from '../models/ContentGrammarAllOf';
import { ContentParameter } from '../models/ContentParameter';
import { ContentTextParameter } from '../models/ContentTextParameter';
import { ContentTextParameterAllOf } from '../models/ContentTextParameterAllOf';
import { DeviceconnectorPolicy } from '../models/DeviceconnectorPolicy';
import { DeviceconnectorPolicyAllOf } from '../models/DeviceconnectorPolicyAllOf';
import { DeviceconnectorPolicyList } from '../models/DeviceconnectorPolicyList';
import { DeviceconnectorPolicyListAllOf } from '../models/DeviceconnectorPolicyListAllOf';
import { DeviceconnectorPolicyResponse } from '../models/DeviceconnectorPolicyResponse';
import { EquipmentAbstractDevice } from '../models/EquipmentAbstractDevice';
import { EquipmentAbstractDeviceAllOf } from '../models/EquipmentAbstractDeviceAllOf';
import { EquipmentBase } from '../models/EquipmentBase';
import { EquipmentBaseAllOf } from '../models/EquipmentBaseAllOf';
import { EquipmentChassis } from '../models/EquipmentChassis';
import { EquipmentChassisAllOf } from '../models/EquipmentChassisAllOf';
import { EquipmentChassisList } from '../models/EquipmentChassisList';
import { EquipmentChassisListAllOf } from '../models/EquipmentChassisListAllOf';
import { EquipmentChassisRelationship } from '../models/EquipmentChassisRelationship';
import { EquipmentChassisResponse } from '../models/EquipmentChassisResponse';
import { EquipmentDeviceSummary } from '../models/EquipmentDeviceSummary';
import { EquipmentDeviceSummaryAllOf } from '../models/EquipmentDeviceSummaryAllOf';
import { EquipmentDeviceSummaryList } from '../models/EquipmentDeviceSummaryList';
import { EquipmentDeviceSummaryListAllOf } from '../models/EquipmentDeviceSummaryListAllOf';
import { EquipmentDeviceSummaryResponse } from '../models/EquipmentDeviceSummaryResponse';
import { EquipmentFan } from '../models/EquipmentFan';
import { EquipmentFanAllOf } from '../models/EquipmentFanAllOf';
import { EquipmentFanList } from '../models/EquipmentFanList';
import { EquipmentFanListAllOf } from '../models/EquipmentFanListAllOf';
import { EquipmentFanModule } from '../models/EquipmentFanModule';
import { EquipmentFanModuleAllOf } from '../models/EquipmentFanModuleAllOf';
import { EquipmentFanModuleList } from '../models/EquipmentFanModuleList';
import { EquipmentFanModuleListAllOf } from '../models/EquipmentFanModuleListAllOf';
import { EquipmentFanModuleRelationship } from '../models/EquipmentFanModuleRelationship';
import { EquipmentFanModuleResponse } from '../models/EquipmentFanModuleResponse';
import { EquipmentFanRelationship } from '../models/EquipmentFanRelationship';
import { EquipmentFanResponse } from '../models/EquipmentFanResponse';
import { EquipmentFex } from '../models/EquipmentFex';
import { EquipmentFexAllOf } from '../models/EquipmentFexAllOf';
import { EquipmentFexList } from '../models/EquipmentFexList';
import { EquipmentFexListAllOf } from '../models/EquipmentFexListAllOf';
import { EquipmentFexResponse } from '../models/EquipmentFexResponse';
import { EquipmentIoCard } from '../models/EquipmentIoCard';
import { EquipmentIoCardAllOf } from '../models/EquipmentIoCardAllOf';
import { EquipmentIoCardList } from '../models/EquipmentIoCardList';
import { EquipmentIoCardListAllOf } from '../models/EquipmentIoCardListAllOf';
import { EquipmentIoCardRelationship } from '../models/EquipmentIoCardRelationship';
import { EquipmentIoCardResponse } from '../models/EquipmentIoCardResponse';
import { EquipmentIoExpander } from '../models/EquipmentIoExpander';
import { EquipmentIoExpanderAllOf } from '../models/EquipmentIoExpanderAllOf';
import { EquipmentIoExpanderList } from '../models/EquipmentIoExpanderList';
import { EquipmentIoExpanderListAllOf } from '../models/EquipmentIoExpanderListAllOf';
import { EquipmentIoExpanderRelationship } from '../models/EquipmentIoExpanderRelationship';
import { EquipmentIoExpanderResponse } from '../models/EquipmentIoExpanderResponse';
import { EquipmentLocatorLed } from '../models/EquipmentLocatorLed';
import { EquipmentLocatorLedAllOf } from '../models/EquipmentLocatorLedAllOf';
import { EquipmentLocatorLedList } from '../models/EquipmentLocatorLedList';
import { EquipmentLocatorLedListAllOf } from '../models/EquipmentLocatorLedListAllOf';
import { EquipmentLocatorLedRelationship } from '../models/EquipmentLocatorLedRelationship';
import { EquipmentLocatorLedResponse } from '../models/EquipmentLocatorLedResponse';
import { EquipmentPsu } from '../models/EquipmentPsu';
import { EquipmentPsuAllOf } from '../models/EquipmentPsuAllOf';
import { EquipmentPsuList } from '../models/EquipmentPsuList';
import { EquipmentPsuListAllOf } from '../models/EquipmentPsuListAllOf';
import { EquipmentPsuRelationship } from '../models/EquipmentPsuRelationship';
import { EquipmentPsuResponse } from '../models/EquipmentPsuResponse';
import { EquipmentRackEnclosure } from '../models/EquipmentRackEnclosure';
import { EquipmentRackEnclosureAllOf } from '../models/EquipmentRackEnclosureAllOf';
import { EquipmentRackEnclosureList } from '../models/EquipmentRackEnclosureList';
import { EquipmentRackEnclosureListAllOf } from '../models/EquipmentRackEnclosureListAllOf';
import { EquipmentRackEnclosureRelationship } from '../models/EquipmentRackEnclosureRelationship';
import { EquipmentRackEnclosureResponse } from '../models/EquipmentRackEnclosureResponse';
import { EquipmentRackEnclosureSlot } from '../models/EquipmentRackEnclosureSlot';
import { EquipmentRackEnclosureSlotAllOf } from '../models/EquipmentRackEnclosureSlotAllOf';
import { EquipmentRackEnclosureSlotList } from '../models/EquipmentRackEnclosureSlotList';
import { EquipmentRackEnclosureSlotListAllOf } from '../models/EquipmentRackEnclosureSlotListAllOf';
import { EquipmentRackEnclosureSlotRelationship } from '../models/EquipmentRackEnclosureSlotRelationship';
import { EquipmentRackEnclosureSlotResponse } from '../models/EquipmentRackEnclosureSlotResponse';
import { EquipmentSharedIoModule } from '../models/EquipmentSharedIoModule';
import { EquipmentSharedIoModuleAllOf } from '../models/EquipmentSharedIoModuleAllOf';
import { EquipmentSharedIoModuleList } from '../models/EquipmentSharedIoModuleList';
import { EquipmentSharedIoModuleListAllOf } from '../models/EquipmentSharedIoModuleListAllOf';
import { EquipmentSharedIoModuleRelationship } from '../models/EquipmentSharedIoModuleRelationship';
import { EquipmentSharedIoModuleResponse } from '../models/EquipmentSharedIoModuleResponse';
import { EquipmentSwitchCard } from '../models/EquipmentSwitchCard';
import { EquipmentSwitchCardAllOf } from '../models/EquipmentSwitchCardAllOf';
import { EquipmentSwitchCardList } from '../models/EquipmentSwitchCardList';
import { EquipmentSwitchCardListAllOf } from '../models/EquipmentSwitchCardListAllOf';
import { EquipmentSwitchCardRelationship } from '../models/EquipmentSwitchCardRelationship';
import { EquipmentSwitchCardResponse } from '../models/EquipmentSwitchCardResponse';
import { EquipmentSystemIoController } from '../models/EquipmentSystemIoController';
import { EquipmentSystemIoControllerAllOf } from '../models/EquipmentSystemIoControllerAllOf';
import { EquipmentSystemIoControllerList } from '../models/EquipmentSystemIoControllerList';
import { EquipmentSystemIoControllerListAllOf } from '../models/EquipmentSystemIoControllerListAllOf';
import { EquipmentSystemIoControllerRelationship } from '../models/EquipmentSystemIoControllerRelationship';
import { EquipmentSystemIoControllerResponse } from '../models/EquipmentSystemIoControllerResponse';
import { EquipmentTpm } from '../models/EquipmentTpm';
import { EquipmentTpmAllOf } from '../models/EquipmentTpmAllOf';
import { EquipmentTpmList } from '../models/EquipmentTpmList';
import { EquipmentTpmListAllOf } from '../models/EquipmentTpmListAllOf';
import { EquipmentTpmRelationship } from '../models/EquipmentTpmRelationship';
import { EquipmentTpmResponse } from '../models/EquipmentTpmResponse';
import { EtherPhysicalPort } from '../models/EtherPhysicalPort';
import { EtherPhysicalPortAllOf } from '../models/EtherPhysicalPortAllOf';
import { EtherPhysicalPortList } from '../models/EtherPhysicalPortList';
import { EtherPhysicalPortListAllOf } from '../models/EtherPhysicalPortListAllOf';
import { EtherPhysicalPortRelationship } from '../models/EtherPhysicalPortRelationship';
import { EtherPhysicalPortResponse } from '../models/EtherPhysicalPortResponse';
import { ExternalsiteAuthorization } from '../models/ExternalsiteAuthorization';
import { ExternalsiteAuthorizationAllOf } from '../models/ExternalsiteAuthorizationAllOf';
import { ExternalsiteAuthorizationList } from '../models/ExternalsiteAuthorizationList';
import { ExternalsiteAuthorizationListAllOf } from '../models/ExternalsiteAuthorizationListAllOf';
import { ExternalsiteAuthorizationResponse } from '../models/ExternalsiteAuthorizationResponse';
import { FaultInstance } from '../models/FaultInstance';
import { FaultInstanceAllOf } from '../models/FaultInstanceAllOf';
import { FaultInstanceList } from '../models/FaultInstanceList';
import { FaultInstanceListAllOf } from '../models/FaultInstanceListAllOf';
import { FaultInstanceResponse } from '../models/FaultInstanceResponse';
import { FcPhysicalPort } from '../models/FcPhysicalPort';
import { FcPhysicalPortAllOf } from '../models/FcPhysicalPortAllOf';
import { FcPhysicalPortList } from '../models/FcPhysicalPortList';
import { FcPhysicalPortListAllOf } from '../models/FcPhysicalPortListAllOf';
import { FcPhysicalPortRelationship } from '../models/FcPhysicalPortRelationship';
import { FcPhysicalPortResponse } from '../models/FcPhysicalPortResponse';
import { FeedbackFeedbackData } from '../models/FeedbackFeedbackData';
import { FeedbackFeedbackDataAllOf } from '../models/FeedbackFeedbackDataAllOf';
import { FeedbackFeedbackPost } from '../models/FeedbackFeedbackPost';
import { FeedbackFeedbackPostAllOf } from '../models/FeedbackFeedbackPostAllOf';
import { FirmwareBaseDistributable } from '../models/FirmwareBaseDistributable';
import { FirmwareBaseDistributableAllOf } from '../models/FirmwareBaseDistributableAllOf';
import { FirmwareCifsServer } from '../models/FirmwareCifsServer';
import { FirmwareCifsServerAllOf } from '../models/FirmwareCifsServerAllOf';
import { FirmwareDirectDownload } from '../models/FirmwareDirectDownload';
import { FirmwareDirectDownloadAllOf } from '../models/FirmwareDirectDownloadAllOf';
import { FirmwareDistributable } from '../models/FirmwareDistributable';
import { FirmwareDistributableAllOf } from '../models/FirmwareDistributableAllOf';
import { FirmwareDistributableList } from '../models/FirmwareDistributableList';
import { FirmwareDistributableListAllOf } from '../models/FirmwareDistributableListAllOf';
import { FirmwareDistributableRelationship } from '../models/FirmwareDistributableRelationship';
import { FirmwareDistributableResponse } from '../models/FirmwareDistributableResponse';
import { FirmwareDriverDistributable } from '../models/FirmwareDriverDistributable';
import { FirmwareDriverDistributableAllOf } from '../models/FirmwareDriverDistributableAllOf';
import { FirmwareDriverDistributableList } from '../models/FirmwareDriverDistributableList';
import { FirmwareDriverDistributableListAllOf } from '../models/FirmwareDriverDistributableListAllOf';
import { FirmwareDriverDistributableResponse } from '../models/FirmwareDriverDistributableResponse';
import { FirmwareEula } from '../models/FirmwareEula';
import { FirmwareEulaAllOf } from '../models/FirmwareEulaAllOf';
import { FirmwareEulaList } from '../models/FirmwareEulaList';
import { FirmwareEulaListAllOf } from '../models/FirmwareEulaListAllOf';
import { FirmwareEulaResponse } from '../models/FirmwareEulaResponse';
import { FirmwareHttpServer } from '../models/FirmwareHttpServer';
import { FirmwareHttpServerAllOf } from '../models/FirmwareHttpServerAllOf';
import { FirmwareNetworkShare } from '../models/FirmwareNetworkShare';
import { FirmwareNetworkShareAllOf } from '../models/FirmwareNetworkShareAllOf';
import { FirmwareNfsServer } from '../models/FirmwareNfsServer';
import { FirmwareNfsServerAllOf } from '../models/FirmwareNfsServerAllOf';
import { FirmwareRunningFirmware } from '../models/FirmwareRunningFirmware';
import { FirmwareRunningFirmwareAllOf } from '../models/FirmwareRunningFirmwareAllOf';
import { FirmwareRunningFirmwareList } from '../models/FirmwareRunningFirmwareList';
import { FirmwareRunningFirmwareListAllOf } from '../models/FirmwareRunningFirmwareListAllOf';
import { FirmwareRunningFirmwareRelationship } from '../models/FirmwareRunningFirmwareRelationship';
import { FirmwareRunningFirmwareResponse } from '../models/FirmwareRunningFirmwareResponse';
import { FirmwareServerConfigurationUtilityDistributable } from '../models/FirmwareServerConfigurationUtilityDistributable';
import { FirmwareServerConfigurationUtilityDistributableAllOf } from '../models/FirmwareServerConfigurationUtilityDistributableAllOf';
import { FirmwareServerConfigurationUtilityDistributableList } from '../models/FirmwareServerConfigurationUtilityDistributableList';
import { FirmwareServerConfigurationUtilityDistributableListAllOf } from '../models/FirmwareServerConfigurationUtilityDistributableListAllOf';
import { FirmwareServerConfigurationUtilityDistributableRelationship } from '../models/FirmwareServerConfigurationUtilityDistributableRelationship';
import { FirmwareServerConfigurationUtilityDistributableResponse } from '../models/FirmwareServerConfigurationUtilityDistributableResponse';
import { FirmwareUpgrade } from '../models/FirmwareUpgrade';
import { FirmwareUpgradeAllOf } from '../models/FirmwareUpgradeAllOf';
import { FirmwareUpgradeList } from '../models/FirmwareUpgradeList';
import { FirmwareUpgradeListAllOf } from '../models/FirmwareUpgradeListAllOf';
import { FirmwareUpgradeRelationship } from '../models/FirmwareUpgradeRelationship';
import { FirmwareUpgradeResponse } from '../models/FirmwareUpgradeResponse';
import { FirmwareUpgradeStatus } from '../models/FirmwareUpgradeStatus';
import { FirmwareUpgradeStatusAllOf } from '../models/FirmwareUpgradeStatusAllOf';
import { FirmwareUpgradeStatusList } from '../models/FirmwareUpgradeStatusList';
import { FirmwareUpgradeStatusListAllOf } from '../models/FirmwareUpgradeStatusListAllOf';
import { FirmwareUpgradeStatusRelationship } from '../models/FirmwareUpgradeStatusRelationship';
import { FirmwareUpgradeStatusResponse } from '../models/FirmwareUpgradeStatusResponse';
import { ForecastCatalog } from '../models/ForecastCatalog';
import { ForecastCatalogAllOf } from '../models/ForecastCatalogAllOf';
import { ForecastCatalogList } from '../models/ForecastCatalogList';
import { ForecastCatalogListAllOf } from '../models/ForecastCatalogListAllOf';
import { ForecastCatalogRelationship } from '../models/ForecastCatalogRelationship';
import { ForecastCatalogResponse } from '../models/ForecastCatalogResponse';
import { ForecastDefinition } from '../models/ForecastDefinition';
import { ForecastDefinitionAllOf } from '../models/ForecastDefinitionAllOf';
import { ForecastDefinitionList } from '../models/ForecastDefinitionList';
import { ForecastDefinitionListAllOf } from '../models/ForecastDefinitionListAllOf';
import { ForecastDefinitionRelationship } from '../models/ForecastDefinitionRelationship';
import { ForecastDefinitionResponse } from '../models/ForecastDefinitionResponse';
import { ForecastInstance } from '../models/ForecastInstance';
import { ForecastInstanceAllOf } from '../models/ForecastInstanceAllOf';
import { ForecastInstanceList } from '../models/ForecastInstanceList';
import { ForecastInstanceListAllOf } from '../models/ForecastInstanceListAllOf';
import { ForecastInstanceResponse } from '../models/ForecastInstanceResponse';
import { ForecastModel } from '../models/ForecastModel';
import { ForecastModelAllOf } from '../models/ForecastModelAllOf';
import { GraphicsCard } from '../models/GraphicsCard';
import { GraphicsCardAllOf } from '../models/GraphicsCardAllOf';
import { GraphicsCardList } from '../models/GraphicsCardList';
import { GraphicsCardListAllOf } from '../models/GraphicsCardListAllOf';
import { GraphicsCardRelationship } from '../models/GraphicsCardRelationship';
import { GraphicsCardResponse } from '../models/GraphicsCardResponse';
import { GraphicsController } from '../models/GraphicsController';
import { GraphicsControllerAllOf } from '../models/GraphicsControllerAllOf';
import { GraphicsControllerList } from '../models/GraphicsControllerList';
import { GraphicsControllerListAllOf } from '../models/GraphicsControllerListAllOf';
import { GraphicsControllerRelationship } from '../models/GraphicsControllerRelationship';
import { GraphicsControllerResponse } from '../models/GraphicsControllerResponse';
import { HclCompatibilityStatus } from '../models/HclCompatibilityStatus';
import { HclCompatibilityStatusAllOf } from '../models/HclCompatibilityStatusAllOf';
import { HclConstraint } from '../models/HclConstraint';
import { HclConstraintAllOf } from '../models/HclConstraintAllOf';
import { HclDriverImage } from '../models/HclDriverImage';
import { HclDriverImageAllOf } from '../models/HclDriverImageAllOf';
import { HclDriverImageList } from '../models/HclDriverImageList';
import { HclDriverImageListAllOf } from '../models/HclDriverImageListAllOf';
import { HclDriverImageResponse } from '../models/HclDriverImageResponse';
import { HclExemptedCatalog } from '../models/HclExemptedCatalog';
import { HclExemptedCatalogAllOf } from '../models/HclExemptedCatalogAllOf';
import { HclExemptedCatalogList } from '../models/HclExemptedCatalogList';
import { HclExemptedCatalogListAllOf } from '../models/HclExemptedCatalogListAllOf';
import { HclExemptedCatalogResponse } from '../models/HclExemptedCatalogResponse';
import { HclFirmware } from '../models/HclFirmware';
import { HclFirmwareAllOf } from '../models/HclFirmwareAllOf';
import { HclHardwareCompatibilityProfile } from '../models/HclHardwareCompatibilityProfile';
import { HclHardwareCompatibilityProfileAllOf } from '../models/HclHardwareCompatibilityProfileAllOf';
import { HclHyperflexSoftwareCompatibilityInfo } from '../models/HclHyperflexSoftwareCompatibilityInfo';
import { HclHyperflexSoftwareCompatibilityInfoAllOf } from '../models/HclHyperflexSoftwareCompatibilityInfoAllOf';
import { HclHyperflexSoftwareCompatibilityInfoList } from '../models/HclHyperflexSoftwareCompatibilityInfoList';
import { HclHyperflexSoftwareCompatibilityInfoListAllOf } from '../models/HclHyperflexSoftwareCompatibilityInfoListAllOf';
import { HclHyperflexSoftwareCompatibilityInfoRelationship } from '../models/HclHyperflexSoftwareCompatibilityInfoRelationship';
import { HclHyperflexSoftwareCompatibilityInfoResponse } from '../models/HclHyperflexSoftwareCompatibilityInfoResponse';
import { HclOperatingSystem } from '../models/HclOperatingSystem';
import { HclOperatingSystemAllOf } from '../models/HclOperatingSystemAllOf';
import { HclOperatingSystemList } from '../models/HclOperatingSystemList';
import { HclOperatingSystemListAllOf } from '../models/HclOperatingSystemListAllOf';
import { HclOperatingSystemRelationship } from '../models/HclOperatingSystemRelationship';
import { HclOperatingSystemResponse } from '../models/HclOperatingSystemResponse';
import { HclOperatingSystemVendor } from '../models/HclOperatingSystemVendor';
import { HclOperatingSystemVendorAllOf } from '../models/HclOperatingSystemVendorAllOf';
import { HclOperatingSystemVendorList } from '../models/HclOperatingSystemVendorList';
import { HclOperatingSystemVendorListAllOf } from '../models/HclOperatingSystemVendorListAllOf';
import { HclOperatingSystemVendorRelationship } from '../models/HclOperatingSystemVendorRelationship';
import { HclOperatingSystemVendorResponse } from '../models/HclOperatingSystemVendorResponse';
import { HclProduct } from '../models/HclProduct';
import { HclProductAllOf } from '../models/HclProductAllOf';
import { HclServiceStatus } from '../models/HclServiceStatus';
import { HclServiceStatusAllOf } from '../models/HclServiceStatusAllOf';
import { HclServiceStatusList } from '../models/HclServiceStatusList';
import { HclServiceStatusListAllOf } from '../models/HclServiceStatusListAllOf';
import { HclServiceStatusResponse } from '../models/HclServiceStatusResponse';
import { HclSupportedDriverName } from '../models/HclSupportedDriverName';
import { HclSupportedDriverNameAllOf } from '../models/HclSupportedDriverNameAllOf';
import { HyperflexAbstractAppSetting } from '../models/HyperflexAbstractAppSetting';
import { HyperflexAbstractAppSettingAllOf } from '../models/HyperflexAbstractAppSettingAllOf';
import { HyperflexAlarm } from '../models/HyperflexAlarm';
import { HyperflexAlarmAllOf } from '../models/HyperflexAlarmAllOf';
import { HyperflexAlarmList } from '../models/HyperflexAlarmList';
import { HyperflexAlarmListAllOf } from '../models/HyperflexAlarmListAllOf';
import { HyperflexAlarmRelationship } from '../models/HyperflexAlarmRelationship';
import { HyperflexAlarmResponse } from '../models/HyperflexAlarmResponse';
import { HyperflexAppCatalog } from '../models/HyperflexAppCatalog';
import { HyperflexAppCatalogAllOf } from '../models/HyperflexAppCatalogAllOf';
import { HyperflexAppCatalogList } from '../models/HyperflexAppCatalogList';
import { HyperflexAppCatalogListAllOf } from '../models/HyperflexAppCatalogListAllOf';
import { HyperflexAppCatalogRelationship } from '../models/HyperflexAppCatalogRelationship';
import { HyperflexAppCatalogResponse } from '../models/HyperflexAppCatalogResponse';
import { HyperflexAppSettingConstraint } from '../models/HyperflexAppSettingConstraint';
import { HyperflexAppSettingConstraintAllOf } from '../models/HyperflexAppSettingConstraintAllOf';
import { HyperflexAutoSupportPolicy } from '../models/HyperflexAutoSupportPolicy';
import { HyperflexAutoSupportPolicyAllOf } from '../models/HyperflexAutoSupportPolicyAllOf';
import { HyperflexAutoSupportPolicyList } from '../models/HyperflexAutoSupportPolicyList';
import { HyperflexAutoSupportPolicyListAllOf } from '../models/HyperflexAutoSupportPolicyListAllOf';
import { HyperflexAutoSupportPolicyRelationship } from '../models/HyperflexAutoSupportPolicyRelationship';
import { HyperflexAutoSupportPolicyResponse } from '../models/HyperflexAutoSupportPolicyResponse';
import { HyperflexCapabilityInfo } from '../models/HyperflexCapabilityInfo';
import { HyperflexCapabilityInfoAllOf } from '../models/HyperflexCapabilityInfoAllOf';
import { HyperflexCapabilityInfoList } from '../models/HyperflexCapabilityInfoList';
import { HyperflexCapabilityInfoListAllOf } from '../models/HyperflexCapabilityInfoListAllOf';
import { HyperflexCapabilityInfoRelationship } from '../models/HyperflexCapabilityInfoRelationship';
import { HyperflexCapabilityInfoResponse } from '../models/HyperflexCapabilityInfoResponse';
import { HyperflexCluster } from '../models/HyperflexCluster';
import { HyperflexClusterAllOf } from '../models/HyperflexClusterAllOf';
import { HyperflexClusterList } from '../models/HyperflexClusterList';
import { HyperflexClusterListAllOf } from '../models/HyperflexClusterListAllOf';
import { HyperflexClusterNetworkPolicy } from '../models/HyperflexClusterNetworkPolicy';
import { HyperflexClusterNetworkPolicyAllOf } from '../models/HyperflexClusterNetworkPolicyAllOf';
import { HyperflexClusterNetworkPolicyList } from '../models/HyperflexClusterNetworkPolicyList';
import { HyperflexClusterNetworkPolicyListAllOf } from '../models/HyperflexClusterNetworkPolicyListAllOf';
import { HyperflexClusterNetworkPolicyRelationship } from '../models/HyperflexClusterNetworkPolicyRelationship';
import { HyperflexClusterNetworkPolicyResponse } from '../models/HyperflexClusterNetworkPolicyResponse';
import { HyperflexClusterProfile } from '../models/HyperflexClusterProfile';
import { HyperflexClusterProfileAllOf } from '../models/HyperflexClusterProfileAllOf';
import { HyperflexClusterProfileList } from '../models/HyperflexClusterProfileList';
import { HyperflexClusterProfileListAllOf } from '../models/HyperflexClusterProfileListAllOf';
import { HyperflexClusterProfileRelationship } from '../models/HyperflexClusterProfileRelationship';
import { HyperflexClusterProfileResponse } from '../models/HyperflexClusterProfileResponse';
import { HyperflexClusterRelationship } from '../models/HyperflexClusterRelationship';
import { HyperflexClusterResponse } from '../models/HyperflexClusterResponse';
import { HyperflexClusterStoragePolicy } from '../models/HyperflexClusterStoragePolicy';
import { HyperflexClusterStoragePolicyAllOf } from '../models/HyperflexClusterStoragePolicyAllOf';
import { HyperflexClusterStoragePolicyList } from '../models/HyperflexClusterStoragePolicyList';
import { HyperflexClusterStoragePolicyListAllOf } from '../models/HyperflexClusterStoragePolicyListAllOf';
import { HyperflexClusterStoragePolicyRelationship } from '../models/HyperflexClusterStoragePolicyRelationship';
import { HyperflexClusterStoragePolicyResponse } from '../models/HyperflexClusterStoragePolicyResponse';
import { HyperflexConfigResult } from '../models/HyperflexConfigResult';
import { HyperflexConfigResultAllOf } from '../models/HyperflexConfigResultAllOf';
import { HyperflexConfigResultEntry } from '../models/HyperflexConfigResultEntry';
import { HyperflexConfigResultEntryAllOf } from '../models/HyperflexConfigResultEntryAllOf';
import { HyperflexConfigResultEntryList } from '../models/HyperflexConfigResultEntryList';
import { HyperflexConfigResultEntryListAllOf } from '../models/HyperflexConfigResultEntryListAllOf';
import { HyperflexConfigResultEntryRelationship } from '../models/HyperflexConfigResultEntryRelationship';
import { HyperflexConfigResultEntryResponse } from '../models/HyperflexConfigResultEntryResponse';
import { HyperflexConfigResultList } from '../models/HyperflexConfigResultList';
import { HyperflexConfigResultListAllOf } from '../models/HyperflexConfigResultListAllOf';
import { HyperflexConfigResultRelationship } from '../models/HyperflexConfigResultRelationship';
import { HyperflexConfigResultResponse } from '../models/HyperflexConfigResultResponse';
import { HyperflexExtFcStoragePolicy } from '../models/HyperflexExtFcStoragePolicy';
import { HyperflexExtFcStoragePolicyAllOf } from '../models/HyperflexExtFcStoragePolicyAllOf';
import { HyperflexExtFcStoragePolicyList } from '../models/HyperflexExtFcStoragePolicyList';
import { HyperflexExtFcStoragePolicyListAllOf } from '../models/HyperflexExtFcStoragePolicyListAllOf';
import { HyperflexExtFcStoragePolicyRelationship } from '../models/HyperflexExtFcStoragePolicyRelationship';
import { HyperflexExtFcStoragePolicyResponse } from '../models/HyperflexExtFcStoragePolicyResponse';
import { HyperflexExtIscsiStoragePolicy } from '../models/HyperflexExtIscsiStoragePolicy';
import { HyperflexExtIscsiStoragePolicyAllOf } from '../models/HyperflexExtIscsiStoragePolicyAllOf';
import { HyperflexExtIscsiStoragePolicyList } from '../models/HyperflexExtIscsiStoragePolicyList';
import { HyperflexExtIscsiStoragePolicyListAllOf } from '../models/HyperflexExtIscsiStoragePolicyListAllOf';
import { HyperflexExtIscsiStoragePolicyRelationship } from '../models/HyperflexExtIscsiStoragePolicyRelationship';
import { HyperflexExtIscsiStoragePolicyResponse } from '../models/HyperflexExtIscsiStoragePolicyResponse';
import { HyperflexFeatureLimitEntry } from '../models/HyperflexFeatureLimitEntry';
import { HyperflexFeatureLimitEntryAllOf } from '../models/HyperflexFeatureLimitEntryAllOf';
import { HyperflexFeatureLimitExternal } from '../models/HyperflexFeatureLimitExternal';
import { HyperflexFeatureLimitExternalAllOf } from '../models/HyperflexFeatureLimitExternalAllOf';
import { HyperflexFeatureLimitExternalList } from '../models/HyperflexFeatureLimitExternalList';
import { HyperflexFeatureLimitExternalListAllOf } from '../models/HyperflexFeatureLimitExternalListAllOf';
import { HyperflexFeatureLimitExternalRelationship } from '../models/HyperflexFeatureLimitExternalRelationship';
import { HyperflexFeatureLimitExternalResponse } from '../models/HyperflexFeatureLimitExternalResponse';
import { HyperflexFeatureLimitInternal } from '../models/HyperflexFeatureLimitInternal';
import { HyperflexFeatureLimitInternalAllOf } from '../models/HyperflexFeatureLimitInternalAllOf';
import { HyperflexFeatureLimitInternalList } from '../models/HyperflexFeatureLimitInternalList';
import { HyperflexFeatureLimitInternalListAllOf } from '../models/HyperflexFeatureLimitInternalListAllOf';
import { HyperflexFeatureLimitInternalRelationship } from '../models/HyperflexFeatureLimitInternalRelationship';
import { HyperflexFeatureLimitInternalResponse } from '../models/HyperflexFeatureLimitInternalResponse';
import { HyperflexHealth } from '../models/HyperflexHealth';
import { HyperflexHealthAllOf } from '../models/HyperflexHealthAllOf';
import { HyperflexHealthList } from '../models/HyperflexHealthList';
import { HyperflexHealthListAllOf } from '../models/HyperflexHealthListAllOf';
import { HyperflexHealthRelationship } from '../models/HyperflexHealthRelationship';
import { HyperflexHealthResponse } from '../models/HyperflexHealthResponse';
import { HyperflexHxLinkDt } from '../models/HyperflexHxLinkDt';
import { HyperflexHxLinkDtAllOf } from '../models/HyperflexHxLinkDtAllOf';
import { HyperflexHxNetworkAddressDt } from '../models/HyperflexHxNetworkAddressDt';
import { HyperflexHxNetworkAddressDtAllOf } from '../models/HyperflexHxNetworkAddressDtAllOf';
import { HyperflexHxResiliencyInfoDt } from '../models/HyperflexHxResiliencyInfoDt';
import { HyperflexHxResiliencyInfoDtAllOf } from '../models/HyperflexHxResiliencyInfoDtAllOf';
import { HyperflexHxUuIdDt } from '../models/HyperflexHxUuIdDt';
import { HyperflexHxUuIdDtAllOf } from '../models/HyperflexHxUuIdDtAllOf';
import { HyperflexHxZoneResiliencyInfoDt } from '../models/HyperflexHxZoneResiliencyInfoDt';
import { HyperflexHxZoneResiliencyInfoDtAllOf } from '../models/HyperflexHxZoneResiliencyInfoDtAllOf';
import { HyperflexHxdpVersion } from '../models/HyperflexHxdpVersion';
import { HyperflexHxdpVersionAllOf } from '../models/HyperflexHxdpVersionAllOf';
import { HyperflexHxdpVersionList } from '../models/HyperflexHxdpVersionList';
import { HyperflexHxdpVersionListAllOf } from '../models/HyperflexHxdpVersionListAllOf';
import { HyperflexHxdpVersionRelationship } from '../models/HyperflexHxdpVersionRelationship';
import { HyperflexHxdpVersionResponse } from '../models/HyperflexHxdpVersionResponse';
import { HyperflexIpAddrRange } from '../models/HyperflexIpAddrRange';
import { HyperflexIpAddrRangeAllOf } from '../models/HyperflexIpAddrRangeAllOf';
import { HyperflexLocalCredentialPolicy } from '../models/HyperflexLocalCredentialPolicy';
import { HyperflexLocalCredentialPolicyAllOf } from '../models/HyperflexLocalCredentialPolicyAllOf';
import { HyperflexLocalCredentialPolicyList } from '../models/HyperflexLocalCredentialPolicyList';
import { HyperflexLocalCredentialPolicyListAllOf } from '../models/HyperflexLocalCredentialPolicyListAllOf';
import { HyperflexLocalCredentialPolicyRelationship } from '../models/HyperflexLocalCredentialPolicyRelationship';
import { HyperflexLocalCredentialPolicyResponse } from '../models/HyperflexLocalCredentialPolicyResponse';
import { HyperflexLogicalAvailabilityZone } from '../models/HyperflexLogicalAvailabilityZone';
import { HyperflexLogicalAvailabilityZoneAllOf } from '../models/HyperflexLogicalAvailabilityZoneAllOf';
import { HyperflexMacAddrPrefixRange } from '../models/HyperflexMacAddrPrefixRange';
import { HyperflexMacAddrPrefixRangeAllOf } from '../models/HyperflexMacAddrPrefixRangeAllOf';
import { HyperflexNamedVlan } from '../models/HyperflexNamedVlan';
import { HyperflexNamedVlanAllOf } from '../models/HyperflexNamedVlanAllOf';
import { HyperflexNamedVsan } from '../models/HyperflexNamedVsan';
import { HyperflexNamedVsanAllOf } from '../models/HyperflexNamedVsanAllOf';
import { HyperflexNode } from '../models/HyperflexNode';
import { HyperflexNodeAllOf } from '../models/HyperflexNodeAllOf';
import { HyperflexNodeConfigPolicy } from '../models/HyperflexNodeConfigPolicy';
import { HyperflexNodeConfigPolicyAllOf } from '../models/HyperflexNodeConfigPolicyAllOf';
import { HyperflexNodeConfigPolicyList } from '../models/HyperflexNodeConfigPolicyList';
import { HyperflexNodeConfigPolicyListAllOf } from '../models/HyperflexNodeConfigPolicyListAllOf';
import { HyperflexNodeConfigPolicyRelationship } from '../models/HyperflexNodeConfigPolicyRelationship';
import { HyperflexNodeConfigPolicyResponse } from '../models/HyperflexNodeConfigPolicyResponse';
import { HyperflexNodeList } from '../models/HyperflexNodeList';
import { HyperflexNodeListAllOf } from '../models/HyperflexNodeListAllOf';
import { HyperflexNodeProfile } from '../models/HyperflexNodeProfile';
import { HyperflexNodeProfileAllOf } from '../models/HyperflexNodeProfileAllOf';
import { HyperflexNodeProfileList } from '../models/HyperflexNodeProfileList';
import { HyperflexNodeProfileListAllOf } from '../models/HyperflexNodeProfileListAllOf';
import { HyperflexNodeProfileRelationship } from '../models/HyperflexNodeProfileRelationship';
import { HyperflexNodeProfileResponse } from '../models/HyperflexNodeProfileResponse';
import { HyperflexNodeRelationship } from '../models/HyperflexNodeRelationship';
import { HyperflexNodeResponse } from '../models/HyperflexNodeResponse';
import { HyperflexProxySettingPolicy } from '../models/HyperflexProxySettingPolicy';
import { HyperflexProxySettingPolicyAllOf } from '../models/HyperflexProxySettingPolicyAllOf';
import { HyperflexProxySettingPolicyList } from '../models/HyperflexProxySettingPolicyList';
import { HyperflexProxySettingPolicyListAllOf } from '../models/HyperflexProxySettingPolicyListAllOf';
import { HyperflexProxySettingPolicyRelationship } from '../models/HyperflexProxySettingPolicyRelationship';
import { HyperflexProxySettingPolicyResponse } from '../models/HyperflexProxySettingPolicyResponse';
import { HyperflexServerFirmwareVersion } from '../models/HyperflexServerFirmwareVersion';
import { HyperflexServerFirmwareVersionAllOf } from '../models/HyperflexServerFirmwareVersionAllOf';
import { HyperflexServerFirmwareVersionEntry } from '../models/HyperflexServerFirmwareVersionEntry';
import { HyperflexServerFirmwareVersionEntryAllOf } from '../models/HyperflexServerFirmwareVersionEntryAllOf';
import { HyperflexServerFirmwareVersionList } from '../models/HyperflexServerFirmwareVersionList';
import { HyperflexServerFirmwareVersionListAllOf } from '../models/HyperflexServerFirmwareVersionListAllOf';
import { HyperflexServerFirmwareVersionRelationship } from '../models/HyperflexServerFirmwareVersionRelationship';
import { HyperflexServerFirmwareVersionResponse } from '../models/HyperflexServerFirmwareVersionResponse';
import { HyperflexServerModel } from '../models/HyperflexServerModel';
import { HyperflexServerModelAllOf } from '../models/HyperflexServerModelAllOf';
import { HyperflexServerModelEntry } from '../models/HyperflexServerModelEntry';
import { HyperflexServerModelEntryAllOf } from '../models/HyperflexServerModelEntryAllOf';
import { HyperflexServerModelList } from '../models/HyperflexServerModelList';
import { HyperflexServerModelListAllOf } from '../models/HyperflexServerModelListAllOf';
import { HyperflexServerModelRelationship } from '../models/HyperflexServerModelRelationship';
import { HyperflexServerModelResponse } from '../models/HyperflexServerModelResponse';
import { HyperflexSoftwareVersionPolicy } from '../models/HyperflexSoftwareVersionPolicy';
import { HyperflexSoftwareVersionPolicyAllOf } from '../models/HyperflexSoftwareVersionPolicyAllOf';
import { HyperflexSoftwareVersionPolicyList } from '../models/HyperflexSoftwareVersionPolicyList';
import { HyperflexSoftwareVersionPolicyListAllOf } from '../models/HyperflexSoftwareVersionPolicyListAllOf';
import { HyperflexSoftwareVersionPolicyRelationship } from '../models/HyperflexSoftwareVersionPolicyRelationship';
import { HyperflexSoftwareVersionPolicyResponse } from '../models/HyperflexSoftwareVersionPolicyResponse';
import { HyperflexStPlatformClusterHealingInfo } from '../models/HyperflexStPlatformClusterHealingInfo';
import { HyperflexStPlatformClusterHealingInfoAllOf } from '../models/HyperflexStPlatformClusterHealingInfoAllOf';
import { HyperflexStPlatformClusterResiliencyInfo } from '../models/HyperflexStPlatformClusterResiliencyInfo';
import { HyperflexStPlatformClusterResiliencyInfoAllOf } from '../models/HyperflexStPlatformClusterResiliencyInfoAllOf';
import { HyperflexSummary } from '../models/HyperflexSummary';
import { HyperflexSummaryAllOf } from '../models/HyperflexSummaryAllOf';
import { HyperflexSysConfigPolicy } from '../models/HyperflexSysConfigPolicy';
import { HyperflexSysConfigPolicyAllOf } from '../models/HyperflexSysConfigPolicyAllOf';
import { HyperflexSysConfigPolicyList } from '../models/HyperflexSysConfigPolicyList';
import { HyperflexSysConfigPolicyListAllOf } from '../models/HyperflexSysConfigPolicyListAllOf';
import { HyperflexSysConfigPolicyRelationship } from '../models/HyperflexSysConfigPolicyRelationship';
import { HyperflexSysConfigPolicyResponse } from '../models/HyperflexSysConfigPolicyResponse';
import { HyperflexUcsmConfigPolicy } from '../models/HyperflexUcsmConfigPolicy';
import { HyperflexUcsmConfigPolicyAllOf } from '../models/HyperflexUcsmConfigPolicyAllOf';
import { HyperflexUcsmConfigPolicyList } from '../models/HyperflexUcsmConfigPolicyList';
import { HyperflexUcsmConfigPolicyListAllOf } from '../models/HyperflexUcsmConfigPolicyListAllOf';
import { HyperflexUcsmConfigPolicyRelationship } from '../models/HyperflexUcsmConfigPolicyRelationship';
import { HyperflexUcsmConfigPolicyResponse } from '../models/HyperflexUcsmConfigPolicyResponse';
import { HyperflexVcenterConfigPolicy } from '../models/HyperflexVcenterConfigPolicy';
import { HyperflexVcenterConfigPolicyAllOf } from '../models/HyperflexVcenterConfigPolicyAllOf';
import { HyperflexVcenterConfigPolicyList } from '../models/HyperflexVcenterConfigPolicyList';
import { HyperflexVcenterConfigPolicyListAllOf } from '../models/HyperflexVcenterConfigPolicyListAllOf';
import { HyperflexVcenterConfigPolicyRelationship } from '../models/HyperflexVcenterConfigPolicyRelationship';
import { HyperflexVcenterConfigPolicyResponse } from '../models/HyperflexVcenterConfigPolicyResponse';
import { HyperflexWwxnPrefixRange } from '../models/HyperflexWwxnPrefixRange';
import { HyperflexWwxnPrefixRangeAllOf } from '../models/HyperflexWwxnPrefixRangeAllOf';
import { I18nMessage } from '../models/I18nMessage';
import { I18nMessageAllOf } from '../models/I18nMessageAllOf';
import { I18nMessageParam } from '../models/I18nMessageParam';
import { I18nMessageParamAllOf } from '../models/I18nMessageParamAllOf';
import { IaasConnectorPack } from '../models/IaasConnectorPack';
import { IaasConnectorPackAllOf } from '../models/IaasConnectorPackAllOf';
import { IaasConnectorPackList } from '../models/IaasConnectorPackList';
import { IaasConnectorPackListAllOf } from '../models/IaasConnectorPackListAllOf';
import { IaasConnectorPackRelationship } from '../models/IaasConnectorPackRelationship';
import { IaasConnectorPackResponse } from '../models/IaasConnectorPackResponse';
import { IaasDeviceStatus } from '../models/IaasDeviceStatus';
import { IaasDeviceStatusAllOf } from '../models/IaasDeviceStatusAllOf';
import { IaasDeviceStatusList } from '../models/IaasDeviceStatusList';
import { IaasDeviceStatusListAllOf } from '../models/IaasDeviceStatusListAllOf';
import { IaasDeviceStatusRelationship } from '../models/IaasDeviceStatusRelationship';
import { IaasDeviceStatusResponse } from '../models/IaasDeviceStatusResponse';
import { IaasLicenseInfo } from '../models/IaasLicenseInfo';
import { IaasLicenseInfoAllOf } from '../models/IaasLicenseInfoAllOf';
import { IaasLicenseInfoList } from '../models/IaasLicenseInfoList';
import { IaasLicenseInfoListAllOf } from '../models/IaasLicenseInfoListAllOf';
import { IaasLicenseInfoRelationship } from '../models/IaasLicenseInfoRelationship';
import { IaasLicenseInfoResponse } from '../models/IaasLicenseInfoResponse';
import { IaasLicenseKeysInfo } from '../models/IaasLicenseKeysInfo';
import { IaasLicenseKeysInfoAllOf } from '../models/IaasLicenseKeysInfoAllOf';
import { IaasLicenseUtilizationInfo } from '../models/IaasLicenseUtilizationInfo';
import { IaasLicenseUtilizationInfoAllOf } from '../models/IaasLicenseUtilizationInfoAllOf';
import { IaasMostRunTasks } from '../models/IaasMostRunTasks';
import { IaasMostRunTasksAllOf } from '../models/IaasMostRunTasksAllOf';
import { IaasMostRunTasksList } from '../models/IaasMostRunTasksList';
import { IaasMostRunTasksListAllOf } from '../models/IaasMostRunTasksListAllOf';
import { IaasMostRunTasksRelationship } from '../models/IaasMostRunTasksRelationship';
import { IaasMostRunTasksResponse } from '../models/IaasMostRunTasksResponse';
import { IaasUcsdInfo } from '../models/IaasUcsdInfo';
import { IaasUcsdInfoAllOf } from '../models/IaasUcsdInfoAllOf';
import { IaasUcsdInfoList } from '../models/IaasUcsdInfoList';
import { IaasUcsdInfoListAllOf } from '../models/IaasUcsdInfoListAllOf';
import { IaasUcsdInfoRelationship } from '../models/IaasUcsdInfoRelationship';
import { IaasUcsdInfoResponse } from '../models/IaasUcsdInfoResponse';
import { IaasUcsdManagedInfra } from '../models/IaasUcsdManagedInfra';
import { IaasUcsdManagedInfraAllOf } from '../models/IaasUcsdManagedInfraAllOf';
import { IaasUcsdManagedInfraList } from '../models/IaasUcsdManagedInfraList';
import { IaasUcsdManagedInfraListAllOf } from '../models/IaasUcsdManagedInfraListAllOf';
import { IaasUcsdManagedInfraRelationship } from '../models/IaasUcsdManagedInfraRelationship';
import { IaasUcsdManagedInfraResponse } from '../models/IaasUcsdManagedInfraResponse';
import { IamAccount } from '../models/IamAccount';
import { IamAccountAllOf } from '../models/IamAccountAllOf';
import { IamAccountExperience } from '../models/IamAccountExperience';
import { IamAccountExperienceAllOf } from '../models/IamAccountExperienceAllOf';
import { IamAccountExperienceList } from '../models/IamAccountExperienceList';
import { IamAccountExperienceListAllOf } from '../models/IamAccountExperienceListAllOf';
import { IamAccountExperienceResponse } from '../models/IamAccountExperienceResponse';
import { IamAccountList } from '../models/IamAccountList';
import { IamAccountListAllOf } from '../models/IamAccountListAllOf';
import { IamAccountPermissions } from '../models/IamAccountPermissions';
import { IamAccountPermissionsAllOf } from '../models/IamAccountPermissionsAllOf';
import { IamAccountRelationship } from '../models/IamAccountRelationship';
import { IamAccountResponse } from '../models/IamAccountResponse';
import { IamApiKey } from '../models/IamApiKey';
import { IamApiKeyAllOf } from '../models/IamApiKeyAllOf';
import { IamApiKeyList } from '../models/IamApiKeyList';
import { IamApiKeyListAllOf } from '../models/IamApiKeyListAllOf';
import { IamApiKeyRelationship } from '../models/IamApiKeyRelationship';
import { IamApiKeyResponse } from '../models/IamApiKeyResponse';
import { IamAppRegistration } from '../models/IamAppRegistration';
import { IamAppRegistrationAllOf } from '../models/IamAppRegistrationAllOf';
import { IamAppRegistrationList } from '../models/IamAppRegistrationList';
import { IamAppRegistrationListAllOf } from '../models/IamAppRegistrationListAllOf';
import { IamAppRegistrationRelationship } from '../models/IamAppRegistrationRelationship';
import { IamAppRegistrationResponse } from '../models/IamAppRegistrationResponse';
import { IamCertificate } from '../models/IamCertificate';
import { IamCertificateAllOf } from '../models/IamCertificateAllOf';
import { IamCertificateList } from '../models/IamCertificateList';
import { IamCertificateListAllOf } from '../models/IamCertificateListAllOf';
import { IamCertificateRelationship } from '../models/IamCertificateRelationship';
import { IamCertificateRequest } from '../models/IamCertificateRequest';
import { IamCertificateRequestAllOf } from '../models/IamCertificateRequestAllOf';
import { IamCertificateRequestList } from '../models/IamCertificateRequestList';
import { IamCertificateRequestListAllOf } from '../models/IamCertificateRequestListAllOf';
import { IamCertificateRequestRelationship } from '../models/IamCertificateRequestRelationship';
import { IamCertificateRequestResponse } from '../models/IamCertificateRequestResponse';
import { IamCertificateResponse } from '../models/IamCertificateResponse';
import { IamClientMeta } from '../models/IamClientMeta';
import { IamClientMetaAllOf } from '../models/IamClientMetaAllOf';
import { IamDomainGroup } from '../models/IamDomainGroup';
import { IamDomainGroupAllOf } from '../models/IamDomainGroupAllOf';
import { IamDomainGroupList } from '../models/IamDomainGroupList';
import { IamDomainGroupListAllOf } from '../models/IamDomainGroupListAllOf';
import { IamDomainGroupRelationship } from '../models/IamDomainGroupRelationship';
import { IamDomainGroupResponse } from '../models/IamDomainGroupResponse';
import { IamEndPointPasswordProperties } from '../models/IamEndPointPasswordProperties';
import { IamEndPointPasswordPropertiesAllOf } from '../models/IamEndPointPasswordPropertiesAllOf';
import { IamEndPointPrivilege } from '../models/IamEndPointPrivilege';
import { IamEndPointPrivilegeAllOf } from '../models/IamEndPointPrivilegeAllOf';
import { IamEndPointPrivilegeList } from '../models/IamEndPointPrivilegeList';
import { IamEndPointPrivilegeListAllOf } from '../models/IamEndPointPrivilegeListAllOf';
import { IamEndPointPrivilegeRelationship } from '../models/IamEndPointPrivilegeRelationship';
import { IamEndPointPrivilegeResponse } from '../models/IamEndPointPrivilegeResponse';
import { IamEndPointRole } from '../models/IamEndPointRole';
import { IamEndPointRoleAllOf } from '../models/IamEndPointRoleAllOf';
import { IamEndPointRoleList } from '../models/IamEndPointRoleList';
import { IamEndPointRoleListAllOf } from '../models/IamEndPointRoleListAllOf';
import { IamEndPointRoleRelationship } from '../models/IamEndPointRoleRelationship';
import { IamEndPointRoleResponse } from '../models/IamEndPointRoleResponse';
import { IamEndPointUser } from '../models/IamEndPointUser';
import { IamEndPointUserAllOf } from '../models/IamEndPointUserAllOf';
import { IamEndPointUserList } from '../models/IamEndPointUserList';
import { IamEndPointUserListAllOf } from '../models/IamEndPointUserListAllOf';
import { IamEndPointUserPolicy } from '../models/IamEndPointUserPolicy';
import { IamEndPointUserPolicyAllOf } from '../models/IamEndPointUserPolicyAllOf';
import { IamEndPointUserPolicyList } from '../models/IamEndPointUserPolicyList';
import { IamEndPointUserPolicyListAllOf } from '../models/IamEndPointUserPolicyListAllOf';
import { IamEndPointUserPolicyRelationship } from '../models/IamEndPointUserPolicyRelationship';
import { IamEndPointUserPolicyResponse } from '../models/IamEndPointUserPolicyResponse';
import { IamEndPointUserRelationship } from '../models/IamEndPointUserRelationship';
import { IamEndPointUserResponse } from '../models/IamEndPointUserResponse';
import { IamEndPointUserRole } from '../models/IamEndPointUserRole';
import { IamEndPointUserRoleAllOf } from '../models/IamEndPointUserRoleAllOf';
import { IamEndPointUserRoleList } from '../models/IamEndPointUserRoleList';
import { IamEndPointUserRoleListAllOf } from '../models/IamEndPointUserRoleListAllOf';
import { IamEndPointUserRoleRelationship } from '../models/IamEndPointUserRoleRelationship';
import { IamEndPointUserRoleResponse } from '../models/IamEndPointUserRoleResponse';
import { IamFeatureDefinition } from '../models/IamFeatureDefinition';
import { IamFeatureDefinitionAllOf } from '../models/IamFeatureDefinitionAllOf';
import { IamGroupPermissionToRoles } from '../models/IamGroupPermissionToRoles';
import { IamGroupPermissionToRolesAllOf } from '../models/IamGroupPermissionToRolesAllOf';
import { IamIdp } from '../models/IamIdp';
import { IamIdpAllOf } from '../models/IamIdpAllOf';
import { IamIdpList } from '../models/IamIdpList';
import { IamIdpListAllOf } from '../models/IamIdpListAllOf';
import { IamIdpReference } from '../models/IamIdpReference';
import { IamIdpReferenceAllOf } from '../models/IamIdpReferenceAllOf';
import { IamIdpReferenceList } from '../models/IamIdpReferenceList';
import { IamIdpReferenceListAllOf } from '../models/IamIdpReferenceListAllOf';
import { IamIdpReferenceRelationship } from '../models/IamIdpReferenceRelationship';
import { IamIdpReferenceResponse } from '../models/IamIdpReferenceResponse';
import { IamIdpRelationship } from '../models/IamIdpRelationship';
import { IamIdpResponse } from '../models/IamIdpResponse';
import { IamLdapBaseProperties } from '../models/IamLdapBaseProperties';
import { IamLdapBasePropertiesAllOf } from '../models/IamLdapBasePropertiesAllOf';
import { IamLdapDnsParameters } from '../models/IamLdapDnsParameters';
import { IamLdapDnsParametersAllOf } from '../models/IamLdapDnsParametersAllOf';
import { IamLdapGroup } from '../models/IamLdapGroup';
import { IamLdapGroupAllOf } from '../models/IamLdapGroupAllOf';
import { IamLdapGroupList } from '../models/IamLdapGroupList';
import { IamLdapGroupListAllOf } from '../models/IamLdapGroupListAllOf';
import { IamLdapGroupRelationship } from '../models/IamLdapGroupRelationship';
import { IamLdapGroupResponse } from '../models/IamLdapGroupResponse';
import { IamLdapPolicy } from '../models/IamLdapPolicy';
import { IamLdapPolicyAllOf } from '../models/IamLdapPolicyAllOf';
import { IamLdapPolicyList } from '../models/IamLdapPolicyList';
import { IamLdapPolicyListAllOf } from '../models/IamLdapPolicyListAllOf';
import { IamLdapPolicyRelationship } from '../models/IamLdapPolicyRelationship';
import { IamLdapPolicyResponse } from '../models/IamLdapPolicyResponse';
import { IamLdapProvider } from '../models/IamLdapProvider';
import { IamLdapProviderAllOf } from '../models/IamLdapProviderAllOf';
import { IamLdapProviderList } from '../models/IamLdapProviderList';
import { IamLdapProviderListAllOf } from '../models/IamLdapProviderListAllOf';
import { IamLdapProviderRelationship } from '../models/IamLdapProviderRelationship';
import { IamLdapProviderResponse } from '../models/IamLdapProviderResponse';
import { IamLocalUserPassword } from '../models/IamLocalUserPassword';
import { IamLocalUserPasswordAllOf } from '../models/IamLocalUserPasswordAllOf';
import { IamLocalUserPasswordRelationship } from '../models/IamLocalUserPasswordRelationship';
import { IamOAuthToken } from '../models/IamOAuthToken';
import { IamOAuthTokenAllOf } from '../models/IamOAuthTokenAllOf';
import { IamOAuthTokenList } from '../models/IamOAuthTokenList';
import { IamOAuthTokenListAllOf } from '../models/IamOAuthTokenListAllOf';
import { IamOAuthTokenRelationship } from '../models/IamOAuthTokenRelationship';
import { IamOAuthTokenResponse } from '../models/IamOAuthTokenResponse';
import { IamPermission } from '../models/IamPermission';
import { IamPermissionAllOf } from '../models/IamPermissionAllOf';
import { IamPermissionList } from '../models/IamPermissionList';
import { IamPermissionListAllOf } from '../models/IamPermissionListAllOf';
import { IamPermissionReference } from '../models/IamPermissionReference';
import { IamPermissionReferenceAllOf } from '../models/IamPermissionReferenceAllOf';
import { IamPermissionRelationship } from '../models/IamPermissionRelationship';
import { IamPermissionResponse } from '../models/IamPermissionResponse';
import { IamPermissionToRoles } from '../models/IamPermissionToRoles';
import { IamPermissionToRolesAllOf } from '../models/IamPermissionToRolesAllOf';
import { IamPrivateKeySpec } from '../models/IamPrivateKeySpec';
import { IamPrivateKeySpecAllOf } from '../models/IamPrivateKeySpecAllOf';
import { IamPrivateKeySpecList } from '../models/IamPrivateKeySpecList';
import { IamPrivateKeySpecListAllOf } from '../models/IamPrivateKeySpecListAllOf';
import { IamPrivateKeySpecRelationship } from '../models/IamPrivateKeySpecRelationship';
import { IamPrivateKeySpecResponse } from '../models/IamPrivateKeySpecResponse';
import { IamPrivilege } from '../models/IamPrivilege';
import { IamPrivilegeAllOf } from '../models/IamPrivilegeAllOf';
import { IamPrivilegeList } from '../models/IamPrivilegeList';
import { IamPrivilegeListAllOf } from '../models/IamPrivilegeListAllOf';
import { IamPrivilegeRelationship } from '../models/IamPrivilegeRelationship';
import { IamPrivilegeResponse } from '../models/IamPrivilegeResponse';
import { IamPrivilegeSet } from '../models/IamPrivilegeSet';
import { IamPrivilegeSetAllOf } from '../models/IamPrivilegeSetAllOf';
import { IamPrivilegeSetList } from '../models/IamPrivilegeSetList';
import { IamPrivilegeSetListAllOf } from '../models/IamPrivilegeSetListAllOf';
import { IamPrivilegeSetRelationship } from '../models/IamPrivilegeSetRelationship';
import { IamPrivilegeSetResponse } from '../models/IamPrivilegeSetResponse';
import { IamQualifier } from '../models/IamQualifier';
import { IamQualifierAllOf } from '../models/IamQualifierAllOf';
import { IamQualifierList } from '../models/IamQualifierList';
import { IamQualifierListAllOf } from '../models/IamQualifierListAllOf';
import { IamQualifierRelationship } from '../models/IamQualifierRelationship';
import { IamQualifierResponse } from '../models/IamQualifierResponse';
import { IamResourceLimits } from '../models/IamResourceLimits';
import { IamResourceLimitsAllOf } from '../models/IamResourceLimitsAllOf';
import { IamResourceLimitsList } from '../models/IamResourceLimitsList';
import { IamResourceLimitsListAllOf } from '../models/IamResourceLimitsListAllOf';
import { IamResourceLimitsRelationship } from '../models/IamResourceLimitsRelationship';
import { IamResourceLimitsResponse } from '../models/IamResourceLimitsResponse';
import { IamResourcePermission } from '../models/IamResourcePermission';
import { IamResourcePermissionAllOf } from '../models/IamResourcePermissionAllOf';
import { IamResourcePermissionList } from '../models/IamResourcePermissionList';
import { IamResourcePermissionListAllOf } from '../models/IamResourcePermissionListAllOf';
import { IamResourcePermissionRelationship } from '../models/IamResourcePermissionRelationship';
import { IamResourcePermissionResponse } from '../models/IamResourcePermissionResponse';
import { IamResourceRoles } from '../models/IamResourceRoles';
import { IamResourceRolesAllOf } from '../models/IamResourceRolesAllOf';
import { IamResourceRolesList } from '../models/IamResourceRolesList';
import { IamResourceRolesListAllOf } from '../models/IamResourceRolesListAllOf';
import { IamResourceRolesRelationship } from '../models/IamResourceRolesRelationship';
import { IamResourceRolesResponse } from '../models/IamResourceRolesResponse';
import { IamRole } from '../models/IamRole';
import { IamRoleAllOf } from '../models/IamRoleAllOf';
import { IamRoleList } from '../models/IamRoleList';
import { IamRoleListAllOf } from '../models/IamRoleListAllOf';
import { IamRoleRelationship } from '../models/IamRoleRelationship';
import { IamRoleResponse } from '../models/IamRoleResponse';
import { IamSecurityHolder } from '../models/IamSecurityHolder';
import { IamSecurityHolderAllOf } from '../models/IamSecurityHolderAllOf';
import { IamSecurityHolderList } from '../models/IamSecurityHolderList';
import { IamSecurityHolderListAllOf } from '../models/IamSecurityHolderListAllOf';
import { IamSecurityHolderRelationship } from '../models/IamSecurityHolderRelationship';
import { IamSecurityHolderResponse } from '../models/IamSecurityHolderResponse';
import { IamServiceProvider } from '../models/IamServiceProvider';
import { IamServiceProviderAllOf } from '../models/IamServiceProviderAllOf';
import { IamServiceProviderList } from '../models/IamServiceProviderList';
import { IamServiceProviderListAllOf } from '../models/IamServiceProviderListAllOf';
import { IamServiceProviderRelationship } from '../models/IamServiceProviderRelationship';
import { IamServiceProviderResponse } from '../models/IamServiceProviderResponse';
import { IamSession } from '../models/IamSession';
import { IamSessionAllOf } from '../models/IamSessionAllOf';
import { IamSessionLimits } from '../models/IamSessionLimits';
import { IamSessionLimitsAllOf } from '../models/IamSessionLimitsAllOf';
import { IamSessionLimitsList } from '../models/IamSessionLimitsList';
import { IamSessionLimitsListAllOf } from '../models/IamSessionLimitsListAllOf';
import { IamSessionLimitsRelationship } from '../models/IamSessionLimitsRelationship';
import { IamSessionLimitsResponse } from '../models/IamSessionLimitsResponse';
import { IamSessionList } from '../models/IamSessionList';
import { IamSessionListAllOf } from '../models/IamSessionListAllOf';
import { IamSessionRelationship } from '../models/IamSessionRelationship';
import { IamSessionResponse } from '../models/IamSessionResponse';
import { IamSsoSessionAttributes } from '../models/IamSsoSessionAttributes';
import { IamSsoSessionAttributesAllOf } from '../models/IamSsoSessionAttributesAllOf';
import { IamSystem } from '../models/IamSystem';
import { IamSystemAllOf } from '../models/IamSystemAllOf';
import { IamSystemList } from '../models/IamSystemList';
import { IamSystemListAllOf } from '../models/IamSystemListAllOf';
import { IamSystemRelationship } from '../models/IamSystemRelationship';
import { IamSystemResponse } from '../models/IamSystemResponse';
import { IamTrustPoint } from '../models/IamTrustPoint';
import { IamTrustPointAllOf } from '../models/IamTrustPointAllOf';
import { IamTrustPointList } from '../models/IamTrustPointList';
import { IamTrustPointListAllOf } from '../models/IamTrustPointListAllOf';
import { IamTrustPointResponse } from '../models/IamTrustPointResponse';
import { IamUser } from '../models/IamUser';
import { IamUserAllOf } from '../models/IamUserAllOf';
import { IamUserGroup } from '../models/IamUserGroup';
import { IamUserGroupAllOf } from '../models/IamUserGroupAllOf';
import { IamUserGroupList } from '../models/IamUserGroupList';
import { IamUserGroupListAllOf } from '../models/IamUserGroupListAllOf';
import { IamUserGroupRelationship } from '../models/IamUserGroupRelationship';
import { IamUserGroupResponse } from '../models/IamUserGroupResponse';
import { IamUserList } from '../models/IamUserList';
import { IamUserListAllOf } from '../models/IamUserListAllOf';
import { IamUserPreference } from '../models/IamUserPreference';
import { IamUserPreferenceAllOf } from '../models/IamUserPreferenceAllOf';
import { IamUserPreferenceList } from '../models/IamUserPreferenceList';
import { IamUserPreferenceListAllOf } from '../models/IamUserPreferenceListAllOf';
import { IamUserPreferenceRelationship } from '../models/IamUserPreferenceRelationship';
import { IamUserPreferenceResponse } from '../models/IamUserPreferenceResponse';
import { IamUserRelationship } from '../models/IamUserRelationship';
import { IamUserResponse } from '../models/IamUserResponse';
import { InfraHardwareInfo } from '../models/InfraHardwareInfo';
import { InfraHardwareInfoAllOf } from '../models/InfraHardwareInfoAllOf';
import { InventoryBase } from '../models/InventoryBase';
import { InventoryBaseAllOf } from '../models/InventoryBaseAllOf';
import { InventoryBaseRelationship } from '../models/InventoryBaseRelationship';
import { InventoryDeviceInfo } from '../models/InventoryDeviceInfo';
import { InventoryDeviceInfoList } from '../models/InventoryDeviceInfoList';
import { InventoryDeviceInfoListAllOf } from '../models/InventoryDeviceInfoListAllOf';
import { InventoryDeviceInfoResponse } from '../models/InventoryDeviceInfoResponse';
import { InventoryDnMoBinding } from '../models/InventoryDnMoBinding';
import { InventoryDnMoBindingAllOf } from '../models/InventoryDnMoBindingAllOf';
import { InventoryDnMoBindingList } from '../models/InventoryDnMoBindingList';
import { InventoryDnMoBindingListAllOf } from '../models/InventoryDnMoBindingListAllOf';
import { InventoryDnMoBindingResponse } from '../models/InventoryDnMoBindingResponse';
import { InventoryGenericInventory } from '../models/InventoryGenericInventory';
import { InventoryGenericInventoryAllOf } from '../models/InventoryGenericInventoryAllOf';
import { InventoryGenericInventoryHolder } from '../models/InventoryGenericInventoryHolder';
import { InventoryGenericInventoryHolderAllOf } from '../models/InventoryGenericInventoryHolderAllOf';
import { InventoryGenericInventoryHolderList } from '../models/InventoryGenericInventoryHolderList';
import { InventoryGenericInventoryHolderListAllOf } from '../models/InventoryGenericInventoryHolderListAllOf';
import { InventoryGenericInventoryHolderRelationship } from '../models/InventoryGenericInventoryHolderRelationship';
import { InventoryGenericInventoryHolderResponse } from '../models/InventoryGenericInventoryHolderResponse';
import { InventoryGenericInventoryList } from '../models/InventoryGenericInventoryList';
import { InventoryGenericInventoryListAllOf } from '../models/InventoryGenericInventoryListAllOf';
import { InventoryGenericInventoryRelationship } from '../models/InventoryGenericInventoryRelationship';
import { InventoryGenericInventoryResponse } from '../models/InventoryGenericInventoryResponse';
import { InventoryInventoryMo } from '../models/InventoryInventoryMo';
import { InventoryInventoryMoAllOf } from '../models/InventoryInventoryMoAllOf';
import { InventoryRequest } from '../models/InventoryRequest';
import { InventoryRequestAllOf } from '../models/InventoryRequestAllOf';
import { IpmioverlanPolicy } from '../models/IpmioverlanPolicy';
import { IpmioverlanPolicyAllOf } from '../models/IpmioverlanPolicyAllOf';
import { IpmioverlanPolicyList } from '../models/IpmioverlanPolicyList';
import { IpmioverlanPolicyListAllOf } from '../models/IpmioverlanPolicyListAllOf';
import { IpmioverlanPolicyResponse } from '../models/IpmioverlanPolicyResponse';
import { KvmKvmSession } from '../models/KvmKvmSession';
import { KvmKvmSessionAllOf } from '../models/KvmKvmSessionAllOf';
import { KvmKvmSessionList } from '../models/KvmKvmSessionList';
import { KvmKvmSessionListAllOf } from '../models/KvmKvmSessionListAllOf';
import { KvmKvmSessionResponse } from '../models/KvmKvmSessionResponse';
import { KvmPolicy } from '../models/KvmPolicy';
import { KvmPolicyAllOf } from '../models/KvmPolicyAllOf';
import { KvmPolicyList } from '../models/KvmPolicyList';
import { KvmPolicyListAllOf } from '../models/KvmPolicyListAllOf';
import { KvmPolicyResponse } from '../models/KvmPolicyResponse';
import { LicenseAccountLicenseData } from '../models/LicenseAccountLicenseData';
import { LicenseAccountLicenseDataAllOf } from '../models/LicenseAccountLicenseDataAllOf';
import { LicenseAccountLicenseDataList } from '../models/LicenseAccountLicenseDataList';
import { LicenseAccountLicenseDataListAllOf } from '../models/LicenseAccountLicenseDataListAllOf';
import { LicenseAccountLicenseDataRelationship } from '../models/LicenseAccountLicenseDataRelationship';
import { LicenseAccountLicenseDataResponse } from '../models/LicenseAccountLicenseDataResponse';
import { LicenseCustomerOp } from '../models/LicenseCustomerOp';
import { LicenseCustomerOpAllOf } from '../models/LicenseCustomerOpAllOf';
import { LicenseCustomerOpList } from '../models/LicenseCustomerOpList';
import { LicenseCustomerOpListAllOf } from '../models/LicenseCustomerOpListAllOf';
import { LicenseCustomerOpRelationship } from '../models/LicenseCustomerOpRelationship';
import { LicenseCustomerOpResponse } from '../models/LicenseCustomerOpResponse';
import { LicenseLicenseInfo } from '../models/LicenseLicenseInfo';
import { LicenseLicenseInfoAllOf } from '../models/LicenseLicenseInfoAllOf';
import { LicenseLicenseInfoList } from '../models/LicenseLicenseInfoList';
import { LicenseLicenseInfoListAllOf } from '../models/LicenseLicenseInfoListAllOf';
import { LicenseLicenseInfoRelationship } from '../models/LicenseLicenseInfoRelationship';
import { LicenseLicenseInfoResponse } from '../models/LicenseLicenseInfoResponse';
import { LicenseSmartlicenseToken } from '../models/LicenseSmartlicenseToken';
import { LicenseSmartlicenseTokenAllOf } from '../models/LicenseSmartlicenseTokenAllOf';
import { LicenseSmartlicenseTokenList } from '../models/LicenseSmartlicenseTokenList';
import { LicenseSmartlicenseTokenListAllOf } from '../models/LicenseSmartlicenseTokenListAllOf';
import { LicenseSmartlicenseTokenRelationship } from '../models/LicenseSmartlicenseTokenRelationship';
import { LicenseSmartlicenseTokenResponse } from '../models/LicenseSmartlicenseTokenResponse';
import { LsServiceProfile } from '../models/LsServiceProfile';
import { LsServiceProfileAllOf } from '../models/LsServiceProfileAllOf';
import { LsServiceProfileList } from '../models/LsServiceProfileList';
import { LsServiceProfileListAllOf } from '../models/LsServiceProfileListAllOf';
import { LsServiceProfileResponse } from '../models/LsServiceProfileResponse';
import { ManagementController } from '../models/ManagementController';
import { ManagementControllerAllOf } from '../models/ManagementControllerAllOf';
import { ManagementControllerList } from '../models/ManagementControllerList';
import { ManagementControllerListAllOf } from '../models/ManagementControllerListAllOf';
import { ManagementControllerRelationship } from '../models/ManagementControllerRelationship';
import { ManagementControllerResponse } from '../models/ManagementControllerResponse';
import { ManagementEntity } from '../models/ManagementEntity';
import { ManagementEntityAllOf } from '../models/ManagementEntityAllOf';
import { ManagementEntityList } from '../models/ManagementEntityList';
import { ManagementEntityListAllOf } from '../models/ManagementEntityListAllOf';
import { ManagementEntityRelationship } from '../models/ManagementEntityRelationship';
import { ManagementEntityResponse } from '../models/ManagementEntityResponse';
import { ManagementInterface } from '../models/ManagementInterface';
import { ManagementInterfaceAllOf } from '../models/ManagementInterfaceAllOf';
import { ManagementInterfaceList } from '../models/ManagementInterfaceList';
import { ManagementInterfaceListAllOf } from '../models/ManagementInterfaceListAllOf';
import { ManagementInterfaceRelationship } from '../models/ManagementInterfaceRelationship';
import { ManagementInterfaceResponse } from '../models/ManagementInterfaceResponse';
import { MemoryAbstractUnit } from '../models/MemoryAbstractUnit';
import { MemoryAbstractUnitAllOf } from '../models/MemoryAbstractUnitAllOf';
import { MemoryArray } from '../models/MemoryArray';
import { MemoryArrayAllOf } from '../models/MemoryArrayAllOf';
import { MemoryArrayList } from '../models/MemoryArrayList';
import { MemoryArrayListAllOf } from '../models/MemoryArrayListAllOf';
import { MemoryArrayRelationship } from '../models/MemoryArrayRelationship';
import { MemoryArrayResponse } from '../models/MemoryArrayResponse';
import { MemoryPersistentMemoryConfigResult } from '../models/MemoryPersistentMemoryConfigResult';
import { MemoryPersistentMemoryConfigResultAllOf } from '../models/MemoryPersistentMemoryConfigResultAllOf';
import { MemoryPersistentMemoryConfigResultList } from '../models/MemoryPersistentMemoryConfigResultList';
import { MemoryPersistentMemoryConfigResultListAllOf } from '../models/MemoryPersistentMemoryConfigResultListAllOf';
import { MemoryPersistentMemoryConfigResultRelationship } from '../models/MemoryPersistentMemoryConfigResultRelationship';
import { MemoryPersistentMemoryConfigResultResponse } from '../models/MemoryPersistentMemoryConfigResultResponse';
import { MemoryPersistentMemoryConfiguration } from '../models/MemoryPersistentMemoryConfiguration';
import { MemoryPersistentMemoryConfigurationAllOf } from '../models/MemoryPersistentMemoryConfigurationAllOf';
import { MemoryPersistentMemoryConfigurationList } from '../models/MemoryPersistentMemoryConfigurationList';
import { MemoryPersistentMemoryConfigurationListAllOf } from '../models/MemoryPersistentMemoryConfigurationListAllOf';
import { MemoryPersistentMemoryConfigurationRelationship } from '../models/MemoryPersistentMemoryConfigurationRelationship';
import { MemoryPersistentMemoryConfigurationResponse } from '../models/MemoryPersistentMemoryConfigurationResponse';
import { MemoryPersistentMemoryGoal } from '../models/MemoryPersistentMemoryGoal';
import { MemoryPersistentMemoryGoalAllOf } from '../models/MemoryPersistentMemoryGoalAllOf';
import { MemoryPersistentMemoryLocalSecurity } from '../models/MemoryPersistentMemoryLocalSecurity';
import { MemoryPersistentMemoryLocalSecurityAllOf } from '../models/MemoryPersistentMemoryLocalSecurityAllOf';
import { MemoryPersistentMemoryLogicalNamespace } from '../models/MemoryPersistentMemoryLogicalNamespace';
import { MemoryPersistentMemoryLogicalNamespaceAllOf } from '../models/MemoryPersistentMemoryLogicalNamespaceAllOf';
import { MemoryPersistentMemoryNamespace } from '../models/MemoryPersistentMemoryNamespace';
import { MemoryPersistentMemoryNamespaceAllOf } from '../models/MemoryPersistentMemoryNamespaceAllOf';
import { MemoryPersistentMemoryNamespaceConfigResult } from '../models/MemoryPersistentMemoryNamespaceConfigResult';
import { MemoryPersistentMemoryNamespaceConfigResultAllOf } from '../models/MemoryPersistentMemoryNamespaceConfigResultAllOf';
import { MemoryPersistentMemoryNamespaceConfigResultList } from '../models/MemoryPersistentMemoryNamespaceConfigResultList';
import { MemoryPersistentMemoryNamespaceConfigResultListAllOf } from '../models/MemoryPersistentMemoryNamespaceConfigResultListAllOf';
import { MemoryPersistentMemoryNamespaceConfigResultRelationship } from '../models/MemoryPersistentMemoryNamespaceConfigResultRelationship';
import { MemoryPersistentMemoryNamespaceConfigResultResponse } from '../models/MemoryPersistentMemoryNamespaceConfigResultResponse';
import { MemoryPersistentMemoryNamespaceList } from '../models/MemoryPersistentMemoryNamespaceList';
import { MemoryPersistentMemoryNamespaceListAllOf } from '../models/MemoryPersistentMemoryNamespaceListAllOf';
import { MemoryPersistentMemoryNamespaceRelationship } from '../models/MemoryPersistentMemoryNamespaceRelationship';
import { MemoryPersistentMemoryNamespaceResponse } from '../models/MemoryPersistentMemoryNamespaceResponse';
import { MemoryPersistentMemoryPolicy } from '../models/MemoryPersistentMemoryPolicy';
import { MemoryPersistentMemoryPolicyAllOf } from '../models/MemoryPersistentMemoryPolicyAllOf';
import { MemoryPersistentMemoryPolicyList } from '../models/MemoryPersistentMemoryPolicyList';
import { MemoryPersistentMemoryPolicyListAllOf } from '../models/MemoryPersistentMemoryPolicyListAllOf';
import { MemoryPersistentMemoryPolicyResponse } from '../models/MemoryPersistentMemoryPolicyResponse';
import { MemoryPersistentMemoryRegion } from '../models/MemoryPersistentMemoryRegion';
import { MemoryPersistentMemoryRegionAllOf } from '../models/MemoryPersistentMemoryRegionAllOf';
import { MemoryPersistentMemoryRegionList } from '../models/MemoryPersistentMemoryRegionList';
import { MemoryPersistentMemoryRegionListAllOf } from '../models/MemoryPersistentMemoryRegionListAllOf';
import { MemoryPersistentMemoryRegionRelationship } from '../models/MemoryPersistentMemoryRegionRelationship';
import { MemoryPersistentMemoryRegionResponse } from '../models/MemoryPersistentMemoryRegionResponse';
import { MemoryPersistentMemoryUnit } from '../models/MemoryPersistentMemoryUnit';
import { MemoryPersistentMemoryUnitAllOf } from '../models/MemoryPersistentMemoryUnitAllOf';
import { MemoryPersistentMemoryUnitList } from '../models/MemoryPersistentMemoryUnitList';
import { MemoryPersistentMemoryUnitListAllOf } from '../models/MemoryPersistentMemoryUnitListAllOf';
import { MemoryPersistentMemoryUnitRelationship } from '../models/MemoryPersistentMemoryUnitRelationship';
import { MemoryPersistentMemoryUnitResponse } from '../models/MemoryPersistentMemoryUnitResponse';
import { MemoryUnit } from '../models/MemoryUnit';
import { MemoryUnitAllOf } from '../models/MemoryUnitAllOf';
import { MemoryUnitList } from '../models/MemoryUnitList';
import { MemoryUnitListAllOf } from '../models/MemoryUnitListAllOf';
import { MemoryUnitRelationship } from '../models/MemoryUnitRelationship';
import { MemoryUnitResponse } from '../models/MemoryUnitResponse';
import { MetaAccessPrivilege } from '../models/MetaAccessPrivilege';
import { MetaAccessPrivilegeAllOf } from '../models/MetaAccessPrivilegeAllOf';
import { MetaDefinition } from '../models/MetaDefinition';
import { MetaDefinitionAllOf } from '../models/MetaDefinitionAllOf';
import { MetaDefinitionList } from '../models/MetaDefinitionList';
import { MetaDefinitionListAllOf } from '../models/MetaDefinitionListAllOf';
import { MetaDefinitionResponse } from '../models/MetaDefinitionResponse';
import { MetaPropDefinition } from '../models/MetaPropDefinition';
import { MetaPropDefinitionAllOf } from '../models/MetaPropDefinitionAllOf';
import { MetaRelationshipDefinition } from '../models/MetaRelationshipDefinition';
import { MetaRelationshipDefinitionAllOf } from '../models/MetaRelationshipDefinitionAllOf';
import { MoBaseComplexType } from '../models/MoBaseComplexType';
import { MoBaseMo } from '../models/MoBaseMo';
import { MoBaseMoRelationship } from '../models/MoBaseMoRelationship';
import { MoBaseResponse } from '../models/MoBaseResponse';
import { MoDocumentCount } from '../models/MoDocumentCount';
import { MoDocumentCountAllOf } from '../models/MoDocumentCountAllOf';
import { MoMoRef } from '../models/MoMoRef';
import { MoMoRefAllOf } from '../models/MoMoRefAllOf';
import { MoTag } from '../models/MoTag';
import { MoTagKeySummary } from '../models/MoTagKeySummary';
import { MoVersionContext } from '../models/MoVersionContext';
import { MoVersionContextAllOf } from '../models/MoVersionContextAllOf';
import { ModelError } from '../models/ModelError';
import { NetworkElement } from '../models/NetworkElement';
import { NetworkElementAllOf } from '../models/NetworkElementAllOf';
import { NetworkElementList } from '../models/NetworkElementList';
import { NetworkElementListAllOf } from '../models/NetworkElementListAllOf';
import { NetworkElementRelationship } from '../models/NetworkElementRelationship';
import { NetworkElementResponse } from '../models/NetworkElementResponse';
import { NetworkElementSummary } from '../models/NetworkElementSummary';
import { NetworkElementSummaryAllOf } from '../models/NetworkElementSummaryAllOf';
import { NetworkElementSummaryList } from '../models/NetworkElementSummaryList';
import { NetworkElementSummaryListAllOf } from '../models/NetworkElementSummaryListAllOf';
import { NetworkElementSummaryResponse } from '../models/NetworkElementSummaryResponse';
import { NetworkconfigPolicy } from '../models/NetworkconfigPolicy';
import { NetworkconfigPolicyAllOf } from '../models/NetworkconfigPolicyAllOf';
import { NetworkconfigPolicyList } from '../models/NetworkconfigPolicyList';
import { NetworkconfigPolicyListAllOf } from '../models/NetworkconfigPolicyListAllOf';
import { NetworkconfigPolicyResponse } from '../models/NetworkconfigPolicyResponse';
import { NiaapiApicCcoPost } from '../models/NiaapiApicCcoPost';
import { NiaapiApicCcoPostList } from '../models/NiaapiApicCcoPostList';
import { NiaapiApicCcoPostListAllOf } from '../models/NiaapiApicCcoPostListAllOf';
import { NiaapiApicCcoPostResponse } from '../models/NiaapiApicCcoPostResponse';
import { NiaapiApicFieldNotice } from '../models/NiaapiApicFieldNotice';
import { NiaapiApicFieldNoticeList } from '../models/NiaapiApicFieldNoticeList';
import { NiaapiApicFieldNoticeListAllOf } from '../models/NiaapiApicFieldNoticeListAllOf';
import { NiaapiApicFieldNoticeResponse } from '../models/NiaapiApicFieldNoticeResponse';
import { NiaapiApicHweol } from '../models/NiaapiApicHweol';
import { NiaapiApicHweolList } from '../models/NiaapiApicHweolList';
import { NiaapiApicHweolListAllOf } from '../models/NiaapiApicHweolListAllOf';
import { NiaapiApicHweolResponse } from '../models/NiaapiApicHweolResponse';
import { NiaapiApicLatestMaintainedRelease } from '../models/NiaapiApicLatestMaintainedRelease';
import { NiaapiApicLatestMaintainedReleaseList } from '../models/NiaapiApicLatestMaintainedReleaseList';
import { NiaapiApicLatestMaintainedReleaseListAllOf } from '../models/NiaapiApicLatestMaintainedReleaseListAllOf';
import { NiaapiApicLatestMaintainedReleaseResponse } from '../models/NiaapiApicLatestMaintainedReleaseResponse';
import { NiaapiApicReleaseRecommend } from '../models/NiaapiApicReleaseRecommend';
import { NiaapiApicReleaseRecommendList } from '../models/NiaapiApicReleaseRecommendList';
import { NiaapiApicReleaseRecommendListAllOf } from '../models/NiaapiApicReleaseRecommendListAllOf';
import { NiaapiApicReleaseRecommendResponse } from '../models/NiaapiApicReleaseRecommendResponse';
import { NiaapiApicSweol } from '../models/NiaapiApicSweol';
import { NiaapiApicSweolList } from '../models/NiaapiApicSweolList';
import { NiaapiApicSweolListAllOf } from '../models/NiaapiApicSweolListAllOf';
import { NiaapiApicSweolResponse } from '../models/NiaapiApicSweolResponse';
import { NiaapiDcnmCcoPost } from '../models/NiaapiDcnmCcoPost';
import { NiaapiDcnmCcoPostList } from '../models/NiaapiDcnmCcoPostList';
import { NiaapiDcnmCcoPostListAllOf } from '../models/NiaapiDcnmCcoPostListAllOf';
import { NiaapiDcnmCcoPostResponse } from '../models/NiaapiDcnmCcoPostResponse';
import { NiaapiDcnmFieldNotice } from '../models/NiaapiDcnmFieldNotice';
import { NiaapiDcnmFieldNoticeList } from '../models/NiaapiDcnmFieldNoticeList';
import { NiaapiDcnmFieldNoticeListAllOf } from '../models/NiaapiDcnmFieldNoticeListAllOf';
import { NiaapiDcnmFieldNoticeResponse } from '../models/NiaapiDcnmFieldNoticeResponse';
import { NiaapiDcnmHweol } from '../models/NiaapiDcnmHweol';
import { NiaapiDcnmHweolList } from '../models/NiaapiDcnmHweolList';
import { NiaapiDcnmHweolListAllOf } from '../models/NiaapiDcnmHweolListAllOf';
import { NiaapiDcnmHweolResponse } from '../models/NiaapiDcnmHweolResponse';
import { NiaapiDcnmLatestMaintainedRelease } from '../models/NiaapiDcnmLatestMaintainedRelease';
import { NiaapiDcnmLatestMaintainedReleaseList } from '../models/NiaapiDcnmLatestMaintainedReleaseList';
import { NiaapiDcnmLatestMaintainedReleaseListAllOf } from '../models/NiaapiDcnmLatestMaintainedReleaseListAllOf';
import { NiaapiDcnmLatestMaintainedReleaseResponse } from '../models/NiaapiDcnmLatestMaintainedReleaseResponse';
import { NiaapiDcnmReleaseRecommend } from '../models/NiaapiDcnmReleaseRecommend';
import { NiaapiDcnmReleaseRecommendList } from '../models/NiaapiDcnmReleaseRecommendList';
import { NiaapiDcnmReleaseRecommendListAllOf } from '../models/NiaapiDcnmReleaseRecommendListAllOf';
import { NiaapiDcnmReleaseRecommendResponse } from '../models/NiaapiDcnmReleaseRecommendResponse';
import { NiaapiDcnmSweol } from '../models/NiaapiDcnmSweol';
import { NiaapiDcnmSweolList } from '../models/NiaapiDcnmSweolList';
import { NiaapiDcnmSweolListAllOf } from '../models/NiaapiDcnmSweolListAllOf';
import { NiaapiDcnmSweolResponse } from '../models/NiaapiDcnmSweolResponse';
import { NiaapiDetail } from '../models/NiaapiDetail';
import { NiaapiDetailAllOf } from '../models/NiaapiDetailAllOf';
import { NiaapiFieldNotice } from '../models/NiaapiFieldNotice';
import { NiaapiFieldNoticeAllOf } from '../models/NiaapiFieldNoticeAllOf';
import { NiaapiFileDownloader } from '../models/NiaapiFileDownloader';
import { NiaapiFileDownloaderAllOf } from '../models/NiaapiFileDownloaderAllOf';
import { NiaapiFileDownloaderList } from '../models/NiaapiFileDownloaderList';
import { NiaapiFileDownloaderListAllOf } from '../models/NiaapiFileDownloaderListAllOf';
import { NiaapiFileDownloaderResponse } from '../models/NiaapiFileDownloaderResponse';
import { NiaapiHardwareEol } from '../models/NiaapiHardwareEol';
import { NiaapiHardwareEolAllOf } from '../models/NiaapiHardwareEolAllOf';
import { NiaapiMaintainedRelease } from '../models/NiaapiMaintainedRelease';
import { NiaapiMaintainedReleaseAllOf } from '../models/NiaapiMaintainedReleaseAllOf';
import { NiaapiNewReleaseDetail } from '../models/NiaapiNewReleaseDetail';
import { NiaapiNewReleaseDetailAllOf } from '../models/NiaapiNewReleaseDetailAllOf';
import { NiaapiNewReleasePost } from '../models/NiaapiNewReleasePost';
import { NiaapiNewReleasePostAllOf } from '../models/NiaapiNewReleasePostAllOf';
import { NiaapiNiaMetadata } from '../models/NiaapiNiaMetadata';
import { NiaapiNiaMetadataAllOf } from '../models/NiaapiNiaMetadataAllOf';
import { NiaapiNiaMetadataList } from '../models/NiaapiNiaMetadataList';
import { NiaapiNiaMetadataListAllOf } from '../models/NiaapiNiaMetadataListAllOf';
import { NiaapiNiaMetadataResponse } from '../models/NiaapiNiaMetadataResponse';
import { NiaapiReleaseRecommend } from '../models/NiaapiReleaseRecommend';
import { NiaapiReleaseRecommendAllOf } from '../models/NiaapiReleaseRecommendAllOf';
import { NiaapiRevisionInfo } from '../models/NiaapiRevisionInfo';
import { NiaapiRevisionInfoAllOf } from '../models/NiaapiRevisionInfoAllOf';
import { NiaapiSoftwareEol } from '../models/NiaapiSoftwareEol';
import { NiaapiSoftwareEolAllOf } from '../models/NiaapiSoftwareEolAllOf';
import { NiaapiSoftwareRegex } from '../models/NiaapiSoftwareRegex';
import { NiaapiSoftwareRegexAllOf } from '../models/NiaapiSoftwareRegexAllOf';
import { NiaapiVersionRegex } from '../models/NiaapiVersionRegex';
import { NiaapiVersionRegexAllOf } from '../models/NiaapiVersionRegexAllOf';
import { NiaapiVersionRegexList } from '../models/NiaapiVersionRegexList';
import { NiaapiVersionRegexListAllOf } from '../models/NiaapiVersionRegexListAllOf';
import { NiaapiVersionRegexPlatform } from '../models/NiaapiVersionRegexPlatform';
import { NiaapiVersionRegexPlatformAllOf } from '../models/NiaapiVersionRegexPlatformAllOf';
import { NiaapiVersionRegexResponse } from '../models/NiaapiVersionRegexResponse';
import { NiatelemetryDiskinfo } from '../models/NiatelemetryDiskinfo';
import { NiatelemetryDiskinfoAllOf } from '../models/NiatelemetryDiskinfoAllOf';
import { NiatelemetryNiaFeatureUsage } from '../models/NiatelemetryNiaFeatureUsage';
import { NiatelemetryNiaFeatureUsageAllOf } from '../models/NiatelemetryNiaFeatureUsageAllOf';
import { NiatelemetryNiaFeatureUsageList } from '../models/NiatelemetryNiaFeatureUsageList';
import { NiatelemetryNiaFeatureUsageListAllOf } from '../models/NiatelemetryNiaFeatureUsageListAllOf';
import { NiatelemetryNiaFeatureUsageResponse } from '../models/NiatelemetryNiaFeatureUsageResponse';
import { NiatelemetryNiaInventory } from '../models/NiatelemetryNiaInventory';
import { NiatelemetryNiaInventoryAllOf } from '../models/NiatelemetryNiaInventoryAllOf';
import { NiatelemetryNiaInventoryList } from '../models/NiatelemetryNiaInventoryList';
import { NiatelemetryNiaInventoryListAllOf } from '../models/NiatelemetryNiaInventoryListAllOf';
import { NiatelemetryNiaInventoryRelationship } from '../models/NiatelemetryNiaInventoryRelationship';
import { NiatelemetryNiaInventoryResponse } from '../models/NiatelemetryNiaInventoryResponse';
import { NiatelemetryNiaLicenseState } from '../models/NiatelemetryNiaLicenseState';
import { NiatelemetryNiaLicenseStateAllOf } from '../models/NiatelemetryNiaLicenseStateAllOf';
import { NiatelemetryNiaLicenseStateList } from '../models/NiatelemetryNiaLicenseStateList';
import { NiatelemetryNiaLicenseStateListAllOf } from '../models/NiatelemetryNiaLicenseStateListAllOf';
import { NiatelemetryNiaLicenseStateRelationship } from '../models/NiatelemetryNiaLicenseStateRelationship';
import { NiatelemetryNiaLicenseStateResponse } from '../models/NiatelemetryNiaLicenseStateResponse';
import { NtpPolicy } from '../models/NtpPolicy';
import { NtpPolicyAllOf } from '../models/NtpPolicyAllOf';
import { NtpPolicyList } from '../models/NtpPolicyList';
import { NtpPolicyListAllOf } from '../models/NtpPolicyListAllOf';
import { NtpPolicyResponse } from '../models/NtpPolicyResponse';
import { OnpremImagePackage } from '../models/OnpremImagePackage';
import { OnpremImagePackageAllOf } from '../models/OnpremImagePackageAllOf';
import { OnpremSchedule } from '../models/OnpremSchedule';
import { OnpremScheduleAllOf } from '../models/OnpremScheduleAllOf';
import { OnpremUpgradeNote } from '../models/OnpremUpgradeNote';
import { OnpremUpgradeNoteAllOf } from '../models/OnpremUpgradeNoteAllOf';
import { OnpremUpgradePhase } from '../models/OnpremUpgradePhase';
import { OnpremUpgradePhaseAllOf } from '../models/OnpremUpgradePhaseAllOf';
import { OrganizationOrganization } from '../models/OrganizationOrganization';
import { OrganizationOrganizationAllOf } from '../models/OrganizationOrganizationAllOf';
import { OrganizationOrganizationList } from '../models/OrganizationOrganizationList';
import { OrganizationOrganizationListAllOf } from '../models/OrganizationOrganizationListAllOf';
import { OrganizationOrganizationRelationship } from '../models/OrganizationOrganizationRelationship';
import { OrganizationOrganizationResponse } from '../models/OrganizationOrganizationResponse';
import { OsAnswers } from '../models/OsAnswers';
import { OsAnswersAllOf } from '../models/OsAnswersAllOf';
import { OsBaseInstallConfig } from '../models/OsBaseInstallConfig';
import { OsBaseInstallConfigAllOf } from '../models/OsBaseInstallConfigAllOf';
import { OsCatalog } from '../models/OsCatalog';
import { OsCatalogAllOf } from '../models/OsCatalogAllOf';
import { OsCatalogList } from '../models/OsCatalogList';
import { OsCatalogListAllOf } from '../models/OsCatalogListAllOf';
import { OsCatalogRelationship } from '../models/OsCatalogRelationship';
import { OsCatalogResponse } from '../models/OsCatalogResponse';
import { OsConfigurationFile } from '../models/OsConfigurationFile';
import { OsConfigurationFileAllOf } from '../models/OsConfigurationFileAllOf';
import { OsConfigurationFileList } from '../models/OsConfigurationFileList';
import { OsConfigurationFileListAllOf } from '../models/OsConfigurationFileListAllOf';
import { OsConfigurationFileRelationship } from '../models/OsConfigurationFileRelationship';
import { OsConfigurationFileResponse } from '../models/OsConfigurationFileResponse';
import { OsInstall } from '../models/OsInstall';
import { OsInstallAllOf } from '../models/OsInstallAllOf';
import { OsInstallList } from '../models/OsInstallList';
import { OsInstallListAllOf } from '../models/OsInstallListAllOf';
import { OsInstallResponse } from '../models/OsInstallResponse';
import { OsOperatingSystemParameters } from '../models/OsOperatingSystemParameters';
import { OsOsSupport } from '../models/OsOsSupport';
import { OsOsSupportAllOf } from '../models/OsOsSupportAllOf';
import { OsPlaceHolder } from '../models/OsPlaceHolder';
import { OsPlaceHolderAllOf } from '../models/OsPlaceHolderAllOf';
import { OsTemplateFile } from '../models/OsTemplateFile';
import { OsTemplateFileAllOf } from '../models/OsTemplateFileAllOf';
import { OsWindowsParameters } from '../models/OsWindowsParameters';
import { OsWindowsParametersAllOf } from '../models/OsWindowsParametersAllOf';
import { PatchDocument } from '../models/PatchDocument';
import { PciCoprocessorCard } from '../models/PciCoprocessorCard';
import { PciCoprocessorCardAllOf } from '../models/PciCoprocessorCardAllOf';
import { PciCoprocessorCardList } from '../models/PciCoprocessorCardList';
import { PciCoprocessorCardListAllOf } from '../models/PciCoprocessorCardListAllOf';
import { PciCoprocessorCardRelationship } from '../models/PciCoprocessorCardRelationship';
import { PciCoprocessorCardResponse } from '../models/PciCoprocessorCardResponse';
import { PciDevice } from '../models/PciDevice';
import { PciDeviceAllOf } from '../models/PciDeviceAllOf';
import { PciDeviceList } from '../models/PciDeviceList';
import { PciDeviceListAllOf } from '../models/PciDeviceListAllOf';
import { PciDeviceRelationship } from '../models/PciDeviceRelationship';
import { PciDeviceResponse } from '../models/PciDeviceResponse';
import { PciLink } from '../models/PciLink';
import { PciLinkAllOf } from '../models/PciLinkAllOf';
import { PciLinkList } from '../models/PciLinkList';
import { PciLinkListAllOf } from '../models/PciLinkListAllOf';
import { PciLinkRelationship } from '../models/PciLinkRelationship';
import { PciLinkResponse } from '../models/PciLinkResponse';
import { PciSwitch } from '../models/PciSwitch';
import { PciSwitchAllOf } from '../models/PciSwitchAllOf';
import { PciSwitchList } from '../models/PciSwitchList';
import { PciSwitchListAllOf } from '../models/PciSwitchListAllOf';
import { PciSwitchRelationship } from '../models/PciSwitchRelationship';
import { PciSwitchResponse } from '../models/PciSwitchResponse';
import { PkixDistinguishedName } from '../models/PkixDistinguishedName';
import { PkixDistinguishedNameAllOf } from '../models/PkixDistinguishedNameAllOf';
import { PkixEcdsaKeySpec } from '../models/PkixEcdsaKeySpec';
import { PkixEcdsaKeySpecAllOf } from '../models/PkixEcdsaKeySpecAllOf';
import { PkixEddsaKeySpec } from '../models/PkixEddsaKeySpec';
import { PkixEddsaKeySpecAllOf } from '../models/PkixEddsaKeySpecAllOf';
import { PkixKeyGenerationSpec } from '../models/PkixKeyGenerationSpec';
import { PkixKeyGenerationSpecAllOf } from '../models/PkixKeyGenerationSpecAllOf';
import { PkixRsaAlgorithm } from '../models/PkixRsaAlgorithm';
import { PkixRsaAlgorithmAllOf } from '../models/PkixRsaAlgorithmAllOf';
import { PkixSubjectAlternateName } from '../models/PkixSubjectAlternateName';
import { PkixSubjectAlternateNameAllOf } from '../models/PkixSubjectAlternateNameAllOf';
import { PolicyAbstractConfigChangeDetail } from '../models/PolicyAbstractConfigChangeDetail';
import { PolicyAbstractConfigChangeDetailAllOf } from '../models/PolicyAbstractConfigChangeDetailAllOf';
import { PolicyAbstractConfigProfile } from '../models/PolicyAbstractConfigProfile';
import { PolicyAbstractConfigProfileAllOf } from '../models/PolicyAbstractConfigProfileAllOf';
import { PolicyAbstractConfigProfileRelationship } from '../models/PolicyAbstractConfigProfileRelationship';
import { PolicyAbstractConfigResult } from '../models/PolicyAbstractConfigResult';
import { PolicyAbstractConfigResultAllOf } from '../models/PolicyAbstractConfigResultAllOf';
import { PolicyAbstractConfigResultEntry } from '../models/PolicyAbstractConfigResultEntry';
import { PolicyAbstractConfigResultEntryAllOf } from '../models/PolicyAbstractConfigResultEntryAllOf';
import { PolicyAbstractPolicy } from '../models/PolicyAbstractPolicy';
import { PolicyAbstractPolicyAllOf } from '../models/PolicyAbstractPolicyAllOf';
import { PolicyAbstractProfile } from '../models/PolicyAbstractProfile';
import { PolicyAbstractProfileAllOf } from '../models/PolicyAbstractProfileAllOf';
import { PolicyAbstractProfileRelationship } from '../models/PolicyAbstractProfileRelationship';
import { PolicyConfigChange } from '../models/PolicyConfigChange';
import { PolicyConfigChangeAllOf } from '../models/PolicyConfigChangeAllOf';
import { PolicyConfigContext } from '../models/PolicyConfigContext';
import { PolicyConfigContextAllOf } from '../models/PolicyConfigContextAllOf';
import { PolicyConfigResultContext } from '../models/PolicyConfigResultContext';
import { PolicyConfigResultContextAllOf } from '../models/PolicyConfigResultContextAllOf';
import { PolicyinventoryAbstractDeviceInfo } from '../models/PolicyinventoryAbstractDeviceInfo';
import { PolicyinventoryAbstractDeviceInfoAllOf } from '../models/PolicyinventoryAbstractDeviceInfoAllOf';
import { PolicyinventoryJobInfo } from '../models/PolicyinventoryJobInfo';
import { PolicyinventoryJobInfoAllOf } from '../models/PolicyinventoryJobInfoAllOf';
import { PortGroup } from '../models/PortGroup';
import { PortGroupAllOf } from '../models/PortGroupAllOf';
import { PortGroupList } from '../models/PortGroupList';
import { PortGroupListAllOf } from '../models/PortGroupListAllOf';
import { PortGroupRelationship } from '../models/PortGroupRelationship';
import { PortGroupResponse } from '../models/PortGroupResponse';
import { PortPhysical } from '../models/PortPhysical';
import { PortPhysicalAllOf } from '../models/PortPhysicalAllOf';
import { PortSubGroup } from '../models/PortSubGroup';
import { PortSubGroupAllOf } from '../models/PortSubGroupAllOf';
import { PortSubGroupList } from '../models/PortSubGroupList';
import { PortSubGroupListAllOf } from '../models/PortSubGroupListAllOf';
import { PortSubGroupRelationship } from '../models/PortSubGroupRelationship';
import { PortSubGroupResponse } from '../models/PortSubGroupResponse';
import { ProcessorUnit } from '../models/ProcessorUnit';
import { ProcessorUnitAllOf } from '../models/ProcessorUnitAllOf';
import { ProcessorUnitList } from '../models/ProcessorUnitList';
import { ProcessorUnitListAllOf } from '../models/ProcessorUnitListAllOf';
import { ProcessorUnitRelationship } from '../models/ProcessorUnitRelationship';
import { ProcessorUnitResponse } from '../models/ProcessorUnitResponse';
import { RecoveryAbstractBackupConfig } from '../models/RecoveryAbstractBackupConfig';
import { RecoveryAbstractBackupConfigAllOf } from '../models/RecoveryAbstractBackupConfigAllOf';
import { RecoveryAbstractBackupInfo } from '../models/RecoveryAbstractBackupInfo';
import { RecoveryAbstractBackupInfoAllOf } from '../models/RecoveryAbstractBackupInfoAllOf';
import { RecoveryAbstractBackupInfoRelationship } from '../models/RecoveryAbstractBackupInfoRelationship';
import { RecoveryBackupConfigPolicy } from '../models/RecoveryBackupConfigPolicy';
import { RecoveryBackupConfigPolicyAllOf } from '../models/RecoveryBackupConfigPolicyAllOf';
import { RecoveryBackupConfigPolicyList } from '../models/RecoveryBackupConfigPolicyList';
import { RecoveryBackupConfigPolicyListAllOf } from '../models/RecoveryBackupConfigPolicyListAllOf';
import { RecoveryBackupConfigPolicyRelationship } from '../models/RecoveryBackupConfigPolicyRelationship';
import { RecoveryBackupConfigPolicyResponse } from '../models/RecoveryBackupConfigPolicyResponse';
import { RecoveryBackupProfile } from '../models/RecoveryBackupProfile';
import { RecoveryBackupProfileAllOf } from '../models/RecoveryBackupProfileAllOf';
import { RecoveryBackupProfileList } from '../models/RecoveryBackupProfileList';
import { RecoveryBackupProfileListAllOf } from '../models/RecoveryBackupProfileListAllOf';
import { RecoveryBackupProfileRelationship } from '../models/RecoveryBackupProfileRelationship';
import { RecoveryBackupProfileResponse } from '../models/RecoveryBackupProfileResponse';
import { RecoveryBackupSchedule } from '../models/RecoveryBackupSchedule';
import { RecoveryBackupScheduleAllOf } from '../models/RecoveryBackupScheduleAllOf';
import { RecoveryConfigParams } from '../models/RecoveryConfigParams';
import { RecoveryConfigResult } from '../models/RecoveryConfigResult';
import { RecoveryConfigResultAllOf } from '../models/RecoveryConfigResultAllOf';
import { RecoveryConfigResultEntry } from '../models/RecoveryConfigResultEntry';
import { RecoveryConfigResultEntryAllOf } from '../models/RecoveryConfigResultEntryAllOf';
import { RecoveryConfigResultEntryList } from '../models/RecoveryConfigResultEntryList';
import { RecoveryConfigResultEntryListAllOf } from '../models/RecoveryConfigResultEntryListAllOf';
import { RecoveryConfigResultEntryRelationship } from '../models/RecoveryConfigResultEntryRelationship';
import { RecoveryConfigResultEntryResponse } from '../models/RecoveryConfigResultEntryResponse';
import { RecoveryConfigResultList } from '../models/RecoveryConfigResultList';
import { RecoveryConfigResultListAllOf } from '../models/RecoveryConfigResultListAllOf';
import { RecoveryConfigResultRelationship } from '../models/RecoveryConfigResultRelationship';
import { RecoveryConfigResultResponse } from '../models/RecoveryConfigResultResponse';
import { RecoveryOnDemandBackup } from '../models/RecoveryOnDemandBackup';
import { RecoveryOnDemandBackupAllOf } from '../models/RecoveryOnDemandBackupAllOf';
import { RecoveryOnDemandBackupList } from '../models/RecoveryOnDemandBackupList';
import { RecoveryOnDemandBackupListAllOf } from '../models/RecoveryOnDemandBackupListAllOf';
import { RecoveryOnDemandBackupRelationship } from '../models/RecoveryOnDemandBackupRelationship';
import { RecoveryOnDemandBackupResponse } from '../models/RecoveryOnDemandBackupResponse';
import { RecoveryRestore } from '../models/RecoveryRestore';
import { RecoveryRestoreAllOf } from '../models/RecoveryRestoreAllOf';
import { RecoveryRestoreList } from '../models/RecoveryRestoreList';
import { RecoveryRestoreListAllOf } from '../models/RecoveryRestoreListAllOf';
import { RecoveryRestoreResponse } from '../models/RecoveryRestoreResponse';
import { RecoveryScheduleConfigPolicy } from '../models/RecoveryScheduleConfigPolicy';
import { RecoveryScheduleConfigPolicyAllOf } from '../models/RecoveryScheduleConfigPolicyAllOf';
import { RecoveryScheduleConfigPolicyList } from '../models/RecoveryScheduleConfigPolicyList';
import { RecoveryScheduleConfigPolicyListAllOf } from '../models/RecoveryScheduleConfigPolicyListAllOf';
import { RecoveryScheduleConfigPolicyRelationship } from '../models/RecoveryScheduleConfigPolicyRelationship';
import { RecoveryScheduleConfigPolicyResponse } from '../models/RecoveryScheduleConfigPolicyResponse';
import { ResourceGroup } from '../models/ResourceGroup';
import { ResourceGroupAllOf } from '../models/ResourceGroupAllOf';
import { ResourceGroupList } from '../models/ResourceGroupList';
import { ResourceGroupListAllOf } from '../models/ResourceGroupListAllOf';
import { ResourceGroupMember } from '../models/ResourceGroupMember';
import { ResourceGroupMemberAllOf } from '../models/ResourceGroupMemberAllOf';
import { ResourceGroupMemberList } from '../models/ResourceGroupMemberList';
import { ResourceGroupMemberListAllOf } from '../models/ResourceGroupMemberListAllOf';
import { ResourceGroupMemberResponse } from '../models/ResourceGroupMemberResponse';
import { ResourceGroupRelationship } from '../models/ResourceGroupRelationship';
import { ResourceGroupResponse } from '../models/ResourceGroupResponse';
import { ResourceLicenseResourceCount } from '../models/ResourceLicenseResourceCount';
import { ResourceLicenseResourceCountAllOf } from '../models/ResourceLicenseResourceCountAllOf';
import { ResourceLicenseResourceCountList } from '../models/ResourceLicenseResourceCountList';
import { ResourceLicenseResourceCountListAllOf } from '../models/ResourceLicenseResourceCountListAllOf';
import { ResourceLicenseResourceCountResponse } from '../models/ResourceLicenseResourceCountResponse';
import { ResourceMembership } from '../models/ResourceMembership';
import { ResourceMembershipAllOf } from '../models/ResourceMembershipAllOf';
import { ResourceMembershipHolder } from '../models/ResourceMembershipHolder';
import { ResourceMembershipHolderAllOf } from '../models/ResourceMembershipHolderAllOf';
import { ResourceMembershipHolderList } from '../models/ResourceMembershipHolderList';
import { ResourceMembershipHolderListAllOf } from '../models/ResourceMembershipHolderListAllOf';
import { ResourceMembershipHolderRelationship } from '../models/ResourceMembershipHolderRelationship';
import { ResourceMembershipHolderResponse } from '../models/ResourceMembershipHolderResponse';
import { ResourceMembershipList } from '../models/ResourceMembershipList';
import { ResourceMembershipListAllOf } from '../models/ResourceMembershipListAllOf';
import { ResourceMembershipRelationship } from '../models/ResourceMembershipRelationship';
import { ResourceMembershipResponse } from '../models/ResourceMembershipResponse';
import { ResourcePerTypeCombinedSelector } from '../models/ResourcePerTypeCombinedSelector';
import { ResourcePerTypeCombinedSelectorAllOf } from '../models/ResourcePerTypeCombinedSelectorAllOf';
import { ResourceSelector } from '../models/ResourceSelector';
import { ResourceSelectorAllOf } from '../models/ResourceSelectorAllOf';
import { SdcardDiagnostics } from '../models/SdcardDiagnostics';
import { SdcardDrivers } from '../models/SdcardDrivers';
import { SdcardHostUpgradeUtility } from '../models/SdcardHostUpgradeUtility';
import { SdcardOperatingSystem } from '../models/SdcardOperatingSystem';
import { SdcardOperatingSystemAllOf } from '../models/SdcardOperatingSystemAllOf';
import { SdcardPartition } from '../models/SdcardPartition';
import { SdcardPartitionAllOf } from '../models/SdcardPartitionAllOf';
import { SdcardPolicy } from '../models/SdcardPolicy';
import { SdcardPolicyAllOf } from '../models/SdcardPolicyAllOf';
import { SdcardPolicyList } from '../models/SdcardPolicyList';
import { SdcardPolicyListAllOf } from '../models/SdcardPolicyListAllOf';
import { SdcardPolicyResponse } from '../models/SdcardPolicyResponse';
import { SdcardServerConfigurationUtility } from '../models/SdcardServerConfigurationUtility';
import { SdcardUserPartition } from '../models/SdcardUserPartition';
import { SdcardUserPartitionAllOf } from '../models/SdcardUserPartitionAllOf';
import { SdcardVirtualDrive } from '../models/SdcardVirtualDrive';
import { SdcardVirtualDriveAllOf } from '../models/SdcardVirtualDriveAllOf';
import { SdwanNetworkConfigurationType } from '../models/SdwanNetworkConfigurationType';
import { SdwanNetworkConfigurationTypeAllOf } from '../models/SdwanNetworkConfigurationTypeAllOf';
import { SdwanProfile } from '../models/SdwanProfile';
import { SdwanProfileAllOf } from '../models/SdwanProfileAllOf';
import { SdwanProfileList } from '../models/SdwanProfileList';
import { SdwanProfileListAllOf } from '../models/SdwanProfileListAllOf';
import { SdwanProfileRelationship } from '../models/SdwanProfileRelationship';
import { SdwanProfileResponse } from '../models/SdwanProfileResponse';
import { SdwanRouterNode } from '../models/SdwanRouterNode';
import { SdwanRouterNodeAllOf } from '../models/SdwanRouterNodeAllOf';
import { SdwanRouterNodeList } from '../models/SdwanRouterNodeList';
import { SdwanRouterNodeListAllOf } from '../models/SdwanRouterNodeListAllOf';
import { SdwanRouterNodeRelationship } from '../models/SdwanRouterNodeRelationship';
import { SdwanRouterNodeResponse } from '../models/SdwanRouterNodeResponse';
import { SdwanRouterPolicy } from '../models/SdwanRouterPolicy';
import { SdwanRouterPolicyAllOf } from '../models/SdwanRouterPolicyAllOf';
import { SdwanRouterPolicyList } from '../models/SdwanRouterPolicyList';
import { SdwanRouterPolicyListAllOf } from '../models/SdwanRouterPolicyListAllOf';
import { SdwanRouterPolicyRelationship } from '../models/SdwanRouterPolicyRelationship';
import { SdwanRouterPolicyResponse } from '../models/SdwanRouterPolicyResponse';
import { SdwanTemplateInputsType } from '../models/SdwanTemplateInputsType';
import { SdwanTemplateInputsTypeAllOf } from '../models/SdwanTemplateInputsTypeAllOf';
import { SdwanVmanageAccountPolicy } from '../models/SdwanVmanageAccountPolicy';
import { SdwanVmanageAccountPolicyAllOf } from '../models/SdwanVmanageAccountPolicyAllOf';
import { SdwanVmanageAccountPolicyList } from '../models/SdwanVmanageAccountPolicyList';
import { SdwanVmanageAccountPolicyListAllOf } from '../models/SdwanVmanageAccountPolicyListAllOf';
import { SdwanVmanageAccountPolicyRelationship } from '../models/SdwanVmanageAccountPolicyRelationship';
import { SdwanVmanageAccountPolicyResponse } from '../models/SdwanVmanageAccountPolicyResponse';
import { SearchSearchItem } from '../models/SearchSearchItem';
import { SearchSearchItemList } from '../models/SearchSearchItemList';
import { SearchSearchItemListAllOf } from '../models/SearchSearchItemListAllOf';
import { SearchSearchItemResponse } from '../models/SearchSearchItemResponse';
import { SearchSuggestItem } from '../models/SearchSuggestItem';
import { SearchSuggestItemAllOf } from '../models/SearchSuggestItemAllOf';
import { SearchTagItem } from '../models/SearchTagItem';
import { SearchTagItemList } from '../models/SearchTagItemList';
import { SearchTagItemListAllOf } from '../models/SearchTagItemListAllOf';
import { SearchTagItemResponse } from '../models/SearchTagItemResponse';
import { SecurityUnit } from '../models/SecurityUnit';
import { SecurityUnitAllOf } from '../models/SecurityUnitAllOf';
import { SecurityUnitList } from '../models/SecurityUnitList';
import { SecurityUnitListAllOf } from '../models/SecurityUnitListAllOf';
import { SecurityUnitRelationship } from '../models/SecurityUnitRelationship';
import { SecurityUnitResponse } from '../models/SecurityUnitResponse';
import { ServerConfigChangeDetail } from '../models/ServerConfigChangeDetail';
import { ServerConfigChangeDetailAllOf } from '../models/ServerConfigChangeDetailAllOf';
import { ServerConfigChangeDetailList } from '../models/ServerConfigChangeDetailList';
import { ServerConfigChangeDetailListAllOf } from '../models/ServerConfigChangeDetailListAllOf';
import { ServerConfigChangeDetailRelationship } from '../models/ServerConfigChangeDetailRelationship';
import { ServerConfigChangeDetailResponse } from '../models/ServerConfigChangeDetailResponse';
import { ServerConfigImport } from '../models/ServerConfigImport';
import { ServerConfigImportAllOf } from '../models/ServerConfigImportAllOf';
import { ServerConfigImportList } from '../models/ServerConfigImportList';
import { ServerConfigImportListAllOf } from '../models/ServerConfigImportListAllOf';
import { ServerConfigImportResponse } from '../models/ServerConfigImportResponse';
import { ServerConfigResult } from '../models/ServerConfigResult';
import { ServerConfigResultAllOf } from '../models/ServerConfigResultAllOf';
import { ServerConfigResultEntry } from '../models/ServerConfigResultEntry';
import { ServerConfigResultEntryAllOf } from '../models/ServerConfigResultEntryAllOf';
import { ServerConfigResultEntryList } from '../models/ServerConfigResultEntryList';
import { ServerConfigResultEntryListAllOf } from '../models/ServerConfigResultEntryListAllOf';
import { ServerConfigResultEntryRelationship } from '../models/ServerConfigResultEntryRelationship';
import { ServerConfigResultEntryResponse } from '../models/ServerConfigResultEntryResponse';
import { ServerConfigResultList } from '../models/ServerConfigResultList';
import { ServerConfigResultListAllOf } from '../models/ServerConfigResultListAllOf';
import { ServerConfigResultRelationship } from '../models/ServerConfigResultRelationship';
import { ServerConfigResultResponse } from '../models/ServerConfigResultResponse';
import { ServerProfile } from '../models/ServerProfile';
import { ServerProfileAllOf } from '../models/ServerProfileAllOf';
import { ServerProfileList } from '../models/ServerProfileList';
import { ServerProfileListAllOf } from '../models/ServerProfileListAllOf';
import { ServerProfileRelationship } from '../models/ServerProfileRelationship';
import { ServerProfileResponse } from '../models/ServerProfileResponse';
import { SmtpPolicy } from '../models/SmtpPolicy';
import { SmtpPolicyAllOf } from '../models/SmtpPolicyAllOf';
import { SmtpPolicyList } from '../models/SmtpPolicyList';
import { SmtpPolicyListAllOf } from '../models/SmtpPolicyListAllOf';
import { SmtpPolicyResponse } from '../models/SmtpPolicyResponse';
import { SnmpPolicy } from '../models/SnmpPolicy';
import { SnmpPolicyAllOf } from '../models/SnmpPolicyAllOf';
import { SnmpPolicyList } from '../models/SnmpPolicyList';
import { SnmpPolicyListAllOf } from '../models/SnmpPolicyListAllOf';
import { SnmpPolicyResponse } from '../models/SnmpPolicyResponse';
import { SnmpTrap } from '../models/SnmpTrap';
import { SnmpTrapAllOf } from '../models/SnmpTrapAllOf';
import { SnmpUser } from '../models/SnmpUser';
import { SnmpUserAllOf } from '../models/SnmpUserAllOf';
import { SoftwareHclMeta } from '../models/SoftwareHclMeta';
import { SoftwareHclMetaAllOf } from '../models/SoftwareHclMetaAllOf';
import { SoftwareHclMetaList } from '../models/SoftwareHclMetaList';
import { SoftwareHclMetaListAllOf } from '../models/SoftwareHclMetaListAllOf';
import { SoftwareHclMetaResponse } from '../models/SoftwareHclMetaResponse';
import { SoftwareHyperflexDistributable } from '../models/SoftwareHyperflexDistributable';
import { SoftwareHyperflexDistributableAllOf } from '../models/SoftwareHyperflexDistributableAllOf';
import { SoftwareHyperflexDistributableList } from '../models/SoftwareHyperflexDistributableList';
import { SoftwareHyperflexDistributableListAllOf } from '../models/SoftwareHyperflexDistributableListAllOf';
import { SoftwareHyperflexDistributableRelationship } from '../models/SoftwareHyperflexDistributableRelationship';
import { SoftwareHyperflexDistributableResponse } from '../models/SoftwareHyperflexDistributableResponse';
import { SoftwareSolutionDistributable } from '../models/SoftwareSolutionDistributable';
import { SoftwareSolutionDistributableAllOf } from '../models/SoftwareSolutionDistributableAllOf';
import { SoftwareSolutionDistributableList } from '../models/SoftwareSolutionDistributableList';
import { SoftwareSolutionDistributableListAllOf } from '../models/SoftwareSolutionDistributableListAllOf';
import { SoftwareSolutionDistributableRelationship } from '../models/SoftwareSolutionDistributableRelationship';
import { SoftwareSolutionDistributableResponse } from '../models/SoftwareSolutionDistributableResponse';
import { SoftwarerepositoryAuthorization } from '../models/SoftwarerepositoryAuthorization';
import { SoftwarerepositoryAuthorizationAllOf } from '../models/SoftwarerepositoryAuthorizationAllOf';
import { SoftwarerepositoryAuthorizationList } from '../models/SoftwarerepositoryAuthorizationList';
import { SoftwarerepositoryAuthorizationListAllOf } from '../models/SoftwarerepositoryAuthorizationListAllOf';
import { SoftwarerepositoryAuthorizationResponse } from '../models/SoftwarerepositoryAuthorizationResponse';
import { SoftwarerepositoryCatalog } from '../models/SoftwarerepositoryCatalog';
import { SoftwarerepositoryCatalogAllOf } from '../models/SoftwarerepositoryCatalogAllOf';
import { SoftwarerepositoryCatalogList } from '../models/SoftwarerepositoryCatalogList';
import { SoftwarerepositoryCatalogListAllOf } from '../models/SoftwarerepositoryCatalogListAllOf';
import { SoftwarerepositoryCatalogRelationship } from '../models/SoftwarerepositoryCatalogRelationship';
import { SoftwarerepositoryCatalogResponse } from '../models/SoftwarerepositoryCatalogResponse';
import { SoftwarerepositoryCifsServer } from '../models/SoftwarerepositoryCifsServer';
import { SoftwarerepositoryCifsServerAllOf } from '../models/SoftwarerepositoryCifsServerAllOf';
import { SoftwarerepositoryFile } from '../models/SoftwarerepositoryFile';
import { SoftwarerepositoryFileAllOf } from '../models/SoftwarerepositoryFileAllOf';
import { SoftwarerepositoryFileServer } from '../models/SoftwarerepositoryFileServer';
import { SoftwarerepositoryHttpServer } from '../models/SoftwarerepositoryHttpServer';
import { SoftwarerepositoryHttpServerAllOf } from '../models/SoftwarerepositoryHttpServerAllOf';
import { SoftwarerepositoryImportResult } from '../models/SoftwarerepositoryImportResult';
import { SoftwarerepositoryImportResultAllOf } from '../models/SoftwarerepositoryImportResultAllOf';
import { SoftwarerepositoryLocalMachine } from '../models/SoftwarerepositoryLocalMachine';
import { SoftwarerepositoryLocalMachineAllOf } from '../models/SoftwarerepositoryLocalMachineAllOf';
import { SoftwarerepositoryNfsServer } from '../models/SoftwarerepositoryNfsServer';
import { SoftwarerepositoryNfsServerAllOf } from '../models/SoftwarerepositoryNfsServerAllOf';
import { SoftwarerepositoryOperatingSystemFile } from '../models/SoftwarerepositoryOperatingSystemFile';
import { SoftwarerepositoryOperatingSystemFileAllOf } from '../models/SoftwarerepositoryOperatingSystemFileAllOf';
import { SoftwarerepositoryOperatingSystemFileList } from '../models/SoftwarerepositoryOperatingSystemFileList';
import { SoftwarerepositoryOperatingSystemFileListAllOf } from '../models/SoftwarerepositoryOperatingSystemFileListAllOf';
import { SoftwarerepositoryOperatingSystemFileRelationship } from '../models/SoftwarerepositoryOperatingSystemFileRelationship';
import { SoftwarerepositoryOperatingSystemFileResponse } from '../models/SoftwarerepositoryOperatingSystemFileResponse';
import { SolPolicy } from '../models/SolPolicy';
import { SolPolicyAllOf } from '../models/SolPolicyAllOf';
import { SolPolicyList } from '../models/SolPolicyList';
import { SolPolicyListAllOf } from '../models/SolPolicyListAllOf';
import { SolPolicyResponse } from '../models/SolPolicyResponse';
import { SshPolicy } from '../models/SshPolicy';
import { SshPolicyAllOf } from '../models/SshPolicyAllOf';
import { SshPolicyList } from '../models/SshPolicyList';
import { SshPolicyListAllOf } from '../models/SshPolicyListAllOf';
import { SshPolicyResponse } from '../models/SshPolicyResponse';
import { StorageArrayController } from '../models/StorageArrayController';
import { StorageArrayControllerAllOf } from '../models/StorageArrayControllerAllOf';
import { StorageArrayControllerRelationship } from '../models/StorageArrayControllerRelationship';
import { StorageArrayDisk } from '../models/StorageArrayDisk';
import { StorageArrayDiskAllOf } from '../models/StorageArrayDiskAllOf';
import { StorageCapacity } from '../models/StorageCapacity';
import { StorageCapacityAllOf } from '../models/StorageCapacityAllOf';
import { StorageController } from '../models/StorageController';
import { StorageControllerAllOf } from '../models/StorageControllerAllOf';
import { StorageControllerList } from '../models/StorageControllerList';
import { StorageControllerListAllOf } from '../models/StorageControllerListAllOf';
import { StorageControllerRelationship } from '../models/StorageControllerRelationship';
import { StorageControllerResponse } from '../models/StorageControllerResponse';
import { StorageDiskGroupPolicy } from '../models/StorageDiskGroupPolicy';
import { StorageDiskGroupPolicyAllOf } from '../models/StorageDiskGroupPolicyAllOf';
import { StorageDiskGroupPolicyList } from '../models/StorageDiskGroupPolicyList';
import { StorageDiskGroupPolicyListAllOf } from '../models/StorageDiskGroupPolicyListAllOf';
import { StorageDiskGroupPolicyRelationship } from '../models/StorageDiskGroupPolicyRelationship';
import { StorageDiskGroupPolicyResponse } from '../models/StorageDiskGroupPolicyResponse';
import { StorageDiskUtilization } from '../models/StorageDiskUtilization';
import { StorageEnclosure } from '../models/StorageEnclosure';
import { StorageEnclosureAllOf } from '../models/StorageEnclosureAllOf';
import { StorageEnclosureDisk } from '../models/StorageEnclosureDisk';
import { StorageEnclosureDiskAllOf } from '../models/StorageEnclosureDiskAllOf';
import { StorageEnclosureDiskList } from '../models/StorageEnclosureDiskList';
import { StorageEnclosureDiskListAllOf } from '../models/StorageEnclosureDiskListAllOf';
import { StorageEnclosureDiskRelationship } from '../models/StorageEnclosureDiskRelationship';
import { StorageEnclosureDiskResponse } from '../models/StorageEnclosureDiskResponse';
import { StorageEnclosureDiskSlotEp } from '../models/StorageEnclosureDiskSlotEp';
import { StorageEnclosureDiskSlotEpAllOf } from '../models/StorageEnclosureDiskSlotEpAllOf';
import { StorageEnclosureDiskSlotEpList } from '../models/StorageEnclosureDiskSlotEpList';
import { StorageEnclosureDiskSlotEpListAllOf } from '../models/StorageEnclosureDiskSlotEpListAllOf';
import { StorageEnclosureDiskSlotEpRelationship } from '../models/StorageEnclosureDiskSlotEpRelationship';
import { StorageEnclosureDiskSlotEpResponse } from '../models/StorageEnclosureDiskSlotEpResponse';
import { StorageEnclosureList } from '../models/StorageEnclosureList';
import { StorageEnclosureListAllOf } from '../models/StorageEnclosureListAllOf';
import { StorageEnclosureRelationship } from '../models/StorageEnclosureRelationship';
import { StorageEnclosureResponse } from '../models/StorageEnclosureResponse';
import { StorageFlexFlashController } from '../models/StorageFlexFlashController';
import { StorageFlexFlashControllerAllOf } from '../models/StorageFlexFlashControllerAllOf';
import { StorageFlexFlashControllerList } from '../models/StorageFlexFlashControllerList';
import { StorageFlexFlashControllerListAllOf } from '../models/StorageFlexFlashControllerListAllOf';
import { StorageFlexFlashControllerProps } from '../models/StorageFlexFlashControllerProps';
import { StorageFlexFlashControllerPropsAllOf } from '../models/StorageFlexFlashControllerPropsAllOf';
import { StorageFlexFlashControllerPropsList } from '../models/StorageFlexFlashControllerPropsList';
import { StorageFlexFlashControllerPropsListAllOf } from '../models/StorageFlexFlashControllerPropsListAllOf';
import { StorageFlexFlashControllerPropsRelationship } from '../models/StorageFlexFlashControllerPropsRelationship';
import { StorageFlexFlashControllerPropsResponse } from '../models/StorageFlexFlashControllerPropsResponse';
import { StorageFlexFlashControllerRelationship } from '../models/StorageFlexFlashControllerRelationship';
import { StorageFlexFlashControllerResponse } from '../models/StorageFlexFlashControllerResponse';
import { StorageFlexFlashPhysicalDrive } from '../models/StorageFlexFlashPhysicalDrive';
import { StorageFlexFlashPhysicalDriveAllOf } from '../models/StorageFlexFlashPhysicalDriveAllOf';
import { StorageFlexFlashPhysicalDriveList } from '../models/StorageFlexFlashPhysicalDriveList';
import { StorageFlexFlashPhysicalDriveListAllOf } from '../models/StorageFlexFlashPhysicalDriveListAllOf';
import { StorageFlexFlashPhysicalDriveRelationship } from '../models/StorageFlexFlashPhysicalDriveRelationship';
import { StorageFlexFlashPhysicalDriveResponse } from '../models/StorageFlexFlashPhysicalDriveResponse';
import { StorageFlexFlashVirtualDrive } from '../models/StorageFlexFlashVirtualDrive';
import { StorageFlexFlashVirtualDriveAllOf } from '../models/StorageFlexFlashVirtualDriveAllOf';
import { StorageFlexFlashVirtualDriveList } from '../models/StorageFlexFlashVirtualDriveList';
import { StorageFlexFlashVirtualDriveListAllOf } from '../models/StorageFlexFlashVirtualDriveListAllOf';
import { StorageFlexFlashVirtualDriveRelationship } from '../models/StorageFlexFlashVirtualDriveRelationship';
import { StorageFlexFlashVirtualDriveResponse } from '../models/StorageFlexFlashVirtualDriveResponse';
import { StorageFlexUtilController } from '../models/StorageFlexUtilController';
import { StorageFlexUtilControllerAllOf } from '../models/StorageFlexUtilControllerAllOf';
import { StorageFlexUtilControllerList } from '../models/StorageFlexUtilControllerList';
import { StorageFlexUtilControllerListAllOf } from '../models/StorageFlexUtilControllerListAllOf';
import { StorageFlexUtilControllerRelationship } from '../models/StorageFlexUtilControllerRelationship';
import { StorageFlexUtilControllerResponse } from '../models/StorageFlexUtilControllerResponse';
import { StorageFlexUtilPhysicalDrive } from '../models/StorageFlexUtilPhysicalDrive';
import { StorageFlexUtilPhysicalDriveAllOf } from '../models/StorageFlexUtilPhysicalDriveAllOf';
import { StorageFlexUtilPhysicalDriveList } from '../models/StorageFlexUtilPhysicalDriveList';
import { StorageFlexUtilPhysicalDriveListAllOf } from '../models/StorageFlexUtilPhysicalDriveListAllOf';
import { StorageFlexUtilPhysicalDriveRelationship } from '../models/StorageFlexUtilPhysicalDriveRelationship';
import { StorageFlexUtilPhysicalDriveResponse } from '../models/StorageFlexUtilPhysicalDriveResponse';
import { StorageFlexUtilVirtualDrive } from '../models/StorageFlexUtilVirtualDrive';
import { StorageFlexUtilVirtualDriveAllOf } from '../models/StorageFlexUtilVirtualDriveAllOf';
import { StorageFlexUtilVirtualDriveList } from '../models/StorageFlexUtilVirtualDriveList';
import { StorageFlexUtilVirtualDriveListAllOf } from '../models/StorageFlexUtilVirtualDriveListAllOf';
import { StorageFlexUtilVirtualDriveRelationship } from '../models/StorageFlexUtilVirtualDriveRelationship';
import { StorageFlexUtilVirtualDriveResponse } from '../models/StorageFlexUtilVirtualDriveResponse';
import { StorageGenericArray } from '../models/StorageGenericArray';
import { StorageGenericArrayAllOf } from '../models/StorageGenericArrayAllOf';
import { StorageGenericArrayRelationship } from '../models/StorageGenericArrayRelationship';
import { StorageHost } from '../models/StorageHost';
import { StorageHostAllOf } from '../models/StorageHostAllOf';
import { StorageHostGroup } from '../models/StorageHostGroup';
import { StorageHostGroupAllOf } from '../models/StorageHostGroupAllOf';
import { StorageHostLun } from '../models/StorageHostLun';
import { StorageHostLunAllOf } from '../models/StorageHostLunAllOf';
import { StorageHostRelationship } from '../models/StorageHostRelationship';
import { StorageHostUtilization } from '../models/StorageHostUtilization';
import { StorageInitiator } from '../models/StorageInitiator';
import { StorageInitiatorAllOf } from '../models/StorageInitiatorAllOf';
import { StorageLocalDisk } from '../models/StorageLocalDisk';
import { StorageLocalDiskAllOf } from '../models/StorageLocalDiskAllOf';
import { StoragePhysicalDisk } from '../models/StoragePhysicalDisk';
import { StoragePhysicalDiskAllOf } from '../models/StoragePhysicalDiskAllOf';
import { StoragePhysicalDiskExtension } from '../models/StoragePhysicalDiskExtension';
import { StoragePhysicalDiskExtensionAllOf } from '../models/StoragePhysicalDiskExtensionAllOf';
import { StoragePhysicalDiskExtensionList } from '../models/StoragePhysicalDiskExtensionList';
import { StoragePhysicalDiskExtensionListAllOf } from '../models/StoragePhysicalDiskExtensionListAllOf';
import { StoragePhysicalDiskExtensionRelationship } from '../models/StoragePhysicalDiskExtensionRelationship';
import { StoragePhysicalDiskExtensionResponse } from '../models/StoragePhysicalDiskExtensionResponse';
import { StoragePhysicalDiskList } from '../models/StoragePhysicalDiskList';
import { StoragePhysicalDiskListAllOf } from '../models/StoragePhysicalDiskListAllOf';
import { StoragePhysicalDiskRelationship } from '../models/StoragePhysicalDiskRelationship';
import { StoragePhysicalDiskResponse } from '../models/StoragePhysicalDiskResponse';
import { StoragePhysicalDiskUsage } from '../models/StoragePhysicalDiskUsage';
import { StoragePhysicalDiskUsageAllOf } from '../models/StoragePhysicalDiskUsageAllOf';
import { StoragePhysicalDiskUsageList } from '../models/StoragePhysicalDiskUsageList';
import { StoragePhysicalDiskUsageListAllOf } from '../models/StoragePhysicalDiskUsageListAllOf';
import { StoragePhysicalDiskUsageRelationship } from '../models/StoragePhysicalDiskUsageRelationship';
import { StoragePhysicalDiskUsageResponse } from '../models/StoragePhysicalDiskUsageResponse';
import { StoragePhysicalPort } from '../models/StoragePhysicalPort';
import { StoragePhysicalPortAllOf } from '../models/StoragePhysicalPortAllOf';
import { StorageProtectionGroup } from '../models/StorageProtectionGroup';
import { StorageProtectionGroupAllOf } from '../models/StorageProtectionGroupAllOf';
import { StorageProtectionGroupRelationship } from '../models/StorageProtectionGroupRelationship';
import { StorageProtectionGroupSnapshot } from '../models/StorageProtectionGroupSnapshot';
import { StorageProtectionGroupSnapshotAllOf } from '../models/StorageProtectionGroupSnapshotAllOf';
import { StorageProtectionGroupSnapshotRelationship } from '../models/StorageProtectionGroupSnapshotRelationship';
import { StoragePureArray } from '../models/StoragePureArray';
import { StoragePureArrayAllOf } from '../models/StoragePureArrayAllOf';
import { StoragePureArrayList } from '../models/StoragePureArrayList';
import { StoragePureArrayListAllOf } from '../models/StoragePureArrayListAllOf';
import { StoragePureArrayResponse } from '../models/StoragePureArrayResponse';
import { StoragePureController } from '../models/StoragePureController';
import { StoragePureControllerAllOf } from '../models/StoragePureControllerAllOf';
import { StoragePureControllerList } from '../models/StoragePureControllerList';
import { StoragePureControllerListAllOf } from '../models/StoragePureControllerListAllOf';
import { StoragePureControllerResponse } from '../models/StoragePureControllerResponse';
import { StoragePureDisk } from '../models/StoragePureDisk';
import { StoragePureDiskAllOf } from '../models/StoragePureDiskAllOf';
import { StoragePureDiskList } from '../models/StoragePureDiskList';
import { StoragePureDiskListAllOf } from '../models/StoragePureDiskListAllOf';
import { StoragePureDiskResponse } from '../models/StoragePureDiskResponse';
import { StoragePureHost } from '../models/StoragePureHost';
import { StoragePureHostAllOf } from '../models/StoragePureHostAllOf';
import { StoragePureHostGroup } from '../models/StoragePureHostGroup';
import { StoragePureHostGroupAllOf } from '../models/StoragePureHostGroupAllOf';
import { StoragePureHostGroupList } from '../models/StoragePureHostGroupList';
import { StoragePureHostGroupListAllOf } from '../models/StoragePureHostGroupListAllOf';
import { StoragePureHostGroupRelationship } from '../models/StoragePureHostGroupRelationship';
import { StoragePureHostGroupResponse } from '../models/StoragePureHostGroupResponse';
import { StoragePureHostList } from '../models/StoragePureHostList';
import { StoragePureHostListAllOf } from '../models/StoragePureHostListAllOf';
import { StoragePureHostLun } from '../models/StoragePureHostLun';
import { StoragePureHostLunAllOf } from '../models/StoragePureHostLunAllOf';
import { StoragePureHostLunList } from '../models/StoragePureHostLunList';
import { StoragePureHostLunListAllOf } from '../models/StoragePureHostLunListAllOf';
import { StoragePureHostLunResponse } from '../models/StoragePureHostLunResponse';
import { StoragePureHostRelationship } from '../models/StoragePureHostRelationship';
import { StoragePureHostResponse } from '../models/StoragePureHostResponse';
import { StoragePurePort } from '../models/StoragePurePort';
import { StoragePurePortAllOf } from '../models/StoragePurePortAllOf';
import { StoragePurePortList } from '../models/StoragePurePortList';
import { StoragePurePortListAllOf } from '../models/StoragePurePortListAllOf';
import { StoragePurePortResponse } from '../models/StoragePurePortResponse';
import { StoragePureProtectionGroup } from '../models/StoragePureProtectionGroup';
import { StoragePureProtectionGroupAllOf } from '../models/StoragePureProtectionGroupAllOf';
import { StoragePureProtectionGroupList } from '../models/StoragePureProtectionGroupList';
import { StoragePureProtectionGroupListAllOf } from '../models/StoragePureProtectionGroupListAllOf';
import { StoragePureProtectionGroupRelationship } from '../models/StoragePureProtectionGroupRelationship';
import { StoragePureProtectionGroupResponse } from '../models/StoragePureProtectionGroupResponse';
import { StoragePureProtectionGroupSnapshot } from '../models/StoragePureProtectionGroupSnapshot';
import { StoragePureProtectionGroupSnapshotAllOf } from '../models/StoragePureProtectionGroupSnapshotAllOf';
import { StoragePureProtectionGroupSnapshotList } from '../models/StoragePureProtectionGroupSnapshotList';
import { StoragePureProtectionGroupSnapshotListAllOf } from '../models/StoragePureProtectionGroupSnapshotListAllOf';
import { StoragePureProtectionGroupSnapshotResponse } from '../models/StoragePureProtectionGroupSnapshotResponse';
import { StoragePureReplicationBlackout } from '../models/StoragePureReplicationBlackout';
import { StoragePureReplicationSchedule } from '../models/StoragePureReplicationSchedule';
import { StoragePureReplicationScheduleAllOf } from '../models/StoragePureReplicationScheduleAllOf';
import { StoragePureReplicationScheduleList } from '../models/StoragePureReplicationScheduleList';
import { StoragePureReplicationScheduleListAllOf } from '../models/StoragePureReplicationScheduleListAllOf';
import { StoragePureReplicationScheduleResponse } from '../models/StoragePureReplicationScheduleResponse';
import { StoragePureSnapshotSchedule } from '../models/StoragePureSnapshotSchedule';
import { StoragePureSnapshotScheduleAllOf } from '../models/StoragePureSnapshotScheduleAllOf';
import { StoragePureSnapshotScheduleList } from '../models/StoragePureSnapshotScheduleList';
import { StoragePureSnapshotScheduleListAllOf } from '../models/StoragePureSnapshotScheduleListAllOf';
import { StoragePureSnapshotScheduleResponse } from '../models/StoragePureSnapshotScheduleResponse';
import { StoragePureVolume } from '../models/StoragePureVolume';
import { StoragePureVolumeAllOf } from '../models/StoragePureVolumeAllOf';
import { StoragePureVolumeList } from '../models/StoragePureVolumeList';
import { StoragePureVolumeListAllOf } from '../models/StoragePureVolumeListAllOf';
import { StoragePureVolumeRelationship } from '../models/StoragePureVolumeRelationship';
import { StoragePureVolumeResponse } from '../models/StoragePureVolumeResponse';
import { StoragePureVolumeSnapshot } from '../models/StoragePureVolumeSnapshot';
import { StoragePureVolumeSnapshotAllOf } from '../models/StoragePureVolumeSnapshotAllOf';
import { StoragePureVolumeSnapshotList } from '../models/StoragePureVolumeSnapshotList';
import { StoragePureVolumeSnapshotListAllOf } from '../models/StoragePureVolumeSnapshotListAllOf';
import { StoragePureVolumeSnapshotResponse } from '../models/StoragePureVolumeSnapshotResponse';
import { StorageRemoteKeySetting } from '../models/StorageRemoteKeySetting';
import { StorageRemoteKeySettingAllOf } from '../models/StorageRemoteKeySettingAllOf';
import { StorageReplicationBlackout } from '../models/StorageReplicationBlackout';
import { StorageReplicationBlackoutAllOf } from '../models/StorageReplicationBlackoutAllOf';
import { StorageReplicationSchedule } from '../models/StorageReplicationSchedule';
import { StorageReplicationScheduleAllOf } from '../models/StorageReplicationScheduleAllOf';
import { StorageSasExpander } from '../models/StorageSasExpander';
import { StorageSasExpanderAllOf } from '../models/StorageSasExpanderAllOf';
import { StorageSasExpanderList } from '../models/StorageSasExpanderList';
import { StorageSasExpanderListAllOf } from '../models/StorageSasExpanderListAllOf';
import { StorageSasExpanderRelationship } from '../models/StorageSasExpanderRelationship';
import { StorageSasExpanderResponse } from '../models/StorageSasExpanderResponse';
import { StorageSasPort } from '../models/StorageSasPort';
import { StorageSasPortAllOf } from '../models/StorageSasPortAllOf';
import { StorageSasPortList } from '../models/StorageSasPortList';
import { StorageSasPortListAllOf } from '../models/StorageSasPortListAllOf';
import { StorageSasPortRelationship } from '../models/StorageSasPortRelationship';
import { StorageSasPortResponse } from '../models/StorageSasPortResponse';
import { StorageSnapshot } from '../models/StorageSnapshot';
import { StorageSnapshotAllOf } from '../models/StorageSnapshotAllOf';
import { StorageSnapshotSchedule } from '../models/StorageSnapshotSchedule';
import { StorageSnapshotScheduleAllOf } from '../models/StorageSnapshotScheduleAllOf';
import { StorageSpanGroup } from '../models/StorageSpanGroup';
import { StorageSpanGroupAllOf } from '../models/StorageSpanGroupAllOf';
import { StorageStorageArrayUtilization } from '../models/StorageStorageArrayUtilization';
import { StorageStorageArrayUtilizationAllOf } from '../models/StorageStorageArrayUtilizationAllOf';
import { StorageStoragePolicy } from '../models/StorageStoragePolicy';
import { StorageStoragePolicyAllOf } from '../models/StorageStoragePolicyAllOf';
import { StorageStoragePolicyList } from '../models/StorageStoragePolicyList';
import { StorageStoragePolicyListAllOf } from '../models/StorageStoragePolicyListAllOf';
import { StorageStoragePolicyRelationship } from '../models/StorageStoragePolicyRelationship';
import { StorageStoragePolicyResponse } from '../models/StorageStoragePolicyResponse';
import { StorageStorageUtilization } from '../models/StorageStorageUtilization';
import { StorageStorageUtilizationAllOf } from '../models/StorageStorageUtilizationAllOf';
import { StorageVdMemberEp } from '../models/StorageVdMemberEp';
import { StorageVdMemberEpAllOf } from '../models/StorageVdMemberEpAllOf';
import { StorageVdMemberEpList } from '../models/StorageVdMemberEpList';
import { StorageVdMemberEpListAllOf } from '../models/StorageVdMemberEpListAllOf';
import { StorageVdMemberEpRelationship } from '../models/StorageVdMemberEpRelationship';
import { StorageVdMemberEpResponse } from '../models/StorageVdMemberEpResponse';
import { StorageVirtualDrive } from '../models/StorageVirtualDrive';
import { StorageVirtualDriveAllOf } from '../models/StorageVirtualDriveAllOf';
import { StorageVirtualDriveConfig } from '../models/StorageVirtualDriveConfig';
import { StorageVirtualDriveConfigAllOf } from '../models/StorageVirtualDriveConfigAllOf';
import { StorageVirtualDriveExtension } from '../models/StorageVirtualDriveExtension';
import { StorageVirtualDriveExtensionAllOf } from '../models/StorageVirtualDriveExtensionAllOf';
import { StorageVirtualDriveExtensionList } from '../models/StorageVirtualDriveExtensionList';
import { StorageVirtualDriveExtensionListAllOf } from '../models/StorageVirtualDriveExtensionListAllOf';
import { StorageVirtualDriveExtensionRelationship } from '../models/StorageVirtualDriveExtensionRelationship';
import { StorageVirtualDriveExtensionResponse } from '../models/StorageVirtualDriveExtensionResponse';
import { StorageVirtualDriveList } from '../models/StorageVirtualDriveList';
import { StorageVirtualDriveListAllOf } from '../models/StorageVirtualDriveListAllOf';
import { StorageVirtualDriveRelationship } from '../models/StorageVirtualDriveRelationship';
import { StorageVirtualDriveResponse } from '../models/StorageVirtualDriveResponse';
import { StorageVolume } from '../models/StorageVolume';
import { StorageVolumeAllOf } from '../models/StorageVolumeAllOf';
import { StorageVolumeRelationship } from '../models/StorageVolumeRelationship';
import { StorageVolumeUtilization } from '../models/StorageVolumeUtilization';
import { SyslogLocalClientBase } from '../models/SyslogLocalClientBase';
import { SyslogLocalClientBaseAllOf } from '../models/SyslogLocalClientBaseAllOf';
import { SyslogLocalFileLoggingClient } from '../models/SyslogLocalFileLoggingClient';
import { SyslogPolicy } from '../models/SyslogPolicy';
import { SyslogPolicyAllOf } from '../models/SyslogPolicyAllOf';
import { SyslogPolicyList } from '../models/SyslogPolicyList';
import { SyslogPolicyListAllOf } from '../models/SyslogPolicyListAllOf';
import { SyslogPolicyResponse } from '../models/SyslogPolicyResponse';
import { SyslogRemoteClientBase } from '../models/SyslogRemoteClientBase';
import { SyslogRemoteClientBaseAllOf } from '../models/SyslogRemoteClientBaseAllOf';
import { SyslogRemoteLoggingClient } from '../models/SyslogRemoteLoggingClient';
import { TamAction } from '../models/TamAction';
import { TamActionAllOf } from '../models/TamActionAllOf';
import { TamAdvisory } from '../models/TamAdvisory';
import { TamAdvisoryAllOf } from '../models/TamAdvisoryAllOf';
import { TamAdvisoryCount } from '../models/TamAdvisoryCount';
import { TamAdvisoryCountAllOf } from '../models/TamAdvisoryCountAllOf';
import { TamAdvisoryCountList } from '../models/TamAdvisoryCountList';
import { TamAdvisoryCountListAllOf } from '../models/TamAdvisoryCountListAllOf';
import { TamAdvisoryCountResponse } from '../models/TamAdvisoryCountResponse';
import { TamAdvisoryInfo } from '../models/TamAdvisoryInfo';
import { TamAdvisoryInfoAllOf } from '../models/TamAdvisoryInfoAllOf';
import { TamAdvisoryInfoList } from '../models/TamAdvisoryInfoList';
import { TamAdvisoryInfoListAllOf } from '../models/TamAdvisoryInfoListAllOf';
import { TamAdvisoryInfoResponse } from '../models/TamAdvisoryInfoResponse';
import { TamAdvisoryInstance } from '../models/TamAdvisoryInstance';
import { TamAdvisoryInstanceAllOf } from '../models/TamAdvisoryInstanceAllOf';
import { TamAdvisoryInstanceList } from '../models/TamAdvisoryInstanceList';
import { TamAdvisoryInstanceListAllOf } from '../models/TamAdvisoryInstanceListAllOf';
import { TamAdvisoryInstanceResponse } from '../models/TamAdvisoryInstanceResponse';
import { TamAdvisoryRelationship } from '../models/TamAdvisoryRelationship';
import { TamApiDataSource } from '../models/TamApiDataSource';
import { TamApiDataSourceAllOf } from '../models/TamApiDataSourceAllOf';
import { TamBaseDataSource } from '../models/TamBaseDataSource';
import { TamBaseDataSourceAllOf } from '../models/TamBaseDataSourceAllOf';
import { TamIdentifiers } from '../models/TamIdentifiers';
import { TamIdentifiersAllOf } from '../models/TamIdentifiersAllOf';
import { TamPsirtSeverity } from '../models/TamPsirtSeverity';
import { TamPsirtSeverityAllOf } from '../models/TamPsirtSeverityAllOf';
import { TamQueryEntry } from '../models/TamQueryEntry';
import { TamQueryEntryAllOf } from '../models/TamQueryEntryAllOf';
import { TamSecurityAdvisory } from '../models/TamSecurityAdvisory';
import { TamSecurityAdvisoryAllOf } from '../models/TamSecurityAdvisoryAllOf';
import { TamSecurityAdvisoryList } from '../models/TamSecurityAdvisoryList';
import { TamSecurityAdvisoryListAllOf } from '../models/TamSecurityAdvisoryListAllOf';
import { TamSecurityAdvisoryResponse } from '../models/TamSecurityAdvisoryResponse';
import { TamSeverity } from '../models/TamSeverity';
import { TamTextFsmTemplateDataSource } from '../models/TamTextFsmTemplateDataSource';
import { TamTextFsmTemplateDataSourceAllOf } from '../models/TamTextFsmTemplateDataSourceAllOf';
import { TaskPureScopedInventory } from '../models/TaskPureScopedInventory';
import { TaskPureScopedInventoryAllOf } from '../models/TaskPureScopedInventoryAllOf';
import { TelemetryDruidAggregateRequest } from '../models/TelemetryDruidAggregateRequest';
import { TelemetryDruidAggregator } from '../models/TelemetryDruidAggregator';
import { TelemetryDruidAndFilter } from '../models/TelemetryDruidAndFilter';
import { TelemetryDruidAndFilterAllOf } from '../models/TelemetryDruidAndFilterAllOf';
import { TelemetryDruidArithmeticPostAggregator } from '../models/TelemetryDruidArithmeticPostAggregator';
import { TelemetryDruidArithmeticPostAggregatorAllOf } from '../models/TelemetryDruidArithmeticPostAggregatorAllOf';
import { TelemetryDruidBaseAggregator } from '../models/TelemetryDruidBaseAggregator';
import { TelemetryDruidBaseDataSource } from '../models/TelemetryDruidBaseDataSource';
import { TelemetryDruidBaseDimensionSpec } from '../models/TelemetryDruidBaseDimensionSpec';
import { TelemetryDruidBaseFilter } from '../models/TelemetryDruidBaseFilter';
import { TelemetryDruidBaseGranularity } from '../models/TelemetryDruidBaseGranularity';
import { TelemetryDruidBaseHavingFilter } from '../models/TelemetryDruidBaseHavingFilter';
import { TelemetryDruidBaseLimitSpec } from '../models/TelemetryDruidBaseLimitSpec';
import { TelemetryDruidBasePostAggregator } from '../models/TelemetryDruidBasePostAggregator';
import { TelemetryDruidBaseRequest } from '../models/TelemetryDruidBaseRequest';
import { TelemetryDruidBaseTopNMetricSpec } from '../models/TelemetryDruidBaseTopNMetricSpec';
import { TelemetryDruidColumnComparisonFilter } from '../models/TelemetryDruidColumnComparisonFilter';
import { TelemetryDruidColumnComparisonFilterAllOf } from '../models/TelemetryDruidColumnComparisonFilterAllOf';
import { TelemetryDruidConstantPostAggregator } from '../models/TelemetryDruidConstantPostAggregator';
import { TelemetryDruidConstantPostAggregatorAllOf } from '../models/TelemetryDruidConstantPostAggregatorAllOf';
import { TelemetryDruidCountAggregator } from '../models/TelemetryDruidCountAggregator';
import { TelemetryDruidCountAggregatorAllOf } from '../models/TelemetryDruidCountAggregatorAllOf';
import { TelemetryDruidDataSource } from '../models/TelemetryDruidDataSource';
import { TelemetryDruidDataSourceMetadataRequest } from '../models/TelemetryDruidDataSourceMetadataRequest';
import { TelemetryDruidDataSourceMetadataRequestAllOf } from '../models/TelemetryDruidDataSourceMetadataRequestAllOf';
import { TelemetryDruidDefaultDimensionSpec } from '../models/TelemetryDruidDefaultDimensionSpec';
import { TelemetryDruidDefaultDimensionSpecAllOf } from '../models/TelemetryDruidDefaultDimensionSpecAllOf';
import { TelemetryDruidDefaultLimitSpec } from '../models/TelemetryDruidDefaultLimitSpec';
import { TelemetryDruidDefaultLimitSpecAllOf } from '../models/TelemetryDruidDefaultLimitSpecAllOf';
import { TelemetryDruidDimensionSpec } from '../models/TelemetryDruidDimensionSpec';
import { TelemetryDruidDimensionTopNMetricSpec } from '../models/TelemetryDruidDimensionTopNMetricSpec';
import { TelemetryDruidDimensionTopNMetricSpecAllOf } from '../models/TelemetryDruidDimensionTopNMetricSpecAllOf';
import { TelemetryDruidDurationGranularity } from '../models/TelemetryDruidDurationGranularity';
import { TelemetryDruidDurationGranularityAllOf } from '../models/TelemetryDruidDurationGranularityAllOf';
import { TelemetryDruidExtractionDimensionSpec } from '../models/TelemetryDruidExtractionDimensionSpec';
import { TelemetryDruidExtractionDimensionSpecAllOf } from '../models/TelemetryDruidExtractionDimensionSpecAllOf';
import { TelemetryDruidFieldAccessorPostAggregator } from '../models/TelemetryDruidFieldAccessorPostAggregator';
import { TelemetryDruidFieldAccessorPostAggregatorAllOf } from '../models/TelemetryDruidFieldAccessorPostAggregatorAllOf';
import { TelemetryDruidFilter } from '../models/TelemetryDruidFilter';
import { TelemetryDruidFirstLastAggregator } from '../models/TelemetryDruidFirstLastAggregator';
import { TelemetryDruidFirstLastAggregatorAllOf } from '../models/TelemetryDruidFirstLastAggregatorAllOf';
import { TelemetryDruidGranularity } from '../models/TelemetryDruidGranularity';
import { TelemetryDruidGreatestLeastPostAggregator } from '../models/TelemetryDruidGreatestLeastPostAggregator';
import { TelemetryDruidGreatestLeastPostAggregatorAllOf } from '../models/TelemetryDruidGreatestLeastPostAggregatorAllOf';
import { TelemetryDruidGroupByRequest } from '../models/TelemetryDruidGroupByRequest';
import { TelemetryDruidGroupByRequestAllOf } from '../models/TelemetryDruidGroupByRequestAllOf';
import { TelemetryDruidHavingDimensionSelectorFilter } from '../models/TelemetryDruidHavingDimensionSelectorFilter';
import { TelemetryDruidHavingDimensionSelectorFilterAllOf } from '../models/TelemetryDruidHavingDimensionSelectorFilterAllOf';
import { TelemetryDruidHavingFilter } from '../models/TelemetryDruidHavingFilter';
import { TelemetryDruidHavingNumericFilter } from '../models/TelemetryDruidHavingNumericFilter';
import { TelemetryDruidHavingNumericFilterAllOf } from '../models/TelemetryDruidHavingNumericFilterAllOf';
import { TelemetryDruidHavingQueryFilter } from '../models/TelemetryDruidHavingQueryFilter';
import { TelemetryDruidHavingQueryFilterAllOf } from '../models/TelemetryDruidHavingQueryFilterAllOf';
import { TelemetryDruidHyperUniquePostAggregator } from '../models/TelemetryDruidHyperUniquePostAggregator';
import { TelemetryDruidHyperUniquePostAggregatorAllOf } from '../models/TelemetryDruidHyperUniquePostAggregatorAllOf';
import { TelemetryDruidIntervalResult } from '../models/TelemetryDruidIntervalResult';
import { TelemetryDruidInvertedTopNMetricSpec } from '../models/TelemetryDruidInvertedTopNMetricSpec';
import { TelemetryDruidInvertedTopNMetricSpecAllOf } from '../models/TelemetryDruidInvertedTopNMetricSpecAllOf';
import { TelemetryDruidMinMaxAggregator } from '../models/TelemetryDruidMinMaxAggregator';
import { TelemetryDruidMinMaxAggregatorAllOf } from '../models/TelemetryDruidMinMaxAggregatorAllOf';
import { TelemetryDruidNotFilter } from '../models/TelemetryDruidNotFilter';
import { TelemetryDruidNotFilterAllOf } from '../models/TelemetryDruidNotFilterAllOf';
import { TelemetryDruidNumericTopNMetricSpec } from '../models/TelemetryDruidNumericTopNMetricSpec';
import { TelemetryDruidNumericTopNMetricSpecAllOf } from '../models/TelemetryDruidNumericTopNMetricSpecAllOf';
import { TelemetryDruidOrFilter } from '../models/TelemetryDruidOrFilter';
import { TelemetryDruidOrderByColumnSpec } from '../models/TelemetryDruidOrderByColumnSpec';
import { TelemetryDruidPeriodGranularity } from '../models/TelemetryDruidPeriodGranularity';
import { TelemetryDruidPeriodGranularityAllOf } from '../models/TelemetryDruidPeriodGranularityAllOf';
import { TelemetryDruidPostAggregator } from '../models/TelemetryDruidPostAggregator';
import { TelemetryDruidQueryContext } from '../models/TelemetryDruidQueryContext';
import { TelemetryDruidQueryDataSource } from '../models/TelemetryDruidQueryDataSource';
import { TelemetryDruidQueryDataSourceAllOf } from '../models/TelemetryDruidQueryDataSourceAllOf';
import { TelemetryDruidRegexFilter } from '../models/TelemetryDruidRegexFilter';
import { TelemetryDruidRegexFilterAllOf } from '../models/TelemetryDruidRegexFilterAllOf';
import { TelemetryDruidScanRequest } from '../models/TelemetryDruidScanRequest';
import { TelemetryDruidScanRequestAllOf } from '../models/TelemetryDruidScanRequestAllOf';
import { TelemetryDruidSegmentMetadataRequest } from '../models/TelemetryDruidSegmentMetadataRequest';
import { TelemetryDruidSegmentMetadataRequestAllOf } from '../models/TelemetryDruidSegmentMetadataRequestAllOf';
import { TelemetryDruidSelectorFilter } from '../models/TelemetryDruidSelectorFilter';
import { TelemetryDruidSelectorFilterAllOf } from '../models/TelemetryDruidSelectorFilterAllOf';
import { TelemetryDruidStringFirstLastAggregator } from '../models/TelemetryDruidStringFirstLastAggregator';
import { TelemetryDruidStringFirstLastAggregatorAllOf } from '../models/TelemetryDruidStringFirstLastAggregatorAllOf';
import { TelemetryDruidSumAggregator } from '../models/TelemetryDruidSumAggregator';
import { TelemetryDruidSumAggregatorAllOf } from '../models/TelemetryDruidSumAggregatorAllOf';
import { TelemetryDruidTableDataSource } from '../models/TelemetryDruidTableDataSource';
import { TelemetryDruidTableDataSourceAllOf } from '../models/TelemetryDruidTableDataSourceAllOf';
import { TelemetryDruidTimeBoundaryRequest } from '../models/TelemetryDruidTimeBoundaryRequest';
import { TelemetryDruidTimeBoundaryRequestAllOf } from '../models/TelemetryDruidTimeBoundaryRequestAllOf';
import { TelemetryDruidTimeSeriesRequest } from '../models/TelemetryDruidTimeSeriesRequest';
import { TelemetryDruidTimeSeriesRequestAllOf } from '../models/TelemetryDruidTimeSeriesRequestAllOf';
import { TelemetryDruidTopNMetricSpec } from '../models/TelemetryDruidTopNMetricSpec';
import { TelemetryDruidTopNRequest } from '../models/TelemetryDruidTopNRequest';
import { TelemetryDruidTopNRequestAllOf } from '../models/TelemetryDruidTopNRequestAllOf';
import { TelemetryDruidUnionDataSource } from '../models/TelemetryDruidUnionDataSource';
import { TelemetryDruidUnionDataSourceAllOf } from '../models/TelemetryDruidUnionDataSourceAllOf';
import { TerminalAuditLog } from '../models/TerminalAuditLog';
import { TerminalAuditLogAllOf } from '../models/TerminalAuditLogAllOf';
import { TerminalAuditLogList } from '../models/TerminalAuditLogList';
import { TerminalAuditLogListAllOf } from '../models/TerminalAuditLogListAllOf';
import { TerminalAuditLogResponse } from '../models/TerminalAuditLogResponse';
import { TopSystem } from '../models/TopSystem';
import { TopSystemAllOf } from '../models/TopSystemAllOf';
import { TopSystemList } from '../models/TopSystemList';
import { TopSystemListAllOf } from '../models/TopSystemListAllOf';
import { TopSystemRelationship } from '../models/TopSystemRelationship';
import { TopSystemResponse } from '../models/TopSystemResponse';
import { UcsdBackupInfo } from '../models/UcsdBackupInfo';
import { UcsdBackupInfoAllOf } from '../models/UcsdBackupInfoAllOf';
import { UcsdBackupInfoList } from '../models/UcsdBackupInfoList';
import { UcsdBackupInfoListAllOf } from '../models/UcsdBackupInfoListAllOf';
import { UcsdBackupInfoResponse } from '../models/UcsdBackupInfoResponse';
import { UcsdConnectorPack } from '../models/UcsdConnectorPack';
import { UcsdConnectorPackAllOf } from '../models/UcsdConnectorPackAllOf';
import { UcsdUcsdRestoreParameters } from '../models/UcsdUcsdRestoreParameters';
import { UcsdUcsdRestoreParametersAllOf } from '../models/UcsdUcsdRestoreParametersAllOf';
import { ViewsView } from '../models/ViewsView';
import { VirtualizationAbstractVirtualMachine } from '../models/VirtualizationAbstractVirtualMachine';
import { VirtualizationAbstractVirtualMachineAllOf } from '../models/VirtualizationAbstractVirtualMachineAllOf';
import { VirtualizationCluster } from '../models/VirtualizationCluster';
import { VirtualizationClusterAllOf } from '../models/VirtualizationClusterAllOf';
import { VirtualizationComputeCapacity } from '../models/VirtualizationComputeCapacity';
import { VirtualizationComputeCapacityAllOf } from '../models/VirtualizationComputeCapacityAllOf';
import { VirtualizationCpuInfo } from '../models/VirtualizationCpuInfo';
import { VirtualizationCpuInfoAllOf } from '../models/VirtualizationCpuInfoAllOf';
import { VirtualizationDatacenter } from '../models/VirtualizationDatacenter';
import { VirtualizationDatacenterAllOf } from '../models/VirtualizationDatacenterAllOf';
import { VirtualizationDatastore } from '../models/VirtualizationDatastore';
import { VirtualizationDatastoreAllOf } from '../models/VirtualizationDatastoreAllOf';
import { VirtualizationGuestInfo } from '../models/VirtualizationGuestInfo';
import { VirtualizationGuestInfoAllOf } from '../models/VirtualizationGuestInfoAllOf';
import { VirtualizationHost } from '../models/VirtualizationHost';
import { VirtualizationHostAllOf } from '../models/VirtualizationHostAllOf';
import { VirtualizationHypervisorManager } from '../models/VirtualizationHypervisorManager';
import { VirtualizationHypervisorManagerAllOf } from '../models/VirtualizationHypervisorManagerAllOf';
import { VirtualizationMemoryCapacity } from '../models/VirtualizationMemoryCapacity';
import { VirtualizationMemoryCapacityAllOf } from '../models/VirtualizationMemoryCapacityAllOf';
import { VirtualizationProductInfo } from '../models/VirtualizationProductInfo';
import { VirtualizationProductInfoAllOf } from '../models/VirtualizationProductInfoAllOf';
import { VirtualizationRemoteDisplayInfo } from '../models/VirtualizationRemoteDisplayInfo';
import { VirtualizationRemoteDisplayInfoAllOf } from '../models/VirtualizationRemoteDisplayInfoAllOf';
import { VirtualizationResourceConsumption } from '../models/VirtualizationResourceConsumption';
import { VirtualizationResourceConsumptionAllOf } from '../models/VirtualizationResourceConsumptionAllOf';
import { VirtualizationSourceDevice } from '../models/VirtualizationSourceDevice';
import { VirtualizationSourceDeviceAllOf } from '../models/VirtualizationSourceDeviceAllOf';
import { VirtualizationStorageCapacity } from '../models/VirtualizationStorageCapacity';
import { VirtualizationStorageCapacityAllOf } from '../models/VirtualizationStorageCapacityAllOf';
import { VirtualizationVmCpuShareInfo } from '../models/VirtualizationVmCpuShareInfo';
import { VirtualizationVmCpuShareInfoAllOf } from '../models/VirtualizationVmCpuShareInfoAllOf';
import { VirtualizationVmCpuSocketInfo } from '../models/VirtualizationVmCpuSocketInfo';
import { VirtualizationVmCpuSocketInfoAllOf } from '../models/VirtualizationVmCpuSocketInfoAllOf';
import { VirtualizationVmDiskCommitInfo } from '../models/VirtualizationVmDiskCommitInfo';
import { VirtualizationVmDiskCommitInfoAllOf } from '../models/VirtualizationVmDiskCommitInfoAllOf';
import { VirtualizationVmMemoryShareInfo } from '../models/VirtualizationVmMemoryShareInfo';
import { VirtualizationVmMemoryShareInfoAllOf } from '../models/VirtualizationVmMemoryShareInfoAllOf';
import { VirtualizationVmwareCluster } from '../models/VirtualizationVmwareCluster';
import { VirtualizationVmwareClusterAllOf } from '../models/VirtualizationVmwareClusterAllOf';
import { VirtualizationVmwareClusterList } from '../models/VirtualizationVmwareClusterList';
import { VirtualizationVmwareClusterListAllOf } from '../models/VirtualizationVmwareClusterListAllOf';
import { VirtualizationVmwareClusterRelationship } from '../models/VirtualizationVmwareClusterRelationship';
import { VirtualizationVmwareClusterResponse } from '../models/VirtualizationVmwareClusterResponse';
import { VirtualizationVmwareDatacenter } from '../models/VirtualizationVmwareDatacenter';
import { VirtualizationVmwareDatacenterAllOf } from '../models/VirtualizationVmwareDatacenterAllOf';
import { VirtualizationVmwareDatacenterList } from '../models/VirtualizationVmwareDatacenterList';
import { VirtualizationVmwareDatacenterListAllOf } from '../models/VirtualizationVmwareDatacenterListAllOf';
import { VirtualizationVmwareDatacenterRelationship } from '../models/VirtualizationVmwareDatacenterRelationship';
import { VirtualizationVmwareDatacenterResponse } from '../models/VirtualizationVmwareDatacenterResponse';
import { VirtualizationVmwareDatastore } from '../models/VirtualizationVmwareDatastore';
import { VirtualizationVmwareDatastoreAllOf } from '../models/VirtualizationVmwareDatastoreAllOf';
import { VirtualizationVmwareDatastoreList } from '../models/VirtualizationVmwareDatastoreList';
import { VirtualizationVmwareDatastoreListAllOf } from '../models/VirtualizationVmwareDatastoreListAllOf';
import { VirtualizationVmwareDatastoreRelationship } from '../models/VirtualizationVmwareDatastoreRelationship';
import { VirtualizationVmwareDatastoreResponse } from '../models/VirtualizationVmwareDatastoreResponse';
import { VirtualizationVmwareHost } from '../models/VirtualizationVmwareHost';
import { VirtualizationVmwareHostAllOf } from '../models/VirtualizationVmwareHostAllOf';
import { VirtualizationVmwareHostList } from '../models/VirtualizationVmwareHostList';
import { VirtualizationVmwareHostListAllOf } from '../models/VirtualizationVmwareHostListAllOf';
import { VirtualizationVmwareHostRelationship } from '../models/VirtualizationVmwareHostRelationship';
import { VirtualizationVmwareHostResponse } from '../models/VirtualizationVmwareHostResponse';
import { VirtualizationVmwareVcenter } from '../models/VirtualizationVmwareVcenter';
import { VirtualizationVmwareVcenterList } from '../models/VirtualizationVmwareVcenterList';
import { VirtualizationVmwareVcenterListAllOf } from '../models/VirtualizationVmwareVcenterListAllOf';
import { VirtualizationVmwareVcenterRelationship } from '../models/VirtualizationVmwareVcenterRelationship';
import { VirtualizationVmwareVcenterResponse } from '../models/VirtualizationVmwareVcenterResponse';
import { VirtualizationVmwareVirtualMachine } from '../models/VirtualizationVmwareVirtualMachine';
import { VirtualizationVmwareVirtualMachineAllOf } from '../models/VirtualizationVmwareVirtualMachineAllOf';
import { VirtualizationVmwareVirtualMachineList } from '../models/VirtualizationVmwareVirtualMachineList';
import { VirtualizationVmwareVirtualMachineListAllOf } from '../models/VirtualizationVmwareVirtualMachineListAllOf';
import { VirtualizationVmwareVirtualMachineResponse } from '../models/VirtualizationVmwareVirtualMachineResponse';
import { VmediaMapping } from '../models/VmediaMapping';
import { VmediaMappingAllOf } from '../models/VmediaMappingAllOf';
import { VmediaPolicy } from '../models/VmediaPolicy';
import { VmediaPolicyAllOf } from '../models/VmediaPolicyAllOf';
import { VmediaPolicyList } from '../models/VmediaPolicyList';
import { VmediaPolicyListAllOf } from '../models/VmediaPolicyListAllOf';
import { VmediaPolicyResponse } from '../models/VmediaPolicyResponse';
import { VnicArfsSettings } from '../models/VnicArfsSettings';
import { VnicArfsSettingsAllOf } from '../models/VnicArfsSettingsAllOf';
import { VnicCdn } from '../models/VnicCdn';
import { VnicCdnAllOf } from '../models/VnicCdnAllOf';
import { VnicCompletionQueueSettings } from '../models/VnicCompletionQueueSettings';
import { VnicCompletionQueueSettingsAllOf } from '../models/VnicCompletionQueueSettingsAllOf';
import { VnicEthAdapterPolicy } from '../models/VnicEthAdapterPolicy';
import { VnicEthAdapterPolicyAllOf } from '../models/VnicEthAdapterPolicyAllOf';
import { VnicEthAdapterPolicyList } from '../models/VnicEthAdapterPolicyList';
import { VnicEthAdapterPolicyListAllOf } from '../models/VnicEthAdapterPolicyListAllOf';
import { VnicEthAdapterPolicyRelationship } from '../models/VnicEthAdapterPolicyRelationship';
import { VnicEthAdapterPolicyResponse } from '../models/VnicEthAdapterPolicyResponse';
import { VnicEthIf } from '../models/VnicEthIf';
import { VnicEthIfAllOf } from '../models/VnicEthIfAllOf';
import { VnicEthIfList } from '../models/VnicEthIfList';
import { VnicEthIfListAllOf } from '../models/VnicEthIfListAllOf';
import { VnicEthIfRelationship } from '../models/VnicEthIfRelationship';
import { VnicEthIfResponse } from '../models/VnicEthIfResponse';
import { VnicEthInterruptSettings } from '../models/VnicEthInterruptSettings';
import { VnicEthInterruptSettingsAllOf } from '../models/VnicEthInterruptSettingsAllOf';
import { VnicEthNetworkPolicy } from '../models/VnicEthNetworkPolicy';
import { VnicEthNetworkPolicyAllOf } from '../models/VnicEthNetworkPolicyAllOf';
import { VnicEthNetworkPolicyList } from '../models/VnicEthNetworkPolicyList';
import { VnicEthNetworkPolicyListAllOf } from '../models/VnicEthNetworkPolicyListAllOf';
import { VnicEthNetworkPolicyRelationship } from '../models/VnicEthNetworkPolicyRelationship';
import { VnicEthNetworkPolicyResponse } from '../models/VnicEthNetworkPolicyResponse';
import { VnicEthQosPolicy } from '../models/VnicEthQosPolicy';
import { VnicEthQosPolicyAllOf } from '../models/VnicEthQosPolicyAllOf';
import { VnicEthQosPolicyList } from '../models/VnicEthQosPolicyList';
import { VnicEthQosPolicyListAllOf } from '../models/VnicEthQosPolicyListAllOf';
import { VnicEthQosPolicyRelationship } from '../models/VnicEthQosPolicyRelationship';
import { VnicEthQosPolicyResponse } from '../models/VnicEthQosPolicyResponse';
import { VnicEthRxQueueSettings } from '../models/VnicEthRxQueueSettings';
import { VnicEthRxQueueSettingsAllOf } from '../models/VnicEthRxQueueSettingsAllOf';
import { VnicEthTxQueueSettings } from '../models/VnicEthTxQueueSettings';
import { VnicEthTxQueueSettingsAllOf } from '../models/VnicEthTxQueueSettingsAllOf';
import { VnicFcAdapterPolicy } from '../models/VnicFcAdapterPolicy';
import { VnicFcAdapterPolicyAllOf } from '../models/VnicFcAdapterPolicyAllOf';
import { VnicFcAdapterPolicyList } from '../models/VnicFcAdapterPolicyList';
import { VnicFcAdapterPolicyListAllOf } from '../models/VnicFcAdapterPolicyListAllOf';
import { VnicFcAdapterPolicyRelationship } from '../models/VnicFcAdapterPolicyRelationship';
import { VnicFcAdapterPolicyResponse } from '../models/VnicFcAdapterPolicyResponse';
import { VnicFcErrorRecoverySettings } from '../models/VnicFcErrorRecoverySettings';
import { VnicFcErrorRecoverySettingsAllOf } from '../models/VnicFcErrorRecoverySettingsAllOf';
import { VnicFcIf } from '../models/VnicFcIf';
import { VnicFcIfAllOf } from '../models/VnicFcIfAllOf';
import { VnicFcIfList } from '../models/VnicFcIfList';
import { VnicFcIfListAllOf } from '../models/VnicFcIfListAllOf';
import { VnicFcIfRelationship } from '../models/VnicFcIfRelationship';
import { VnicFcIfResponse } from '../models/VnicFcIfResponse';
import { VnicFcInterruptSettings } from '../models/VnicFcInterruptSettings';
import { VnicFcInterruptSettingsAllOf } from '../models/VnicFcInterruptSettingsAllOf';
import { VnicFcNetworkPolicy } from '../models/VnicFcNetworkPolicy';
import { VnicFcNetworkPolicyAllOf } from '../models/VnicFcNetworkPolicyAllOf';
import { VnicFcNetworkPolicyList } from '../models/VnicFcNetworkPolicyList';
import { VnicFcNetworkPolicyListAllOf } from '../models/VnicFcNetworkPolicyListAllOf';
import { VnicFcNetworkPolicyRelationship } from '../models/VnicFcNetworkPolicyRelationship';
import { VnicFcNetworkPolicyResponse } from '../models/VnicFcNetworkPolicyResponse';
import { VnicFcQosPolicy } from '../models/VnicFcQosPolicy';
import { VnicFcQosPolicyAllOf } from '../models/VnicFcQosPolicyAllOf';
import { VnicFcQosPolicyList } from '../models/VnicFcQosPolicyList';
import { VnicFcQosPolicyListAllOf } from '../models/VnicFcQosPolicyListAllOf';
import { VnicFcQosPolicyRelationship } from '../models/VnicFcQosPolicyRelationship';
import { VnicFcQosPolicyResponse } from '../models/VnicFcQosPolicyResponse';
import { VnicFcQueueSettings } from '../models/VnicFcQueueSettings';
import { VnicFcQueueSettingsAllOf } from '../models/VnicFcQueueSettingsAllOf';
import { VnicFlogiSettings } from '../models/VnicFlogiSettings';
import { VnicFlogiSettingsAllOf } from '../models/VnicFlogiSettingsAllOf';
import { VnicLanConnectivityPolicy } from '../models/VnicLanConnectivityPolicy';
import { VnicLanConnectivityPolicyAllOf } from '../models/VnicLanConnectivityPolicyAllOf';
import { VnicLanConnectivityPolicyList } from '../models/VnicLanConnectivityPolicyList';
import { VnicLanConnectivityPolicyListAllOf } from '../models/VnicLanConnectivityPolicyListAllOf';
import { VnicLanConnectivityPolicyRelationship } from '../models/VnicLanConnectivityPolicyRelationship';
import { VnicLanConnectivityPolicyResponse } from '../models/VnicLanConnectivityPolicyResponse';
import { VnicNvgreSettings } from '../models/VnicNvgreSettings';
import { VnicNvgreSettingsAllOf } from '../models/VnicNvgreSettingsAllOf';
import { VnicPlacementSettings } from '../models/VnicPlacementSettings';
import { VnicPlacementSettingsAllOf } from '../models/VnicPlacementSettingsAllOf';
import { VnicPlogiSettings } from '../models/VnicPlogiSettings';
import { VnicPlogiSettingsAllOf } from '../models/VnicPlogiSettingsAllOf';
import { VnicRoceSettings } from '../models/VnicRoceSettings';
import { VnicRoceSettingsAllOf } from '../models/VnicRoceSettingsAllOf';
import { VnicSanConnectivityPolicy } from '../models/VnicSanConnectivityPolicy';
import { VnicSanConnectivityPolicyAllOf } from '../models/VnicSanConnectivityPolicyAllOf';
import { VnicSanConnectivityPolicyList } from '../models/VnicSanConnectivityPolicyList';
import { VnicSanConnectivityPolicyListAllOf } from '../models/VnicSanConnectivityPolicyListAllOf';
import { VnicSanConnectivityPolicyRelationship } from '../models/VnicSanConnectivityPolicyRelationship';
import { VnicSanConnectivityPolicyResponse } from '../models/VnicSanConnectivityPolicyResponse';
import { VnicScsiQueueSettings } from '../models/VnicScsiQueueSettings';
import { VnicScsiQueueSettingsAllOf } from '../models/VnicScsiQueueSettingsAllOf';
import { VnicTcpOffloadSettings } from '../models/VnicTcpOffloadSettings';
import { VnicTcpOffloadSettingsAllOf } from '../models/VnicTcpOffloadSettingsAllOf';
import { VnicUsnicSettings } from '../models/VnicUsnicSettings';
import { VnicUsnicSettingsAllOf } from '../models/VnicUsnicSettingsAllOf';
import { VnicVlanSettings } from '../models/VnicVlanSettings';
import { VnicVlanSettingsAllOf } from '../models/VnicVlanSettingsAllOf';
import { VnicVmqSettings } from '../models/VnicVmqSettings';
import { VnicVmqSettingsAllOf } from '../models/VnicVmqSettingsAllOf';
import { VnicVsanSettings } from '../models/VnicVsanSettings';
import { VnicVsanSettingsAllOf } from '../models/VnicVsanSettingsAllOf';
import { VnicVxlanSettings } from '../models/VnicVxlanSettings';
import { VnicVxlanSettingsAllOf } from '../models/VnicVxlanSettingsAllOf';
import { WorkflowAbstractWorkerTask } from '../models/WorkflowAbstractWorkerTask';
import { WorkflowAbstractWorkerTaskAllOf } from '../models/WorkflowAbstractWorkerTaskAllOf';
import { WorkflowApi } from '../models/WorkflowApi';
import { WorkflowApiAllOf } from '../models/WorkflowApiAllOf';
import { WorkflowArrayDataType } from '../models/WorkflowArrayDataType';
import { WorkflowArrayDataTypeAllOf } from '../models/WorkflowArrayDataTypeAllOf';
import { WorkflowArrayItem } from '../models/WorkflowArrayItem';
import { WorkflowBaseDataType } from '../models/WorkflowBaseDataType';
import { WorkflowBaseDataTypeAllOf } from '../models/WorkflowBaseDataTypeAllOf';
import { WorkflowBatchApiExecutor } from '../models/WorkflowBatchApiExecutor';
import { WorkflowBatchApiExecutorAllOf } from '../models/WorkflowBatchApiExecutorAllOf';
import { WorkflowBatchApiExecutorList } from '../models/WorkflowBatchApiExecutorList';
import { WorkflowBatchApiExecutorListAllOf } from '../models/WorkflowBatchApiExecutorListAllOf';
import { WorkflowBatchApiExecutorResponse } from '../models/WorkflowBatchApiExecutorResponse';
import { WorkflowBuildTaskMeta } from '../models/WorkflowBuildTaskMeta';
import { WorkflowBuildTaskMetaAllOf } from '../models/WorkflowBuildTaskMetaAllOf';
import { WorkflowBuildTaskMetaList } from '../models/WorkflowBuildTaskMetaList';
import { WorkflowBuildTaskMetaListAllOf } from '../models/WorkflowBuildTaskMetaListAllOf';
import { WorkflowBuildTaskMetaOwner } from '../models/WorkflowBuildTaskMetaOwner';
import { WorkflowBuildTaskMetaOwnerAllOf } from '../models/WorkflowBuildTaskMetaOwnerAllOf';
import { WorkflowBuildTaskMetaOwnerList } from '../models/WorkflowBuildTaskMetaOwnerList';
import { WorkflowBuildTaskMetaOwnerListAllOf } from '../models/WorkflowBuildTaskMetaOwnerListAllOf';
import { WorkflowBuildTaskMetaOwnerResponse } from '../models/WorkflowBuildTaskMetaOwnerResponse';
import { WorkflowBuildTaskMetaResponse } from '../models/WorkflowBuildTaskMetaResponse';
import { WorkflowCatalog } from '../models/WorkflowCatalog';
import { WorkflowCatalogAllOf } from '../models/WorkflowCatalogAllOf';
import { WorkflowCatalogList } from '../models/WorkflowCatalogList';
import { WorkflowCatalogListAllOf } from '../models/WorkflowCatalogListAllOf';
import { WorkflowCatalogRelationship } from '../models/WorkflowCatalogRelationship';
import { WorkflowCatalogResponse } from '../models/WorkflowCatalogResponse';
import { WorkflowCliCommand } from '../models/WorkflowCliCommand';
import { WorkflowCliCommandAllOf } from '../models/WorkflowCliCommandAllOf';
import { WorkflowConstraints } from '../models/WorkflowConstraints';
import { WorkflowConstraintsAllOf } from '../models/WorkflowConstraintsAllOf';
import { WorkflowControlTask } from '../models/WorkflowControlTask';
import { WorkflowCustomDataProperty } from '../models/WorkflowCustomDataProperty';
import { WorkflowCustomDataPropertyAllOf } from '../models/WorkflowCustomDataPropertyAllOf';
import { WorkflowCustomDataType } from '../models/WorkflowCustomDataType';
import { WorkflowCustomDataTypeAllOf } from '../models/WorkflowCustomDataTypeAllOf';
import { WorkflowCustomDataTypeDefinition } from '../models/WorkflowCustomDataTypeDefinition';
import { WorkflowCustomDataTypeDefinitionAllOf } from '../models/WorkflowCustomDataTypeDefinitionAllOf';
import { WorkflowCustomDataTypeDefinitionList } from '../models/WorkflowCustomDataTypeDefinitionList';
import { WorkflowCustomDataTypeDefinitionListAllOf } from '../models/WorkflowCustomDataTypeDefinitionListAllOf';
import { WorkflowCustomDataTypeDefinitionResponse } from '../models/WorkflowCustomDataTypeDefinitionResponse';
import { WorkflowDecisionCase } from '../models/WorkflowDecisionCase';
import { WorkflowDecisionCaseAllOf } from '../models/WorkflowDecisionCaseAllOf';
import { WorkflowDecisionTask } from '../models/WorkflowDecisionTask';
import { WorkflowDecisionTaskAllOf } from '../models/WorkflowDecisionTaskAllOf';
import { WorkflowDefaultValue } from '../models/WorkflowDefaultValue';
import { WorkflowDefaultValueAllOf } from '../models/WorkflowDefaultValueAllOf';
import { WorkflowDynamicWorkflowActionTaskList } from '../models/WorkflowDynamicWorkflowActionTaskList';
import { WorkflowDynamicWorkflowActionTaskListAllOf } from '../models/WorkflowDynamicWorkflowActionTaskListAllOf';
import { WorkflowEndTask } from '../models/WorkflowEndTask';
import { WorkflowEnumEntry } from '../models/WorkflowEnumEntry';
import { WorkflowEnumEntryAllOf } from '../models/WorkflowEnumEntryAllOf';
import { WorkflowExpectPrompt } from '../models/WorkflowExpectPrompt';
import { WorkflowExpectPromptAllOf } from '../models/WorkflowExpectPromptAllOf';
import { WorkflowFailureEndTask } from '../models/WorkflowFailureEndTask';
import { WorkflowInternalProperties } from '../models/WorkflowInternalProperties';
import { WorkflowInternalPropertiesAllOf } from '../models/WorkflowInternalPropertiesAllOf';
import { WorkflowMessage } from '../models/WorkflowMessage';
import { WorkflowMessageAllOf } from '../models/WorkflowMessageAllOf';
import { WorkflowMoReferenceDataType } from '../models/WorkflowMoReferenceDataType';
import { WorkflowMoReferenceDataTypeAllOf } from '../models/WorkflowMoReferenceDataTypeAllOf';
import { WorkflowMoReferenceProperty } from '../models/WorkflowMoReferenceProperty';
import { WorkflowMoReferencePropertyAllOf } from '../models/WorkflowMoReferencePropertyAllOf';
import { WorkflowPendingDynamicWorkflowInfo } from '../models/WorkflowPendingDynamicWorkflowInfo';
import { WorkflowPendingDynamicWorkflowInfoAllOf } from '../models/WorkflowPendingDynamicWorkflowInfoAllOf';
import { WorkflowPendingDynamicWorkflowInfoList } from '../models/WorkflowPendingDynamicWorkflowInfoList';
import { WorkflowPendingDynamicWorkflowInfoListAllOf } from '../models/WorkflowPendingDynamicWorkflowInfoListAllOf';
import { WorkflowPendingDynamicWorkflowInfoRelationship } from '../models/WorkflowPendingDynamicWorkflowInfoRelationship';
import { WorkflowPendingDynamicWorkflowInfoResponse } from '../models/WorkflowPendingDynamicWorkflowInfoResponse';
import { WorkflowPrimitiveArrayItem } from '../models/WorkflowPrimitiveArrayItem';
import { WorkflowPrimitiveArrayItemAllOf } from '../models/WorkflowPrimitiveArrayItemAllOf';
import { WorkflowPrimitiveDataProperty } from '../models/WorkflowPrimitiveDataProperty';
import { WorkflowPrimitiveDataPropertyAllOf } from '../models/WorkflowPrimitiveDataPropertyAllOf';
import { WorkflowPrimitiveDataType } from '../models/WorkflowPrimitiveDataType';
import { WorkflowPrimitiveDataTypeAllOf } from '../models/WorkflowPrimitiveDataTypeAllOf';
import { WorkflowProperties } from '../models/WorkflowProperties';
import { WorkflowPropertiesAllOf } from '../models/WorkflowPropertiesAllOf';
import { WorkflowStartTask } from '../models/WorkflowStartTask';
import { WorkflowStartTaskAllOf } from '../models/WorkflowStartTaskAllOf';
import { WorkflowSubWorkflowTask } from '../models/WorkflowSubWorkflowTask';
import { WorkflowSubWorkflowTaskAllOf } from '../models/WorkflowSubWorkflowTaskAllOf';
import { WorkflowSuccessEndTask } from '../models/WorkflowSuccessEndTask';
import { WorkflowTargetDataType } from '../models/WorkflowTargetDataType';
import { WorkflowTargetDataTypeAllOf } from '../models/WorkflowTargetDataTypeAllOf';
import { WorkflowTargetProperty } from '../models/WorkflowTargetProperty';
import { WorkflowTargetPropertyAllOf } from '../models/WorkflowTargetPropertyAllOf';
import { WorkflowTaskConstraints } from '../models/WorkflowTaskConstraints';
import { WorkflowTaskConstraintsAllOf } from '../models/WorkflowTaskConstraintsAllOf';
import { WorkflowTaskDefinition } from '../models/WorkflowTaskDefinition';
import { WorkflowTaskDefinitionAllOf } from '../models/WorkflowTaskDefinitionAllOf';
import { WorkflowTaskDefinitionList } from '../models/WorkflowTaskDefinitionList';
import { WorkflowTaskDefinitionListAllOf } from '../models/WorkflowTaskDefinitionListAllOf';
import { WorkflowTaskDefinitionRelationship } from '../models/WorkflowTaskDefinitionRelationship';
import { WorkflowTaskDefinitionResponse } from '../models/WorkflowTaskDefinitionResponse';
import { WorkflowTaskInfo } from '../models/WorkflowTaskInfo';
import { WorkflowTaskInfoAllOf } from '../models/WorkflowTaskInfoAllOf';
import { WorkflowTaskInfoList } from '../models/WorkflowTaskInfoList';
import { WorkflowTaskInfoListAllOf } from '../models/WorkflowTaskInfoListAllOf';
import { WorkflowTaskInfoRelationship } from '../models/WorkflowTaskInfoRelationship';
import { WorkflowTaskInfoResponse } from '../models/WorkflowTaskInfoResponse';
import { WorkflowTaskMeta } from '../models/WorkflowTaskMeta';
import { WorkflowTaskMetaAllOf } from '../models/WorkflowTaskMetaAllOf';
import { WorkflowTaskMetaList } from '../models/WorkflowTaskMetaList';
import { WorkflowTaskMetaListAllOf } from '../models/WorkflowTaskMetaListAllOf';
import { WorkflowTaskMetaResponse } from '../models/WorkflowTaskMetaResponse';
import { WorkflowTaskRetryInfo } from '../models/WorkflowTaskRetryInfo';
import { WorkflowTaskRetryInfoAllOf } from '../models/WorkflowTaskRetryInfoAllOf';
import { WorkflowValidationError } from '../models/WorkflowValidationError';
import { WorkflowValidationErrorAllOf } from '../models/WorkflowValidationErrorAllOf';
import { WorkflowValidationInformation } from '../models/WorkflowValidationInformation';
import { WorkflowValidationInformationAllOf } from '../models/WorkflowValidationInformationAllOf';
import { WorkflowWaitTask } from '../models/WorkflowWaitTask';
import { WorkflowWaitTaskAllOf } from '../models/WorkflowWaitTaskAllOf';
import { WorkflowWaitTaskPrompt } from '../models/WorkflowWaitTaskPrompt';
import { WorkflowWaitTaskPromptAllOf } from '../models/WorkflowWaitTaskPromptAllOf';
import { WorkflowWebApi } from '../models/WorkflowWebApi';
import { WorkflowWebApiAllOf } from '../models/WorkflowWebApiAllOf';
import { WorkflowWorkerTask } from '../models/WorkflowWorkerTask';
import { WorkflowWorkerTaskAllOf } from '../models/WorkflowWorkerTaskAllOf';
import { WorkflowWorkflowDefinition } from '../models/WorkflowWorkflowDefinition';
import { WorkflowWorkflowDefinitionAllOf } from '../models/WorkflowWorkflowDefinitionAllOf';
import { WorkflowWorkflowDefinitionList } from '../models/WorkflowWorkflowDefinitionList';
import { WorkflowWorkflowDefinitionListAllOf } from '../models/WorkflowWorkflowDefinitionListAllOf';
import { WorkflowWorkflowDefinitionRelationship } from '../models/WorkflowWorkflowDefinitionRelationship';
import { WorkflowWorkflowDefinitionResponse } from '../models/WorkflowWorkflowDefinitionResponse';
import { WorkflowWorkflowInfo } from '../models/WorkflowWorkflowInfo';
import { WorkflowWorkflowInfoAllOf } from '../models/WorkflowWorkflowInfoAllOf';
import { WorkflowWorkflowInfoList } from '../models/WorkflowWorkflowInfoList';
import { WorkflowWorkflowInfoListAllOf } from '../models/WorkflowWorkflowInfoListAllOf';
import { WorkflowWorkflowInfoProperties } from '../models/WorkflowWorkflowInfoProperties';
import { WorkflowWorkflowInfoPropertiesAllOf } from '../models/WorkflowWorkflowInfoPropertiesAllOf';
import { WorkflowWorkflowInfoRelationship } from '../models/WorkflowWorkflowInfoRelationship';
import { WorkflowWorkflowInfoResponse } from '../models/WorkflowWorkflowInfoResponse';
import { WorkflowWorkflowMeta } from '../models/WorkflowWorkflowMeta';
import { WorkflowWorkflowMetaAllOf } from '../models/WorkflowWorkflowMetaAllOf';
import { WorkflowWorkflowMetaList } from '../models/WorkflowWorkflowMetaList';
import { WorkflowWorkflowMetaListAllOf } from '../models/WorkflowWorkflowMetaListAllOf';
import { WorkflowWorkflowMetaResponse } from '../models/WorkflowWorkflowMetaResponse';
import { WorkflowWorkflowProperties } from '../models/WorkflowWorkflowProperties';
import { WorkflowWorkflowPropertiesAllOf } from '../models/WorkflowWorkflowPropertiesAllOf';
import { WorkflowWorkflowTask } from '../models/WorkflowWorkflowTask';
import { WorkflowWorkflowTaskAllOf } from '../models/WorkflowWorkflowTaskAllOf';
import { WorkflowXmlApi } from '../models/WorkflowXmlApi';
import { X509Certificate } from '../models/X509Certificate';
import { X509CertificateAllOf } from '../models/X509CertificateAllOf';

import { ObservableAaaApi } from "./ObservableAPI";
import { AaaApiRequestFactory, AaaApiResponseProcessor} from "../apis/AaaApi";

export interface AaaApiGetAaaAuditRecordByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AaaApigetAaaAuditRecordByMoid
     */
    moid: string
}

export interface AaaApiGetAaaAuditRecordListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AaaApigetAaaAuditRecordList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AaaApigetAaaAuditRecordList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AaaApigetAaaAuditRecordList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AaaApigetAaaAuditRecordList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AaaApigetAaaAuditRecordList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AaaApigetAaaAuditRecordList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AaaApigetAaaAuditRecordList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AaaApigetAaaAuditRecordList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AaaApigetAaaAuditRecordList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AaaApigetAaaAuditRecordList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AaaApigetAaaAuditRecordList
     */
    tags?: string
}


export class ObjectAaaApi {
    private api: ObservableAaaApi

    public constructor(configuration: Configuration, requestFactory?: AaaApiRequestFactory, responseProcessor?: AaaApiResponseProcessor) {
        this.api = new ObservableAaaApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'aaa.AuditRecord' resource.
     * @param param the request object
     */
    public getAaaAuditRecordByMoid(param: AaaApiGetAaaAuditRecordByMoidRequest, options?: Configuration): Promise<AaaAuditRecord> {
        return this.api.getAaaAuditRecordByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'aaa.AuditRecord' resource.
     * @param param the request object
     */
    public getAaaAuditRecordList(param: AaaApiGetAaaAuditRecordListRequest, options?: Configuration): Promise<AaaAuditRecordResponse> {
        return this.api.getAaaAuditRecordList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableAdapterApi } from "./ObservableAPI";
import { AdapterApiRequestFactory, AdapterApiResponseProcessor} from "../apis/AdapterApi";

export interface AdapterApiCreateAdapterConfigPolicyRequest {
    /**
     * The &#39;adapter.ConfigPolicy&#39; resource to create.
     * @type AdapterConfigPolicy
     * @memberof AdapterApicreateAdapterConfigPolicy
     */
    adapterConfigPolicy: AdapterConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AdapterApicreateAdapterConfigPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof AdapterApicreateAdapterConfigPolicy
     */
    ifNoneMatch?: string
}

export interface AdapterApiDeleteAdapterConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AdapterApideleteAdapterConfigPolicy
     */
    moid: string
}

export interface AdapterApiGetAdapterConfigPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AdapterApigetAdapterConfigPolicyByMoid
     */
    moid: string
}

export interface AdapterApiGetAdapterConfigPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AdapterApigetAdapterConfigPolicyList
     */
    tags?: string
}

export interface AdapterApiGetAdapterExtEthInterfaceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AdapterApigetAdapterExtEthInterfaceByMoid
     */
    moid: string
}

export interface AdapterApiGetAdapterExtEthInterfaceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AdapterApigetAdapterExtEthInterfaceList
     */
    tags?: string
}

export interface AdapterApiGetAdapterHostEthInterfaceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AdapterApigetAdapterHostEthInterfaceByMoid
     */
    moid: string
}

export interface AdapterApiGetAdapterHostEthInterfaceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AdapterApigetAdapterHostEthInterfaceList
     */
    tags?: string
}

export interface AdapterApiGetAdapterHostFcInterfaceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AdapterApigetAdapterHostFcInterfaceByMoid
     */
    moid: string
}

export interface AdapterApiGetAdapterHostFcInterfaceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AdapterApigetAdapterHostFcInterfaceList
     */
    tags?: string
}

export interface AdapterApiGetAdapterHostIscsiInterfaceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AdapterApigetAdapterHostIscsiInterfaceByMoid
     */
    moid: string
}

export interface AdapterApiGetAdapterHostIscsiInterfaceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AdapterApigetAdapterHostIscsiInterfaceList
     */
    tags?: string
}

export interface AdapterApiGetAdapterUnitByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AdapterApigetAdapterUnitByMoid
     */
    moid: string
}

export interface AdapterApiGetAdapterUnitListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AdapterApigetAdapterUnitList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AdapterApigetAdapterUnitList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AdapterApigetAdapterUnitList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AdapterApigetAdapterUnitList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AdapterApigetAdapterUnitList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AdapterApigetAdapterUnitList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AdapterApigetAdapterUnitList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AdapterApigetAdapterUnitList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AdapterApigetAdapterUnitList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AdapterApigetAdapterUnitList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AdapterApigetAdapterUnitList
     */
    tags?: string
}

export interface AdapterApiPatchAdapterConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AdapterApipatchAdapterConfigPolicy
     */
    moid: string
    /**
     * The &#39;adapter.ConfigPolicy&#39; resource to update.
     * @type AdapterConfigPolicy
     * @memberof AdapterApipatchAdapterConfigPolicy
     */
    adapterConfigPolicy: AdapterConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AdapterApipatchAdapterConfigPolicy
     */
    ifMatch?: string
}

export interface AdapterApiUpdateAdapterConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AdapterApiupdateAdapterConfigPolicy
     */
    moid: string
    /**
     * The &#39;adapter.ConfigPolicy&#39; resource to update.
     * @type AdapterConfigPolicy
     * @memberof AdapterApiupdateAdapterConfigPolicy
     */
    adapterConfigPolicy: AdapterConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AdapterApiupdateAdapterConfigPolicy
     */
    ifMatch?: string
}


export class ObjectAdapterApi {
    private api: ObservableAdapterApi

    public constructor(configuration: Configuration, requestFactory?: AdapterApiRequestFactory, responseProcessor?: AdapterApiResponseProcessor) {
        this.api = new ObservableAdapterApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'adapter.ConfigPolicy' resource.
     * @param param the request object
     */
    public createAdapterConfigPolicy(param: AdapterApiCreateAdapterConfigPolicyRequest, options?: Configuration): Promise<AdapterConfigPolicy> {
        return this.api.createAdapterConfigPolicy(param.adapterConfigPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'adapter.ConfigPolicy' resource.
     * @param param the request object
     */
    public deleteAdapterConfigPolicy(param: AdapterApiDeleteAdapterConfigPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteAdapterConfigPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.ConfigPolicy' resource.
     * @param param the request object
     */
    public getAdapterConfigPolicyByMoid(param: AdapterApiGetAdapterConfigPolicyByMoidRequest, options?: Configuration): Promise<AdapterConfigPolicy> {
        return this.api.getAdapterConfigPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.ConfigPolicy' resource.
     * @param param the request object
     */
    public getAdapterConfigPolicyList(param: AdapterApiGetAdapterConfigPolicyListRequest, options?: Configuration): Promise<AdapterConfigPolicyResponse> {
        return this.api.getAdapterConfigPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.ExtEthInterface' resource.
     * @param param the request object
     */
    public getAdapterExtEthInterfaceByMoid(param: AdapterApiGetAdapterExtEthInterfaceByMoidRequest, options?: Configuration): Promise<AdapterExtEthInterface> {
        return this.api.getAdapterExtEthInterfaceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.ExtEthInterface' resource.
     * @param param the request object
     */
    public getAdapterExtEthInterfaceList(param: AdapterApiGetAdapterExtEthInterfaceListRequest, options?: Configuration): Promise<AdapterExtEthInterfaceResponse> {
        return this.api.getAdapterExtEthInterfaceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.HostEthInterface' resource.
     * @param param the request object
     */
    public getAdapterHostEthInterfaceByMoid(param: AdapterApiGetAdapterHostEthInterfaceByMoidRequest, options?: Configuration): Promise<AdapterHostEthInterface> {
        return this.api.getAdapterHostEthInterfaceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.HostEthInterface' resource.
     * @param param the request object
     */
    public getAdapterHostEthInterfaceList(param: AdapterApiGetAdapterHostEthInterfaceListRequest, options?: Configuration): Promise<AdapterHostEthInterfaceResponse> {
        return this.api.getAdapterHostEthInterfaceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.HostFcInterface' resource.
     * @param param the request object
     */
    public getAdapterHostFcInterfaceByMoid(param: AdapterApiGetAdapterHostFcInterfaceByMoidRequest, options?: Configuration): Promise<AdapterHostFcInterface> {
        return this.api.getAdapterHostFcInterfaceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.HostFcInterface' resource.
     * @param param the request object
     */
    public getAdapterHostFcInterfaceList(param: AdapterApiGetAdapterHostFcInterfaceListRequest, options?: Configuration): Promise<AdapterHostFcInterfaceResponse> {
        return this.api.getAdapterHostFcInterfaceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.HostIscsiInterface' resource.
     * @param param the request object
     */
    public getAdapterHostIscsiInterfaceByMoid(param: AdapterApiGetAdapterHostIscsiInterfaceByMoidRequest, options?: Configuration): Promise<AdapterHostIscsiInterface> {
        return this.api.getAdapterHostIscsiInterfaceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.HostIscsiInterface' resource.
     * @param param the request object
     */
    public getAdapterHostIscsiInterfaceList(param: AdapterApiGetAdapterHostIscsiInterfaceListRequest, options?: Configuration): Promise<AdapterHostIscsiInterfaceResponse> {
        return this.api.getAdapterHostIscsiInterfaceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.Unit' resource.
     * @param param the request object
     */
    public getAdapterUnitByMoid(param: AdapterApiGetAdapterUnitByMoidRequest, options?: Configuration): Promise<AdapterUnit> {
        return this.api.getAdapterUnitByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'adapter.Unit' resource.
     * @param param the request object
     */
    public getAdapterUnitList(param: AdapterApiGetAdapterUnitListRequest, options?: Configuration): Promise<AdapterUnitResponse> {
        return this.api.getAdapterUnitList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'adapter.ConfigPolicy' resource.
     * @param param the request object
     */
    public patchAdapterConfigPolicy(param: AdapterApiPatchAdapterConfigPolicyRequest, options?: Configuration): Promise<AdapterConfigPolicy> {
        return this.api.patchAdapterConfigPolicy(param.moid, param.adapterConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'adapter.ConfigPolicy' resource.
     * @param param the request object
     */
    public updateAdapterConfigPolicy(param: AdapterApiUpdateAdapterConfigPolicyRequest, options?: Configuration): Promise<AdapterConfigPolicy> {
        return this.api.updateAdapterConfigPolicy(param.moid, param.adapterConfigPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableApplianceApi } from "./ObservableAPI";
import { ApplianceApiRequestFactory, ApplianceApiResponseProcessor} from "../apis/ApplianceApi";

export interface ApplianceApiCreateApplianceBackupRequest {
    /**
     * The &#39;appliance.Backup&#39; resource to create.
     * @type ApplianceBackup
     * @memberof ApplianceApicreateApplianceBackup
     */
    applianceBackup: ApplianceBackup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApicreateApplianceBackup
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ApplianceApicreateApplianceBackup
     */
    ifNoneMatch?: string
}

export interface ApplianceApiCreateApplianceBackupPolicyRequest {
    /**
     * The &#39;appliance.BackupPolicy&#39; resource to create.
     * @type ApplianceBackupPolicy
     * @memberof ApplianceApicreateApplianceBackupPolicy
     */
    applianceBackupPolicy: ApplianceBackupPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApicreateApplianceBackupPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ApplianceApicreateApplianceBackupPolicy
     */
    ifNoneMatch?: string
}

export interface ApplianceApiCreateApplianceDataExportPolicyRequest {
    /**
     * The &#39;appliance.DataExportPolicy&#39; resource to create.
     * @type ApplianceDataExportPolicy
     * @memberof ApplianceApicreateApplianceDataExportPolicy
     */
    applianceDataExportPolicy: ApplianceDataExportPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApicreateApplianceDataExportPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ApplianceApicreateApplianceDataExportPolicy
     */
    ifNoneMatch?: string
}

export interface ApplianceApiCreateApplianceDeviceClaimRequest {
    /**
     * The &#39;appliance.DeviceClaim&#39; resource to create.
     * @type ApplianceDeviceClaim
     * @memberof ApplianceApicreateApplianceDeviceClaim
     */
    applianceDeviceClaim: ApplianceDeviceClaim
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApicreateApplianceDeviceClaim
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ApplianceApicreateApplianceDeviceClaim
     */
    ifNoneMatch?: string
}

export interface ApplianceApiCreateApplianceDiagSettingRequest {
    /**
     * The &#39;appliance.DiagSetting&#39; resource to create.
     * @type ApplianceDiagSetting
     * @memberof ApplianceApicreateApplianceDiagSetting
     */
    applianceDiagSetting: ApplianceDiagSetting
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApicreateApplianceDiagSetting
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ApplianceApicreateApplianceDiagSetting
     */
    ifNoneMatch?: string
}

export interface ApplianceApiCreateApplianceRestoreRequest {
    /**
     * The &#39;appliance.Restore&#39; resource to create.
     * @type ApplianceRestore
     * @memberof ApplianceApicreateApplianceRestore
     */
    applianceRestore: ApplianceRestore
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApicreateApplianceRestore
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ApplianceApicreateApplianceRestore
     */
    ifNoneMatch?: string
}

export interface ApplianceApiDeleteApplianceBackupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApideleteApplianceBackup
     */
    moid: string
}

export interface ApplianceApiDeleteApplianceRestoreRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApideleteApplianceRestore
     */
    moid: string
}

export interface ApplianceApiGetApplianceBackupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceBackupByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceBackupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceBackupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceBackupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceBackupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceBackupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceBackupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceBackupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceBackupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceBackupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceBackupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceBackupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceBackupList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceBackupPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceBackupPolicyByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceBackupPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceBackupPolicyList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceCertificateSettingByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceCertificateSettingByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceCertificateSettingListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceCertificateSettingList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceDataExportPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceDataExportPolicyByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceDataExportPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceDataExportPolicyList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceDeviceClaimByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceDeviceClaimByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceDeviceClaimListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceDeviceClaimList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceDiagSettingByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceDiagSettingByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceDiagSettingListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceDiagSettingList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceImageBundleByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceImageBundleByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceImageBundleListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceImageBundleList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceNodeInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceNodeInfoByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceNodeInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceNodeInfoList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceReleaseNoteByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceReleaseNoteByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceReleaseNoteListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceReleaseNoteList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceRestoreByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceRestoreByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceRestoreListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceRestoreList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceRestoreList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceRestoreList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceRestoreList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceRestoreList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceRestoreList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceRestoreList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceRestoreList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceRestoreList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceRestoreList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceRestoreList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceSetupInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceSetupInfoByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceSetupInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceSetupInfoList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceSystemInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceSystemInfoByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceSystemInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceSystemInfoList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceUpgradeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradeByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceUpgradeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradeList
     */
    tags?: string
}

export interface ApplianceApiGetApplianceUpgradePolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradePolicyByMoid
     */
    moid: string
}

export interface ApplianceApiGetApplianceUpgradePolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ApplianceApigetApplianceUpgradePolicyList
     */
    tags?: string
}

export interface ApplianceApiPatchApplianceBackupPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApipatchApplianceBackupPolicy
     */
    moid: string
    /**
     * The &#39;appliance.BackupPolicy&#39; resource to update.
     * @type ApplianceBackupPolicy
     * @memberof ApplianceApipatchApplianceBackupPolicy
     */
    applianceBackupPolicy: ApplianceBackupPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApipatchApplianceBackupPolicy
     */
    ifMatch?: string
}

export interface ApplianceApiPatchApplianceCertificateSettingRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApipatchApplianceCertificateSetting
     */
    moid: string
    /**
     * The &#39;appliance.CertificateSetting&#39; resource to update.
     * @type ApplianceCertificateSetting
     * @memberof ApplianceApipatchApplianceCertificateSetting
     */
    applianceCertificateSetting: ApplianceCertificateSetting
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApipatchApplianceCertificateSetting
     */
    ifMatch?: string
}

export interface ApplianceApiPatchApplianceDataExportPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApipatchApplianceDataExportPolicy
     */
    moid: string
    /**
     * The &#39;appliance.DataExportPolicy&#39; resource to update.
     * @type ApplianceDataExportPolicy
     * @memberof ApplianceApipatchApplianceDataExportPolicy
     */
    applianceDataExportPolicy: ApplianceDataExportPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApipatchApplianceDataExportPolicy
     */
    ifMatch?: string
}

export interface ApplianceApiPatchApplianceDiagSettingRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApipatchApplianceDiagSetting
     */
    moid: string
    /**
     * The &#39;appliance.DiagSetting&#39; resource to update.
     * @type ApplianceDiagSetting
     * @memberof ApplianceApipatchApplianceDiagSetting
     */
    applianceDiagSetting: ApplianceDiagSetting
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApipatchApplianceDiagSetting
     */
    ifMatch?: string
}

export interface ApplianceApiPatchApplianceSetupInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApipatchApplianceSetupInfo
     */
    moid: string
    /**
     * The &#39;appliance.SetupInfo&#39; resource to update.
     * @type ApplianceSetupInfo
     * @memberof ApplianceApipatchApplianceSetupInfo
     */
    applianceSetupInfo: ApplianceSetupInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApipatchApplianceSetupInfo
     */
    ifMatch?: string
}

export interface ApplianceApiPatchApplianceUpgradeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApipatchApplianceUpgrade
     */
    moid: string
    /**
     * The &#39;appliance.Upgrade&#39; resource to update.
     * @type ApplianceUpgrade
     * @memberof ApplianceApipatchApplianceUpgrade
     */
    applianceUpgrade: ApplianceUpgrade
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApipatchApplianceUpgrade
     */
    ifMatch?: string
}

export interface ApplianceApiPatchApplianceUpgradePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApipatchApplianceUpgradePolicy
     */
    moid: string
    /**
     * The &#39;appliance.UpgradePolicy&#39; resource to update.
     * @type ApplianceUpgradePolicy
     * @memberof ApplianceApipatchApplianceUpgradePolicy
     */
    applianceUpgradePolicy: ApplianceUpgradePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApipatchApplianceUpgradePolicy
     */
    ifMatch?: string
}

export interface ApplianceApiUpdateApplianceBackupPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApiupdateApplianceBackupPolicy
     */
    moid: string
    /**
     * The &#39;appliance.BackupPolicy&#39; resource to update.
     * @type ApplianceBackupPolicy
     * @memberof ApplianceApiupdateApplianceBackupPolicy
     */
    applianceBackupPolicy: ApplianceBackupPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApiupdateApplianceBackupPolicy
     */
    ifMatch?: string
}

export interface ApplianceApiUpdateApplianceCertificateSettingRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApiupdateApplianceCertificateSetting
     */
    moid: string
    /**
     * The &#39;appliance.CertificateSetting&#39; resource to update.
     * @type ApplianceCertificateSetting
     * @memberof ApplianceApiupdateApplianceCertificateSetting
     */
    applianceCertificateSetting: ApplianceCertificateSetting
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApiupdateApplianceCertificateSetting
     */
    ifMatch?: string
}

export interface ApplianceApiUpdateApplianceDataExportPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApiupdateApplianceDataExportPolicy
     */
    moid: string
    /**
     * The &#39;appliance.DataExportPolicy&#39; resource to update.
     * @type ApplianceDataExportPolicy
     * @memberof ApplianceApiupdateApplianceDataExportPolicy
     */
    applianceDataExportPolicy: ApplianceDataExportPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApiupdateApplianceDataExportPolicy
     */
    ifMatch?: string
}

export interface ApplianceApiUpdateApplianceDiagSettingRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApiupdateApplianceDiagSetting
     */
    moid: string
    /**
     * The &#39;appliance.DiagSetting&#39; resource to update.
     * @type ApplianceDiagSetting
     * @memberof ApplianceApiupdateApplianceDiagSetting
     */
    applianceDiagSetting: ApplianceDiagSetting
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApiupdateApplianceDiagSetting
     */
    ifMatch?: string
}

export interface ApplianceApiUpdateApplianceSetupInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApiupdateApplianceSetupInfo
     */
    moid: string
    /**
     * The &#39;appliance.SetupInfo&#39; resource to update.
     * @type ApplianceSetupInfo
     * @memberof ApplianceApiupdateApplianceSetupInfo
     */
    applianceSetupInfo: ApplianceSetupInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApiupdateApplianceSetupInfo
     */
    ifMatch?: string
}

export interface ApplianceApiUpdateApplianceUpgradeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApiupdateApplianceUpgrade
     */
    moid: string
    /**
     * The &#39;appliance.Upgrade&#39; resource to update.
     * @type ApplianceUpgrade
     * @memberof ApplianceApiupdateApplianceUpgrade
     */
    applianceUpgrade: ApplianceUpgrade
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApiupdateApplianceUpgrade
     */
    ifMatch?: string
}

export interface ApplianceApiUpdateApplianceUpgradePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ApplianceApiupdateApplianceUpgradePolicy
     */
    moid: string
    /**
     * The &#39;appliance.UpgradePolicy&#39; resource to update.
     * @type ApplianceUpgradePolicy
     * @memberof ApplianceApiupdateApplianceUpgradePolicy
     */
    applianceUpgradePolicy: ApplianceUpgradePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ApplianceApiupdateApplianceUpgradePolicy
     */
    ifMatch?: string
}


export class ObjectApplianceApi {
    private api: ObservableApplianceApi

    public constructor(configuration: Configuration, requestFactory?: ApplianceApiRequestFactory, responseProcessor?: ApplianceApiResponseProcessor) {
        this.api = new ObservableApplianceApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'appliance.Backup' resource.
     * @param param the request object
     */
    public createApplianceBackup(param: ApplianceApiCreateApplianceBackupRequest, options?: Configuration): Promise<ApplianceBackup> {
        return this.api.createApplianceBackup(param.applianceBackup, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'appliance.BackupPolicy' resource.
     * @param param the request object
     */
    public createApplianceBackupPolicy(param: ApplianceApiCreateApplianceBackupPolicyRequest, options?: Configuration): Promise<ApplianceBackupPolicy> {
        return this.api.createApplianceBackupPolicy(param.applianceBackupPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'appliance.DataExportPolicy' resource.
     * @param param the request object
     */
    public createApplianceDataExportPolicy(param: ApplianceApiCreateApplianceDataExportPolicyRequest, options?: Configuration): Promise<ApplianceDataExportPolicy> {
        return this.api.createApplianceDataExportPolicy(param.applianceDataExportPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'appliance.DeviceClaim' resource.
     * @param param the request object
     */
    public createApplianceDeviceClaim(param: ApplianceApiCreateApplianceDeviceClaimRequest, options?: Configuration): Promise<ApplianceDeviceClaim> {
        return this.api.createApplianceDeviceClaim(param.applianceDeviceClaim, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'appliance.DiagSetting' resource.
     * @param param the request object
     */
    public createApplianceDiagSetting(param: ApplianceApiCreateApplianceDiagSettingRequest, options?: Configuration): Promise<ApplianceDiagSetting> {
        return this.api.createApplianceDiagSetting(param.applianceDiagSetting, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'appliance.Restore' resource.
     * @param param the request object
     */
    public createApplianceRestore(param: ApplianceApiCreateApplianceRestoreRequest, options?: Configuration): Promise<ApplianceRestore> {
        return this.api.createApplianceRestore(param.applianceRestore, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'appliance.Backup' resource.
     * @param param the request object
     */
    public deleteApplianceBackup(param: ApplianceApiDeleteApplianceBackupRequest, options?: Configuration): Promise<void> {
        return this.api.deleteApplianceBackup(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'appliance.Restore' resource.
     * @param param the request object
     */
    public deleteApplianceRestore(param: ApplianceApiDeleteApplianceRestoreRequest, options?: Configuration): Promise<void> {
        return this.api.deleteApplianceRestore(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.Backup' resource.
     * @param param the request object
     */
    public getApplianceBackupByMoid(param: ApplianceApiGetApplianceBackupByMoidRequest, options?: Configuration): Promise<ApplianceBackup> {
        return this.api.getApplianceBackupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.Backup' resource.
     * @param param the request object
     */
    public getApplianceBackupList(param: ApplianceApiGetApplianceBackupListRequest, options?: Configuration): Promise<ApplianceBackupResponse> {
        return this.api.getApplianceBackupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.BackupPolicy' resource.
     * @param param the request object
     */
    public getApplianceBackupPolicyByMoid(param: ApplianceApiGetApplianceBackupPolicyByMoidRequest, options?: Configuration): Promise<ApplianceBackupPolicy> {
        return this.api.getApplianceBackupPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.BackupPolicy' resource.
     * @param param the request object
     */
    public getApplianceBackupPolicyList(param: ApplianceApiGetApplianceBackupPolicyListRequest, options?: Configuration): Promise<ApplianceBackupPolicyResponse> {
        return this.api.getApplianceBackupPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.CertificateSetting' resource.
     * @param param the request object
     */
    public getApplianceCertificateSettingByMoid(param: ApplianceApiGetApplianceCertificateSettingByMoidRequest, options?: Configuration): Promise<ApplianceCertificateSetting> {
        return this.api.getApplianceCertificateSettingByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.CertificateSetting' resource.
     * @param param the request object
     */
    public getApplianceCertificateSettingList(param: ApplianceApiGetApplianceCertificateSettingListRequest, options?: Configuration): Promise<ApplianceCertificateSettingResponse> {
        return this.api.getApplianceCertificateSettingList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.DataExportPolicy' resource.
     * @param param the request object
     */
    public getApplianceDataExportPolicyByMoid(param: ApplianceApiGetApplianceDataExportPolicyByMoidRequest, options?: Configuration): Promise<ApplianceDataExportPolicy> {
        return this.api.getApplianceDataExportPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.DataExportPolicy' resource.
     * @param param the request object
     */
    public getApplianceDataExportPolicyList(param: ApplianceApiGetApplianceDataExportPolicyListRequest, options?: Configuration): Promise<ApplianceDataExportPolicyResponse> {
        return this.api.getApplianceDataExportPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.DeviceClaim' resource.
     * @param param the request object
     */
    public getApplianceDeviceClaimByMoid(param: ApplianceApiGetApplianceDeviceClaimByMoidRequest, options?: Configuration): Promise<ApplianceDeviceClaim> {
        return this.api.getApplianceDeviceClaimByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.DeviceClaim' resource.
     * @param param the request object
     */
    public getApplianceDeviceClaimList(param: ApplianceApiGetApplianceDeviceClaimListRequest, options?: Configuration): Promise<ApplianceDeviceClaimResponse> {
        return this.api.getApplianceDeviceClaimList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.DiagSetting' resource.
     * @param param the request object
     */
    public getApplianceDiagSettingByMoid(param: ApplianceApiGetApplianceDiagSettingByMoidRequest, options?: Configuration): Promise<ApplianceDiagSetting> {
        return this.api.getApplianceDiagSettingByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.DiagSetting' resource.
     * @param param the request object
     */
    public getApplianceDiagSettingList(param: ApplianceApiGetApplianceDiagSettingListRequest, options?: Configuration): Promise<ApplianceDiagSettingResponse> {
        return this.api.getApplianceDiagSettingList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.ImageBundle' resource.
     * @param param the request object
     */
    public getApplianceImageBundleByMoid(param: ApplianceApiGetApplianceImageBundleByMoidRequest, options?: Configuration): Promise<ApplianceImageBundle> {
        return this.api.getApplianceImageBundleByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.ImageBundle' resource.
     * @param param the request object
     */
    public getApplianceImageBundleList(param: ApplianceApiGetApplianceImageBundleListRequest, options?: Configuration): Promise<ApplianceImageBundleResponse> {
        return this.api.getApplianceImageBundleList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.NodeInfo' resource.
     * @param param the request object
     */
    public getApplianceNodeInfoByMoid(param: ApplianceApiGetApplianceNodeInfoByMoidRequest, options?: Configuration): Promise<ApplianceNodeInfo> {
        return this.api.getApplianceNodeInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.NodeInfo' resource.
     * @param param the request object
     */
    public getApplianceNodeInfoList(param: ApplianceApiGetApplianceNodeInfoListRequest, options?: Configuration): Promise<ApplianceNodeInfoResponse> {
        return this.api.getApplianceNodeInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.ReleaseNote' resource.
     * @param param the request object
     */
    public getApplianceReleaseNoteByMoid(param: ApplianceApiGetApplianceReleaseNoteByMoidRequest, options?: Configuration): Promise<ApplianceReleaseNote> {
        return this.api.getApplianceReleaseNoteByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.ReleaseNote' resource.
     * @param param the request object
     */
    public getApplianceReleaseNoteList(param: ApplianceApiGetApplianceReleaseNoteListRequest, options?: Configuration): Promise<ApplianceReleaseNoteResponse> {
        return this.api.getApplianceReleaseNoteList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.Restore' resource.
     * @param param the request object
     */
    public getApplianceRestoreByMoid(param: ApplianceApiGetApplianceRestoreByMoidRequest, options?: Configuration): Promise<ApplianceRestore> {
        return this.api.getApplianceRestoreByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.Restore' resource.
     * @param param the request object
     */
    public getApplianceRestoreList(param: ApplianceApiGetApplianceRestoreListRequest, options?: Configuration): Promise<ApplianceRestoreResponse> {
        return this.api.getApplianceRestoreList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.SetupInfo' resource.
     * @param param the request object
     */
    public getApplianceSetupInfoByMoid(param: ApplianceApiGetApplianceSetupInfoByMoidRequest, options?: Configuration): Promise<ApplianceSetupInfo> {
        return this.api.getApplianceSetupInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.SetupInfo' resource.
     * @param param the request object
     */
    public getApplianceSetupInfoList(param: ApplianceApiGetApplianceSetupInfoListRequest, options?: Configuration): Promise<ApplianceSetupInfoResponse> {
        return this.api.getApplianceSetupInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.SystemInfo' resource.
     * @param param the request object
     */
    public getApplianceSystemInfoByMoid(param: ApplianceApiGetApplianceSystemInfoByMoidRequest, options?: Configuration): Promise<ApplianceSystemInfo> {
        return this.api.getApplianceSystemInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.SystemInfo' resource.
     * @param param the request object
     */
    public getApplianceSystemInfoList(param: ApplianceApiGetApplianceSystemInfoListRequest, options?: Configuration): Promise<ApplianceSystemInfoResponse> {
        return this.api.getApplianceSystemInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.Upgrade' resource.
     * @param param the request object
     */
    public getApplianceUpgradeByMoid(param: ApplianceApiGetApplianceUpgradeByMoidRequest, options?: Configuration): Promise<ApplianceUpgrade> {
        return this.api.getApplianceUpgradeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.Upgrade' resource.
     * @param param the request object
     */
    public getApplianceUpgradeList(param: ApplianceApiGetApplianceUpgradeListRequest, options?: Configuration): Promise<ApplianceUpgradeResponse> {
        return this.api.getApplianceUpgradeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.UpgradePolicy' resource.
     * @param param the request object
     */
    public getApplianceUpgradePolicyByMoid(param: ApplianceApiGetApplianceUpgradePolicyByMoidRequest, options?: Configuration): Promise<ApplianceUpgradePolicy> {
        return this.api.getApplianceUpgradePolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'appliance.UpgradePolicy' resource.
     * @param param the request object
     */
    public getApplianceUpgradePolicyList(param: ApplianceApiGetApplianceUpgradePolicyListRequest, options?: Configuration): Promise<ApplianceUpgradePolicyResponse> {
        return this.api.getApplianceUpgradePolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.BackupPolicy' resource.
     * @param param the request object
     */
    public patchApplianceBackupPolicy(param: ApplianceApiPatchApplianceBackupPolicyRequest, options?: Configuration): Promise<ApplianceBackupPolicy> {
        return this.api.patchApplianceBackupPolicy(param.moid, param.applianceBackupPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.CertificateSetting' resource.
     * @param param the request object
     */
    public patchApplianceCertificateSetting(param: ApplianceApiPatchApplianceCertificateSettingRequest, options?: Configuration): Promise<ApplianceCertificateSetting> {
        return this.api.patchApplianceCertificateSetting(param.moid, param.applianceCertificateSetting, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.DataExportPolicy' resource.
     * @param param the request object
     */
    public patchApplianceDataExportPolicy(param: ApplianceApiPatchApplianceDataExportPolicyRequest, options?: Configuration): Promise<ApplianceDataExportPolicy> {
        return this.api.patchApplianceDataExportPolicy(param.moid, param.applianceDataExportPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.DiagSetting' resource.
     * @param param the request object
     */
    public patchApplianceDiagSetting(param: ApplianceApiPatchApplianceDiagSettingRequest, options?: Configuration): Promise<ApplianceDiagSetting> {
        return this.api.patchApplianceDiagSetting(param.moid, param.applianceDiagSetting, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.SetupInfo' resource.
     * @param param the request object
     */
    public patchApplianceSetupInfo(param: ApplianceApiPatchApplianceSetupInfoRequest, options?: Configuration): Promise<ApplianceSetupInfo> {
        return this.api.patchApplianceSetupInfo(param.moid, param.applianceSetupInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.Upgrade' resource.
     * @param param the request object
     */
    public patchApplianceUpgrade(param: ApplianceApiPatchApplianceUpgradeRequest, options?: Configuration): Promise<ApplianceUpgrade> {
        return this.api.patchApplianceUpgrade(param.moid, param.applianceUpgrade, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.UpgradePolicy' resource.
     * @param param the request object
     */
    public patchApplianceUpgradePolicy(param: ApplianceApiPatchApplianceUpgradePolicyRequest, options?: Configuration): Promise<ApplianceUpgradePolicy> {
        return this.api.patchApplianceUpgradePolicy(param.moid, param.applianceUpgradePolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.BackupPolicy' resource.
     * @param param the request object
     */
    public updateApplianceBackupPolicy(param: ApplianceApiUpdateApplianceBackupPolicyRequest, options?: Configuration): Promise<ApplianceBackupPolicy> {
        return this.api.updateApplianceBackupPolicy(param.moid, param.applianceBackupPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.CertificateSetting' resource.
     * @param param the request object
     */
    public updateApplianceCertificateSetting(param: ApplianceApiUpdateApplianceCertificateSettingRequest, options?: Configuration): Promise<ApplianceCertificateSetting> {
        return this.api.updateApplianceCertificateSetting(param.moid, param.applianceCertificateSetting, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.DataExportPolicy' resource.
     * @param param the request object
     */
    public updateApplianceDataExportPolicy(param: ApplianceApiUpdateApplianceDataExportPolicyRequest, options?: Configuration): Promise<ApplianceDataExportPolicy> {
        return this.api.updateApplianceDataExportPolicy(param.moid, param.applianceDataExportPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.DiagSetting' resource.
     * @param param the request object
     */
    public updateApplianceDiagSetting(param: ApplianceApiUpdateApplianceDiagSettingRequest, options?: Configuration): Promise<ApplianceDiagSetting> {
        return this.api.updateApplianceDiagSetting(param.moid, param.applianceDiagSetting, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.SetupInfo' resource.
     * @param param the request object
     */
    public updateApplianceSetupInfo(param: ApplianceApiUpdateApplianceSetupInfoRequest, options?: Configuration): Promise<ApplianceSetupInfo> {
        return this.api.updateApplianceSetupInfo(param.moid, param.applianceSetupInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.Upgrade' resource.
     * @param param the request object
     */
    public updateApplianceUpgrade(param: ApplianceApiUpdateApplianceUpgradeRequest, options?: Configuration): Promise<ApplianceUpgrade> {
        return this.api.updateApplianceUpgrade(param.moid, param.applianceUpgrade, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'appliance.UpgradePolicy' resource.
     * @param param the request object
     */
    public updateApplianceUpgradePolicy(param: ApplianceApiUpdateApplianceUpgradePolicyRequest, options?: Configuration): Promise<ApplianceUpgradePolicy> {
        return this.api.updateApplianceUpgradePolicy(param.moid, param.applianceUpgradePolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableAssetApi } from "./ObservableAPI";
import { AssetApiRequestFactory, AssetApiResponseProcessor} from "../apis/AssetApi";

export interface AssetApiCreateAssetDeviceClaimRequest {
    /**
     * The &#39;asset.DeviceClaim&#39; resource to create.
     * @type AssetDeviceClaim
     * @memberof AssetApicreateAssetDeviceClaim
     */
    assetDeviceClaim: AssetDeviceClaim
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApicreateAssetDeviceClaim
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof AssetApicreateAssetDeviceClaim
     */
    ifNoneMatch?: string
}

export interface AssetApiCreateAssetManagedDeviceRequest {
    /**
     * The &#39;asset.ManagedDevice&#39; resource to create.
     * @type AssetManagedDevice
     * @memberof AssetApicreateAssetManagedDevice
     */
    assetManagedDevice: AssetManagedDevice
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApicreateAssetManagedDevice
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof AssetApicreateAssetManagedDevice
     */
    ifNoneMatch?: string
}

export interface AssetApiCreateAssetTargetRequest {
    /**
     * The &#39;asset.Target&#39; resource to create.
     * @type AssetTarget
     * @memberof AssetApicreateAssetTarget
     */
    assetTarget: AssetTarget
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApicreateAssetTarget
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof AssetApicreateAssetTarget
     */
    ifNoneMatch?: string
}

export interface AssetApiDeleteAssetDeviceClaimRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApideleteAssetDeviceClaim
     */
    moid: string
}

export interface AssetApiDeleteAssetDeviceRegistrationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApideleteAssetDeviceRegistration
     */
    moid: string
}

export interface AssetApiDeleteAssetManagedDeviceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApideleteAssetManagedDevice
     */
    moid: string
}

export interface AssetApiDeleteAssetTargetRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApideleteAssetTarget
     */
    moid: string
}

export interface AssetApiGetAssetClusterMemberByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApigetAssetClusterMemberByMoid
     */
    moid: string
}

export interface AssetApiGetAssetClusterMemberListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AssetApigetAssetClusterMemberList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AssetApigetAssetClusterMemberList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AssetApigetAssetClusterMemberList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AssetApigetAssetClusterMemberList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AssetApigetAssetClusterMemberList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AssetApigetAssetClusterMemberList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AssetApigetAssetClusterMemberList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AssetApigetAssetClusterMemberList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AssetApigetAssetClusterMemberList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AssetApigetAssetClusterMemberList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AssetApigetAssetClusterMemberList
     */
    tags?: string
}

export interface AssetApiGetAssetDeviceConfigurationByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApigetAssetDeviceConfigurationByMoid
     */
    moid: string
}

export interface AssetApiGetAssetDeviceConfigurationListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AssetApigetAssetDeviceConfigurationList
     */
    tags?: string
}

export interface AssetApiGetAssetDeviceConnectorManagerByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApigetAssetDeviceConnectorManagerByMoid
     */
    moid: string
}

export interface AssetApiGetAssetDeviceConnectorManagerListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AssetApigetAssetDeviceConnectorManagerList
     */
    tags?: string
}

export interface AssetApiGetAssetDeviceContractInformationByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApigetAssetDeviceContractInformationByMoid
     */
    moid: string
}

export interface AssetApiGetAssetDeviceContractInformationListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AssetApigetAssetDeviceContractInformationList
     */
    tags?: string
}

export interface AssetApiGetAssetDeviceRegistrationByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApigetAssetDeviceRegistrationByMoid
     */
    moid: string
}

export interface AssetApiGetAssetDeviceRegistrationListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AssetApigetAssetDeviceRegistrationList
     */
    tags?: string
}

export interface AssetApiGetAssetManagedDeviceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApigetAssetManagedDeviceByMoid
     */
    moid: string
}

export interface AssetApiGetAssetManagedDeviceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AssetApigetAssetManagedDeviceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AssetApigetAssetManagedDeviceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AssetApigetAssetManagedDeviceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AssetApigetAssetManagedDeviceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AssetApigetAssetManagedDeviceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AssetApigetAssetManagedDeviceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AssetApigetAssetManagedDeviceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AssetApigetAssetManagedDeviceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AssetApigetAssetManagedDeviceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AssetApigetAssetManagedDeviceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AssetApigetAssetManagedDeviceList
     */
    tags?: string
}

export interface AssetApiGetAssetTargetByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApigetAssetTargetByMoid
     */
    moid: string
}

export interface AssetApiGetAssetTargetListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof AssetApigetAssetTargetList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof AssetApigetAssetTargetList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof AssetApigetAssetTargetList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof AssetApigetAssetTargetList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof AssetApigetAssetTargetList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof AssetApigetAssetTargetList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof AssetApigetAssetTargetList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof AssetApigetAssetTargetList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof AssetApigetAssetTargetList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof AssetApigetAssetTargetList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof AssetApigetAssetTargetList
     */
    tags?: string
}

export interface AssetApiPatchAssetDeviceConfigurationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApipatchAssetDeviceConfiguration
     */
    moid: string
    /**
     * The &#39;asset.DeviceConfiguration&#39; resource to update.
     * @type AssetDeviceConfiguration
     * @memberof AssetApipatchAssetDeviceConfiguration
     */
    assetDeviceConfiguration: AssetDeviceConfiguration
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApipatchAssetDeviceConfiguration
     */
    ifMatch?: string
}

export interface AssetApiPatchAssetDeviceContractInformationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApipatchAssetDeviceContractInformation
     */
    moid: string
    /**
     * The &#39;asset.DeviceContractInformation&#39; resource to update.
     * @type AssetDeviceContractInformation
     * @memberof AssetApipatchAssetDeviceContractInformation
     */
    assetDeviceContractInformation: AssetDeviceContractInformation
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApipatchAssetDeviceContractInformation
     */
    ifMatch?: string
}

export interface AssetApiPatchAssetDeviceRegistrationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApipatchAssetDeviceRegistration
     */
    moid: string
    /**
     * The &#39;asset.DeviceRegistration&#39; resource to update.
     * @type AssetDeviceRegistration
     * @memberof AssetApipatchAssetDeviceRegistration
     */
    assetDeviceRegistration: AssetDeviceRegistration
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApipatchAssetDeviceRegistration
     */
    ifMatch?: string
}

export interface AssetApiPatchAssetManagedDeviceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApipatchAssetManagedDevice
     */
    moid: string
    /**
     * The &#39;asset.ManagedDevice&#39; resource to update.
     * @type AssetManagedDevice
     * @memberof AssetApipatchAssetManagedDevice
     */
    assetManagedDevice: AssetManagedDevice
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApipatchAssetManagedDevice
     */
    ifMatch?: string
}

export interface AssetApiPatchAssetTargetRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApipatchAssetTarget
     */
    moid: string
    /**
     * The &#39;asset.Target&#39; resource to update.
     * @type AssetTarget
     * @memberof AssetApipatchAssetTarget
     */
    assetTarget: AssetTarget
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApipatchAssetTarget
     */
    ifMatch?: string
}

export interface AssetApiUpdateAssetDeviceConfigurationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApiupdateAssetDeviceConfiguration
     */
    moid: string
    /**
     * The &#39;asset.DeviceConfiguration&#39; resource to update.
     * @type AssetDeviceConfiguration
     * @memberof AssetApiupdateAssetDeviceConfiguration
     */
    assetDeviceConfiguration: AssetDeviceConfiguration
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApiupdateAssetDeviceConfiguration
     */
    ifMatch?: string
}

export interface AssetApiUpdateAssetDeviceContractInformationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApiupdateAssetDeviceContractInformation
     */
    moid: string
    /**
     * The &#39;asset.DeviceContractInformation&#39; resource to update.
     * @type AssetDeviceContractInformation
     * @memberof AssetApiupdateAssetDeviceContractInformation
     */
    assetDeviceContractInformation: AssetDeviceContractInformation
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApiupdateAssetDeviceContractInformation
     */
    ifMatch?: string
}

export interface AssetApiUpdateAssetDeviceRegistrationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApiupdateAssetDeviceRegistration
     */
    moid: string
    /**
     * The &#39;asset.DeviceRegistration&#39; resource to update.
     * @type AssetDeviceRegistration
     * @memberof AssetApiupdateAssetDeviceRegistration
     */
    assetDeviceRegistration: AssetDeviceRegistration
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApiupdateAssetDeviceRegistration
     */
    ifMatch?: string
}

export interface AssetApiUpdateAssetManagedDeviceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApiupdateAssetManagedDevice
     */
    moid: string
    /**
     * The &#39;asset.ManagedDevice&#39; resource to update.
     * @type AssetManagedDevice
     * @memberof AssetApiupdateAssetManagedDevice
     */
    assetManagedDevice: AssetManagedDevice
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApiupdateAssetManagedDevice
     */
    ifMatch?: string
}

export interface AssetApiUpdateAssetTargetRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof AssetApiupdateAssetTarget
     */
    moid: string
    /**
     * The &#39;asset.Target&#39; resource to update.
     * @type AssetTarget
     * @memberof AssetApiupdateAssetTarget
     */
    assetTarget: AssetTarget
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof AssetApiupdateAssetTarget
     */
    ifMatch?: string
}


export class ObjectAssetApi {
    private api: ObservableAssetApi

    public constructor(configuration: Configuration, requestFactory?: AssetApiRequestFactory, responseProcessor?: AssetApiResponseProcessor) {
        this.api = new ObservableAssetApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'asset.DeviceClaim' resource.
     * @param param the request object
     */
    public createAssetDeviceClaim(param: AssetApiCreateAssetDeviceClaimRequest, options?: Configuration): Promise<AssetDeviceClaim> {
        return this.api.createAssetDeviceClaim(param.assetDeviceClaim, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'asset.ManagedDevice' resource.
     * @param param the request object
     */
    public createAssetManagedDevice(param: AssetApiCreateAssetManagedDeviceRequest, options?: Configuration): Promise<AssetManagedDevice> {
        return this.api.createAssetManagedDevice(param.assetManagedDevice, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'asset.Target' resource.
     * @param param the request object
     */
    public createAssetTarget(param: AssetApiCreateAssetTargetRequest, options?: Configuration): Promise<AssetTarget> {
        return this.api.createAssetTarget(param.assetTarget, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'asset.DeviceClaim' resource.
     * @param param the request object
     */
    public deleteAssetDeviceClaim(param: AssetApiDeleteAssetDeviceClaimRequest, options?: Configuration): Promise<void> {
        return this.api.deleteAssetDeviceClaim(param.moid,  options).toPromise();
    }
	
    /**
     * Deletes the resource representing the device connector. All associated REST resources will be deleted. In particular, inventory and operational data associated with this device will be deleted.
     * @param param the request object
     */
    public deleteAssetDeviceRegistration(param: AssetApiDeleteAssetDeviceRegistrationRequest, options?: Configuration): Promise<void> {
        return this.api.deleteAssetDeviceRegistration(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'asset.ManagedDevice' resource.
     * @param param the request object
     */
    public deleteAssetManagedDevice(param: AssetApiDeleteAssetManagedDeviceRequest, options?: Configuration): Promise<void> {
        return this.api.deleteAssetManagedDevice(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'asset.Target' resource.
     * @param param the request object
     */
    public deleteAssetTarget(param: AssetApiDeleteAssetTargetRequest, options?: Configuration): Promise<void> {
        return this.api.deleteAssetTarget(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'asset.ClusterMember' resource.
     * @param param the request object
     */
    public getAssetClusterMemberByMoid(param: AssetApiGetAssetClusterMemberByMoidRequest, options?: Configuration): Promise<AssetClusterMember> {
        return this.api.getAssetClusterMemberByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'asset.ClusterMember' resource.
     * @param param the request object
     */
    public getAssetClusterMemberList(param: AssetApiGetAssetClusterMemberListRequest, options?: Configuration): Promise<AssetClusterMemberResponse> {
        return this.api.getAssetClusterMemberList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'asset.DeviceConfiguration' resource.
     * @param param the request object
     */
    public getAssetDeviceConfigurationByMoid(param: AssetApiGetAssetDeviceConfigurationByMoidRequest, options?: Configuration): Promise<AssetDeviceConfiguration> {
        return this.api.getAssetDeviceConfigurationByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'asset.DeviceConfiguration' resource.
     * @param param the request object
     */
    public getAssetDeviceConfigurationList(param: AssetApiGetAssetDeviceConfigurationListRequest, options?: Configuration): Promise<AssetDeviceConfigurationResponse> {
        return this.api.getAssetDeviceConfigurationList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'asset.DeviceConnectorManager' resource.
     * @param param the request object
     */
    public getAssetDeviceConnectorManagerByMoid(param: AssetApiGetAssetDeviceConnectorManagerByMoidRequest, options?: Configuration): Promise<AssetDeviceConnectorManager> {
        return this.api.getAssetDeviceConnectorManagerByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'asset.DeviceConnectorManager' resource.
     * @param param the request object
     */
    public getAssetDeviceConnectorManagerList(param: AssetApiGetAssetDeviceConnectorManagerListRequest, options?: Configuration): Promise<AssetDeviceConnectorManagerResponse> {
        return this.api.getAssetDeviceConnectorManagerList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'asset.DeviceContractInformation' resource.
     * @param param the request object
     */
    public getAssetDeviceContractInformationByMoid(param: AssetApiGetAssetDeviceContractInformationByMoidRequest, options?: Configuration): Promise<AssetDeviceContractInformation> {
        return this.api.getAssetDeviceContractInformationByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'asset.DeviceContractInformation' resource.
     * @param param the request object
     */
    public getAssetDeviceContractInformationList(param: AssetApiGetAssetDeviceContractInformationListRequest, options?: Configuration): Promise<AssetDeviceContractInformationResponse> {
        return this.api.getAssetDeviceContractInformationList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'asset.DeviceRegistration' resource.
     * @param param the request object
     */
    public getAssetDeviceRegistrationByMoid(param: AssetApiGetAssetDeviceRegistrationByMoidRequest, options?: Configuration): Promise<AssetDeviceRegistration> {
        return this.api.getAssetDeviceRegistrationByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'asset.DeviceRegistration' resource.
     * @param param the request object
     */
    public getAssetDeviceRegistrationList(param: AssetApiGetAssetDeviceRegistrationListRequest, options?: Configuration): Promise<AssetDeviceRegistrationResponse> {
        return this.api.getAssetDeviceRegistrationList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'asset.ManagedDevice' resource.
     * @param param the request object
     */
    public getAssetManagedDeviceByMoid(param: AssetApiGetAssetManagedDeviceByMoidRequest, options?: Configuration): Promise<AssetManagedDevice> {
        return this.api.getAssetManagedDeviceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'asset.ManagedDevice' resource.
     * @param param the request object
     */
    public getAssetManagedDeviceList(param: AssetApiGetAssetManagedDeviceListRequest, options?: Configuration): Promise<AssetManagedDeviceResponse> {
        return this.api.getAssetManagedDeviceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'asset.Target' resource.
     * @param param the request object
     */
    public getAssetTargetByMoid(param: AssetApiGetAssetTargetByMoidRequest, options?: Configuration): Promise<AssetTarget> {
        return this.api.getAssetTargetByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'asset.Target' resource.
     * @param param the request object
     */
    public getAssetTargetList(param: AssetApiGetAssetTargetListRequest, options?: Configuration): Promise<AssetTargetResponse> {
        return this.api.getAssetTargetList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'asset.DeviceConfiguration' resource.
     * @param param the request object
     */
    public patchAssetDeviceConfiguration(param: AssetApiPatchAssetDeviceConfigurationRequest, options?: Configuration): Promise<AssetDeviceConfiguration> {
        return this.api.patchAssetDeviceConfiguration(param.moid, param.assetDeviceConfiguration, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'asset.DeviceContractInformation' resource.
     * @param param the request object
     */
    public patchAssetDeviceContractInformation(param: AssetApiPatchAssetDeviceContractInformationRequest, options?: Configuration): Promise<AssetDeviceContractInformation> {
        return this.api.patchAssetDeviceContractInformation(param.moid, param.assetDeviceContractInformation, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Updates the resource representing the device connector. For example, this can be used to annotate the device connector resource with user-specified tags.
     * @param param the request object
     */
    public patchAssetDeviceRegistration(param: AssetApiPatchAssetDeviceRegistrationRequest, options?: Configuration): Promise<AssetDeviceRegistration> {
        return this.api.patchAssetDeviceRegistration(param.moid, param.assetDeviceRegistration, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'asset.ManagedDevice' resource.
     * @param param the request object
     */
    public patchAssetManagedDevice(param: AssetApiPatchAssetManagedDeviceRequest, options?: Configuration): Promise<AssetManagedDevice> {
        return this.api.patchAssetManagedDevice(param.moid, param.assetManagedDevice, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'asset.Target' resource.
     * @param param the request object
     */
    public patchAssetTarget(param: AssetApiPatchAssetTargetRequest, options?: Configuration): Promise<AssetTarget> {
        return this.api.patchAssetTarget(param.moid, param.assetTarget, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'asset.DeviceConfiguration' resource.
     * @param param the request object
     */
    public updateAssetDeviceConfiguration(param: AssetApiUpdateAssetDeviceConfigurationRequest, options?: Configuration): Promise<AssetDeviceConfiguration> {
        return this.api.updateAssetDeviceConfiguration(param.moid, param.assetDeviceConfiguration, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'asset.DeviceContractInformation' resource.
     * @param param the request object
     */
    public updateAssetDeviceContractInformation(param: AssetApiUpdateAssetDeviceContractInformationRequest, options?: Configuration): Promise<AssetDeviceContractInformation> {
        return this.api.updateAssetDeviceContractInformation(param.moid, param.assetDeviceContractInformation, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Updates the resource representing the device connector. For example, this can be used to annotate the device connector resource with user-specified tags.
     * @param param the request object
     */
    public updateAssetDeviceRegistration(param: AssetApiUpdateAssetDeviceRegistrationRequest, options?: Configuration): Promise<AssetDeviceRegistration> {
        return this.api.updateAssetDeviceRegistration(param.moid, param.assetDeviceRegistration, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'asset.ManagedDevice' resource.
     * @param param the request object
     */
    public updateAssetManagedDevice(param: AssetApiUpdateAssetManagedDeviceRequest, options?: Configuration): Promise<AssetManagedDevice> {
        return this.api.updateAssetManagedDevice(param.moid, param.assetManagedDevice, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'asset.Target' resource.
     * @param param the request object
     */
    public updateAssetTarget(param: AssetApiUpdateAssetTargetRequest, options?: Configuration): Promise<AssetTarget> {
        return this.api.updateAssetTarget(param.moid, param.assetTarget, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableBiosApi } from "./ObservableAPI";
import { BiosApiRequestFactory, BiosApiResponseProcessor} from "../apis/BiosApi";

export interface BiosApiCreateBiosPolicyRequest {
    /**
     * The &#39;bios.Policy&#39; resource to create.
     * @type BiosPolicy
     * @memberof BiosApicreateBiosPolicy
     */
    biosPolicy: BiosPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BiosApicreateBiosPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof BiosApicreateBiosPolicy
     */
    ifNoneMatch?: string
}

export interface BiosApiDeleteBiosPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApideleteBiosPolicy
     */
    moid: string
}

export interface BiosApiGetBiosBootModeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApigetBiosBootModeByMoid
     */
    moid: string
}

export interface BiosApiGetBiosBootModeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof BiosApigetBiosBootModeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof BiosApigetBiosBootModeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof BiosApigetBiosBootModeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof BiosApigetBiosBootModeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof BiosApigetBiosBootModeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof BiosApigetBiosBootModeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof BiosApigetBiosBootModeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof BiosApigetBiosBootModeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof BiosApigetBiosBootModeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof BiosApigetBiosBootModeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof BiosApigetBiosBootModeList
     */
    tags?: string
}

export interface BiosApiGetBiosPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApigetBiosPolicyByMoid
     */
    moid: string
}

export interface BiosApiGetBiosPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof BiosApigetBiosPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof BiosApigetBiosPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof BiosApigetBiosPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof BiosApigetBiosPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof BiosApigetBiosPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof BiosApigetBiosPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof BiosApigetBiosPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof BiosApigetBiosPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof BiosApigetBiosPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof BiosApigetBiosPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof BiosApigetBiosPolicyList
     */
    tags?: string
}

export interface BiosApiGetBiosUnitByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApigetBiosUnitByMoid
     */
    moid: string
}

export interface BiosApiGetBiosUnitListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof BiosApigetBiosUnitList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof BiosApigetBiosUnitList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof BiosApigetBiosUnitList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof BiosApigetBiosUnitList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof BiosApigetBiosUnitList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof BiosApigetBiosUnitList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof BiosApigetBiosUnitList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof BiosApigetBiosUnitList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof BiosApigetBiosUnitList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof BiosApigetBiosUnitList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof BiosApigetBiosUnitList
     */
    tags?: string
}

export interface BiosApiPatchBiosBootModeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApipatchBiosBootMode
     */
    moid: string
    /**
     * The &#39;bios.BootMode&#39; resource to update.
     * @type BiosBootMode
     * @memberof BiosApipatchBiosBootMode
     */
    biosBootMode: BiosBootMode
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BiosApipatchBiosBootMode
     */
    ifMatch?: string
}

export interface BiosApiPatchBiosPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApipatchBiosPolicy
     */
    moid: string
    /**
     * The &#39;bios.Policy&#39; resource to update.
     * @type BiosPolicy
     * @memberof BiosApipatchBiosPolicy
     */
    biosPolicy: BiosPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BiosApipatchBiosPolicy
     */
    ifMatch?: string
}

export interface BiosApiPatchBiosUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApipatchBiosUnit
     */
    moid: string
    /**
     * The &#39;bios.Unit&#39; resource to update.
     * @type BiosUnit
     * @memberof BiosApipatchBiosUnit
     */
    biosUnit: BiosUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BiosApipatchBiosUnit
     */
    ifMatch?: string
}

export interface BiosApiUpdateBiosBootModeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApiupdateBiosBootMode
     */
    moid: string
    /**
     * The &#39;bios.BootMode&#39; resource to update.
     * @type BiosBootMode
     * @memberof BiosApiupdateBiosBootMode
     */
    biosBootMode: BiosBootMode
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BiosApiupdateBiosBootMode
     */
    ifMatch?: string
}

export interface BiosApiUpdateBiosPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApiupdateBiosPolicy
     */
    moid: string
    /**
     * The &#39;bios.Policy&#39; resource to update.
     * @type BiosPolicy
     * @memberof BiosApiupdateBiosPolicy
     */
    biosPolicy: BiosPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BiosApiupdateBiosPolicy
     */
    ifMatch?: string
}

export interface BiosApiUpdateBiosUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BiosApiupdateBiosUnit
     */
    moid: string
    /**
     * The &#39;bios.Unit&#39; resource to update.
     * @type BiosUnit
     * @memberof BiosApiupdateBiosUnit
     */
    biosUnit: BiosUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BiosApiupdateBiosUnit
     */
    ifMatch?: string
}


export class ObjectBiosApi {
    private api: ObservableBiosApi

    public constructor(configuration: Configuration, requestFactory?: BiosApiRequestFactory, responseProcessor?: BiosApiResponseProcessor) {
        this.api = new ObservableBiosApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'bios.Policy' resource.
     * @param param the request object
     */
    public createBiosPolicy(param: BiosApiCreateBiosPolicyRequest, options?: Configuration): Promise<BiosPolicy> {
        return this.api.createBiosPolicy(param.biosPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'bios.Policy' resource.
     * @param param the request object
     */
    public deleteBiosPolicy(param: BiosApiDeleteBiosPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteBiosPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'bios.BootMode' resource.
     * @param param the request object
     */
    public getBiosBootModeByMoid(param: BiosApiGetBiosBootModeByMoidRequest, options?: Configuration): Promise<BiosBootMode> {
        return this.api.getBiosBootModeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'bios.BootMode' resource.
     * @param param the request object
     */
    public getBiosBootModeList(param: BiosApiGetBiosBootModeListRequest, options?: Configuration): Promise<BiosBootModeResponse> {
        return this.api.getBiosBootModeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'bios.Policy' resource.
     * @param param the request object
     */
    public getBiosPolicyByMoid(param: BiosApiGetBiosPolicyByMoidRequest, options?: Configuration): Promise<BiosPolicy> {
        return this.api.getBiosPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'bios.Policy' resource.
     * @param param the request object
     */
    public getBiosPolicyList(param: BiosApiGetBiosPolicyListRequest, options?: Configuration): Promise<BiosPolicyResponse> {
        return this.api.getBiosPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'bios.Unit' resource.
     * @param param the request object
     */
    public getBiosUnitByMoid(param: BiosApiGetBiosUnitByMoidRequest, options?: Configuration): Promise<BiosUnit> {
        return this.api.getBiosUnitByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'bios.Unit' resource.
     * @param param the request object
     */
    public getBiosUnitList(param: BiosApiGetBiosUnitListRequest, options?: Configuration): Promise<BiosUnitResponse> {
        return this.api.getBiosUnitList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'bios.BootMode' resource.
     * @param param the request object
     */
    public patchBiosBootMode(param: BiosApiPatchBiosBootModeRequest, options?: Configuration): Promise<BiosBootMode> {
        return this.api.patchBiosBootMode(param.moid, param.biosBootMode, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'bios.Policy' resource.
     * @param param the request object
     */
    public patchBiosPolicy(param: BiosApiPatchBiosPolicyRequest, options?: Configuration): Promise<BiosPolicy> {
        return this.api.patchBiosPolicy(param.moid, param.biosPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'bios.Unit' resource.
     * @param param the request object
     */
    public patchBiosUnit(param: BiosApiPatchBiosUnitRequest, options?: Configuration): Promise<BiosUnit> {
        return this.api.patchBiosUnit(param.moid, param.biosUnit, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'bios.BootMode' resource.
     * @param param the request object
     */
    public updateBiosBootMode(param: BiosApiUpdateBiosBootModeRequest, options?: Configuration): Promise<BiosBootMode> {
        return this.api.updateBiosBootMode(param.moid, param.biosBootMode, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'bios.Policy' resource.
     * @param param the request object
     */
    public updateBiosPolicy(param: BiosApiUpdateBiosPolicyRequest, options?: Configuration): Promise<BiosPolicy> {
        return this.api.updateBiosPolicy(param.moid, param.biosPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'bios.Unit' resource.
     * @param param the request object
     */
    public updateBiosUnit(param: BiosApiUpdateBiosUnitRequest, options?: Configuration): Promise<BiosUnit> {
        return this.api.updateBiosUnit(param.moid, param.biosUnit, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableBootApi } from "./ObservableAPI";
import { BootApiRequestFactory, BootApiResponseProcessor} from "../apis/BootApi";

export interface BootApiCreateBootPrecisionPolicyRequest {
    /**
     * The &#39;boot.PrecisionPolicy&#39; resource to create.
     * @type BootPrecisionPolicy
     * @memberof BootApicreateBootPrecisionPolicy
     */
    bootPrecisionPolicy: BootPrecisionPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BootApicreateBootPrecisionPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof BootApicreateBootPrecisionPolicy
     */
    ifNoneMatch?: string
}

export interface BootApiDeleteBootPrecisionPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BootApideleteBootPrecisionPolicy
     */
    moid: string
}

export interface BootApiGetBootDeviceBootModeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BootApigetBootDeviceBootModeByMoid
     */
    moid: string
}

export interface BootApiGetBootDeviceBootModeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof BootApigetBootDeviceBootModeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof BootApigetBootDeviceBootModeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof BootApigetBootDeviceBootModeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof BootApigetBootDeviceBootModeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof BootApigetBootDeviceBootModeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof BootApigetBootDeviceBootModeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof BootApigetBootDeviceBootModeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof BootApigetBootDeviceBootModeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof BootApigetBootDeviceBootModeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof BootApigetBootDeviceBootModeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof BootApigetBootDeviceBootModeList
     */
    tags?: string
}

export interface BootApiGetBootPrecisionPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BootApigetBootPrecisionPolicyByMoid
     */
    moid: string
}

export interface BootApiGetBootPrecisionPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof BootApigetBootPrecisionPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof BootApigetBootPrecisionPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof BootApigetBootPrecisionPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof BootApigetBootPrecisionPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof BootApigetBootPrecisionPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof BootApigetBootPrecisionPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof BootApigetBootPrecisionPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof BootApigetBootPrecisionPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof BootApigetBootPrecisionPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof BootApigetBootPrecisionPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof BootApigetBootPrecisionPolicyList
     */
    tags?: string
}

export interface BootApiPatchBootDeviceBootModeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BootApipatchBootDeviceBootMode
     */
    moid: string
    /**
     * The &#39;boot.DeviceBootMode&#39; resource to update.
     * @type BootDeviceBootMode
     * @memberof BootApipatchBootDeviceBootMode
     */
    bootDeviceBootMode: BootDeviceBootMode
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BootApipatchBootDeviceBootMode
     */
    ifMatch?: string
}

export interface BootApiPatchBootPrecisionPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BootApipatchBootPrecisionPolicy
     */
    moid: string
    /**
     * The &#39;boot.PrecisionPolicy&#39; resource to update.
     * @type BootPrecisionPolicy
     * @memberof BootApipatchBootPrecisionPolicy
     */
    bootPrecisionPolicy: BootPrecisionPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BootApipatchBootPrecisionPolicy
     */
    ifMatch?: string
}

export interface BootApiUpdateBootDeviceBootModeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BootApiupdateBootDeviceBootMode
     */
    moid: string
    /**
     * The &#39;boot.DeviceBootMode&#39; resource to update.
     * @type BootDeviceBootMode
     * @memberof BootApiupdateBootDeviceBootMode
     */
    bootDeviceBootMode: BootDeviceBootMode
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BootApiupdateBootDeviceBootMode
     */
    ifMatch?: string
}

export interface BootApiUpdateBootPrecisionPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof BootApiupdateBootPrecisionPolicy
     */
    moid: string
    /**
     * The &#39;boot.PrecisionPolicy&#39; resource to update.
     * @type BootPrecisionPolicy
     * @memberof BootApiupdateBootPrecisionPolicy
     */
    bootPrecisionPolicy: BootPrecisionPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof BootApiupdateBootPrecisionPolicy
     */
    ifMatch?: string
}


export class ObjectBootApi {
    private api: ObservableBootApi

    public constructor(configuration: Configuration, requestFactory?: BootApiRequestFactory, responseProcessor?: BootApiResponseProcessor) {
        this.api = new ObservableBootApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'boot.PrecisionPolicy' resource.
     * @param param the request object
     */
    public createBootPrecisionPolicy(param: BootApiCreateBootPrecisionPolicyRequest, options?: Configuration): Promise<BootPrecisionPolicy> {
        return this.api.createBootPrecisionPolicy(param.bootPrecisionPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'boot.PrecisionPolicy' resource.
     * @param param the request object
     */
    public deleteBootPrecisionPolicy(param: BootApiDeleteBootPrecisionPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteBootPrecisionPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'boot.DeviceBootMode' resource.
     * @param param the request object
     */
    public getBootDeviceBootModeByMoid(param: BootApiGetBootDeviceBootModeByMoidRequest, options?: Configuration): Promise<BootDeviceBootMode> {
        return this.api.getBootDeviceBootModeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'boot.DeviceBootMode' resource.
     * @param param the request object
     */
    public getBootDeviceBootModeList(param: BootApiGetBootDeviceBootModeListRequest, options?: Configuration): Promise<BootDeviceBootModeResponse> {
        return this.api.getBootDeviceBootModeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'boot.PrecisionPolicy' resource.
     * @param param the request object
     */
    public getBootPrecisionPolicyByMoid(param: BootApiGetBootPrecisionPolicyByMoidRequest, options?: Configuration): Promise<BootPrecisionPolicy> {
        return this.api.getBootPrecisionPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'boot.PrecisionPolicy' resource.
     * @param param the request object
     */
    public getBootPrecisionPolicyList(param: BootApiGetBootPrecisionPolicyListRequest, options?: Configuration): Promise<BootPrecisionPolicyResponse> {
        return this.api.getBootPrecisionPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'boot.DeviceBootMode' resource.
     * @param param the request object
     */
    public patchBootDeviceBootMode(param: BootApiPatchBootDeviceBootModeRequest, options?: Configuration): Promise<BootDeviceBootMode> {
        return this.api.patchBootDeviceBootMode(param.moid, param.bootDeviceBootMode, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'boot.PrecisionPolicy' resource.
     * @param param the request object
     */
    public patchBootPrecisionPolicy(param: BootApiPatchBootPrecisionPolicyRequest, options?: Configuration): Promise<BootPrecisionPolicy> {
        return this.api.patchBootPrecisionPolicy(param.moid, param.bootPrecisionPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'boot.DeviceBootMode' resource.
     * @param param the request object
     */
    public updateBootDeviceBootMode(param: BootApiUpdateBootDeviceBootModeRequest, options?: Configuration): Promise<BootDeviceBootMode> {
        return this.api.updateBootDeviceBootMode(param.moid, param.bootDeviceBootMode, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'boot.PrecisionPolicy' resource.
     * @param param the request object
     */
    public updateBootPrecisionPolicy(param: BootApiUpdateBootPrecisionPolicyRequest, options?: Configuration): Promise<BootPrecisionPolicy> {
        return this.api.updateBootPrecisionPolicy(param.moid, param.bootPrecisionPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableComputeApi } from "./ObservableAPI";
import { ComputeApiRequestFactory, ComputeApiResponseProcessor} from "../apis/ComputeApi";

export interface ComputeApiGetComputeBladeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApigetComputeBladeByMoid
     */
    moid: string
}

export interface ComputeApiGetComputeBladeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ComputeApigetComputeBladeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ComputeApigetComputeBladeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ComputeApigetComputeBladeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ComputeApigetComputeBladeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ComputeApigetComputeBladeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ComputeApigetComputeBladeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ComputeApigetComputeBladeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ComputeApigetComputeBladeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ComputeApigetComputeBladeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ComputeApigetComputeBladeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ComputeApigetComputeBladeList
     */
    tags?: string
}

export interface ComputeApiGetComputeBoardByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApigetComputeBoardByMoid
     */
    moid: string
}

export interface ComputeApiGetComputeBoardListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ComputeApigetComputeBoardList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ComputeApigetComputeBoardList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ComputeApigetComputeBoardList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ComputeApigetComputeBoardList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ComputeApigetComputeBoardList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ComputeApigetComputeBoardList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ComputeApigetComputeBoardList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ComputeApigetComputeBoardList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ComputeApigetComputeBoardList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ComputeApigetComputeBoardList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ComputeApigetComputeBoardList
     */
    tags?: string
}

export interface ComputeApiGetComputePhysicalSummaryByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApigetComputePhysicalSummaryByMoid
     */
    moid: string
}

export interface ComputeApiGetComputePhysicalSummaryListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ComputeApigetComputePhysicalSummaryList
     */
    tags?: string
}

export interface ComputeApiGetComputeRackUnitByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApigetComputeRackUnitByMoid
     */
    moid: string
}

export interface ComputeApiGetComputeRackUnitListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ComputeApigetComputeRackUnitList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ComputeApigetComputeRackUnitList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ComputeApigetComputeRackUnitList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ComputeApigetComputeRackUnitList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ComputeApigetComputeRackUnitList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ComputeApigetComputeRackUnitList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ComputeApigetComputeRackUnitList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ComputeApigetComputeRackUnitList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ComputeApigetComputeRackUnitList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ComputeApigetComputeRackUnitList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ComputeApigetComputeRackUnitList
     */
    tags?: string
}

export interface ComputeApiGetComputeServerSettingByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApigetComputeServerSettingByMoid
     */
    moid: string
}

export interface ComputeApiGetComputeServerSettingListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ComputeApigetComputeServerSettingList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ComputeApigetComputeServerSettingList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ComputeApigetComputeServerSettingList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ComputeApigetComputeServerSettingList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ComputeApigetComputeServerSettingList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ComputeApigetComputeServerSettingList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ComputeApigetComputeServerSettingList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ComputeApigetComputeServerSettingList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ComputeApigetComputeServerSettingList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ComputeApigetComputeServerSettingList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ComputeApigetComputeServerSettingList
     */
    tags?: string
}

export interface ComputeApiPatchComputeBladeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApipatchComputeBlade
     */
    moid: string
    /**
     * The &#39;compute.Blade&#39; resource to update.
     * @type ComputeBlade
     * @memberof ComputeApipatchComputeBlade
     */
    computeBlade: ComputeBlade
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ComputeApipatchComputeBlade
     */
    ifMatch?: string
}

export interface ComputeApiPatchComputeBoardRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApipatchComputeBoard
     */
    moid: string
    /**
     * The &#39;compute.Board&#39; resource to update.
     * @type ComputeBoard
     * @memberof ComputeApipatchComputeBoard
     */
    computeBoard: ComputeBoard
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ComputeApipatchComputeBoard
     */
    ifMatch?: string
}

export interface ComputeApiPatchComputeRackUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApipatchComputeRackUnit
     */
    moid: string
    /**
     * The &#39;compute.RackUnit&#39; resource to update.
     * @type ComputeRackUnit
     * @memberof ComputeApipatchComputeRackUnit
     */
    computeRackUnit: ComputeRackUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ComputeApipatchComputeRackUnit
     */
    ifMatch?: string
}

export interface ComputeApiPatchComputeServerSettingRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApipatchComputeServerSetting
     */
    moid: string
    /**
     * The &#39;compute.ServerSetting&#39; resource to update.
     * @type ComputeServerSetting
     * @memberof ComputeApipatchComputeServerSetting
     */
    computeServerSetting: ComputeServerSetting
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ComputeApipatchComputeServerSetting
     */
    ifMatch?: string
}

export interface ComputeApiUpdateComputeBladeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApiupdateComputeBlade
     */
    moid: string
    /**
     * The &#39;compute.Blade&#39; resource to update.
     * @type ComputeBlade
     * @memberof ComputeApiupdateComputeBlade
     */
    computeBlade: ComputeBlade
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ComputeApiupdateComputeBlade
     */
    ifMatch?: string
}

export interface ComputeApiUpdateComputeBoardRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApiupdateComputeBoard
     */
    moid: string
    /**
     * The &#39;compute.Board&#39; resource to update.
     * @type ComputeBoard
     * @memberof ComputeApiupdateComputeBoard
     */
    computeBoard: ComputeBoard
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ComputeApiupdateComputeBoard
     */
    ifMatch?: string
}

export interface ComputeApiUpdateComputeRackUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApiupdateComputeRackUnit
     */
    moid: string
    /**
     * The &#39;compute.RackUnit&#39; resource to update.
     * @type ComputeRackUnit
     * @memberof ComputeApiupdateComputeRackUnit
     */
    computeRackUnit: ComputeRackUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ComputeApiupdateComputeRackUnit
     */
    ifMatch?: string
}

export interface ComputeApiUpdateComputeServerSettingRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ComputeApiupdateComputeServerSetting
     */
    moid: string
    /**
     * The &#39;compute.ServerSetting&#39; resource to update.
     * @type ComputeServerSetting
     * @memberof ComputeApiupdateComputeServerSetting
     */
    computeServerSetting: ComputeServerSetting
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ComputeApiupdateComputeServerSetting
     */
    ifMatch?: string
}


export class ObjectComputeApi {
    private api: ObservableComputeApi

    public constructor(configuration: Configuration, requestFactory?: ComputeApiRequestFactory, responseProcessor?: ComputeApiResponseProcessor) {
        this.api = new ObservableComputeApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'compute.Blade' resource.
     * @param param the request object
     */
    public getComputeBladeByMoid(param: ComputeApiGetComputeBladeByMoidRequest, options?: Configuration): Promise<ComputeBlade> {
        return this.api.getComputeBladeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'compute.Blade' resource.
     * @param param the request object
     */
    public getComputeBladeList(param: ComputeApiGetComputeBladeListRequest, options?: Configuration): Promise<ComputeBladeResponse> {
        return this.api.getComputeBladeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'compute.Board' resource.
     * @param param the request object
     */
    public getComputeBoardByMoid(param: ComputeApiGetComputeBoardByMoidRequest, options?: Configuration): Promise<ComputeBoard> {
        return this.api.getComputeBoardByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'compute.Board' resource.
     * @param param the request object
     */
    public getComputeBoardList(param: ComputeApiGetComputeBoardListRequest, options?: Configuration): Promise<ComputeBoardResponse> {
        return this.api.getComputeBoardList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'compute.PhysicalSummary' resource.
     * @param param the request object
     */
    public getComputePhysicalSummaryByMoid(param: ComputeApiGetComputePhysicalSummaryByMoidRequest, options?: Configuration): Promise<ComputePhysicalSummary> {
        return this.api.getComputePhysicalSummaryByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'compute.PhysicalSummary' resource.
     * @param param the request object
     */
    public getComputePhysicalSummaryList(param: ComputeApiGetComputePhysicalSummaryListRequest, options?: Configuration): Promise<ComputePhysicalSummaryResponse> {
        return this.api.getComputePhysicalSummaryList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'compute.RackUnit' resource.
     * @param param the request object
     */
    public getComputeRackUnitByMoid(param: ComputeApiGetComputeRackUnitByMoidRequest, options?: Configuration): Promise<ComputeRackUnit> {
        return this.api.getComputeRackUnitByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'compute.RackUnit' resource.
     * @param param the request object
     */
    public getComputeRackUnitList(param: ComputeApiGetComputeRackUnitListRequest, options?: Configuration): Promise<ComputeRackUnitResponse> {
        return this.api.getComputeRackUnitList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'compute.ServerSetting' resource.
     * @param param the request object
     */
    public getComputeServerSettingByMoid(param: ComputeApiGetComputeServerSettingByMoidRequest, options?: Configuration): Promise<ComputeServerSetting> {
        return this.api.getComputeServerSettingByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'compute.ServerSetting' resource.
     * @param param the request object
     */
    public getComputeServerSettingList(param: ComputeApiGetComputeServerSettingListRequest, options?: Configuration): Promise<ComputeServerSettingResponse> {
        return this.api.getComputeServerSettingList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'compute.Blade' resource.
     * @param param the request object
     */
    public patchComputeBlade(param: ComputeApiPatchComputeBladeRequest, options?: Configuration): Promise<ComputeBlade> {
        return this.api.patchComputeBlade(param.moid, param.computeBlade, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'compute.Board' resource.
     * @param param the request object
     */
    public patchComputeBoard(param: ComputeApiPatchComputeBoardRequest, options?: Configuration): Promise<ComputeBoard> {
        return this.api.patchComputeBoard(param.moid, param.computeBoard, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'compute.RackUnit' resource.
     * @param param the request object
     */
    public patchComputeRackUnit(param: ComputeApiPatchComputeRackUnitRequest, options?: Configuration): Promise<ComputeRackUnit> {
        return this.api.patchComputeRackUnit(param.moid, param.computeRackUnit, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'compute.ServerSetting' resource.
     * @param param the request object
     */
    public patchComputeServerSetting(param: ComputeApiPatchComputeServerSettingRequest, options?: Configuration): Promise<ComputeServerSetting> {
        return this.api.patchComputeServerSetting(param.moid, param.computeServerSetting, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'compute.Blade' resource.
     * @param param the request object
     */
    public updateComputeBlade(param: ComputeApiUpdateComputeBladeRequest, options?: Configuration): Promise<ComputeBlade> {
        return this.api.updateComputeBlade(param.moid, param.computeBlade, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'compute.Board' resource.
     * @param param the request object
     */
    public updateComputeBoard(param: ComputeApiUpdateComputeBoardRequest, options?: Configuration): Promise<ComputeBoard> {
        return this.api.updateComputeBoard(param.moid, param.computeBoard, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'compute.RackUnit' resource.
     * @param param the request object
     */
    public updateComputeRackUnit(param: ComputeApiUpdateComputeRackUnitRequest, options?: Configuration): Promise<ComputeRackUnit> {
        return this.api.updateComputeRackUnit(param.moid, param.computeRackUnit, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'compute.ServerSetting' resource.
     * @param param the request object
     */
    public updateComputeServerSetting(param: ComputeApiUpdateComputeServerSettingRequest, options?: Configuration): Promise<ComputeServerSetting> {
        return this.api.updateComputeServerSetting(param.moid, param.computeServerSetting, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableCondApi } from "./ObservableAPI";
import { CondApiRequestFactory, CondApiResponseProcessor} from "../apis/CondApi";

export interface CondApiGetCondAlarmByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof CondApigetCondAlarmByMoid
     */
    moid: string
}

export interface CondApiGetCondAlarmListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof CondApigetCondAlarmList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof CondApigetCondAlarmList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof CondApigetCondAlarmList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof CondApigetCondAlarmList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof CondApigetCondAlarmList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof CondApigetCondAlarmList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof CondApigetCondAlarmList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof CondApigetCondAlarmList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof CondApigetCondAlarmList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof CondApigetCondAlarmList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof CondApigetCondAlarmList
     */
    tags?: string
}

export interface CondApiGetCondHclStatusByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof CondApigetCondHclStatusByMoid
     */
    moid: string
}

export interface CondApiGetCondHclStatusDetailByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof CondApigetCondHclStatusDetailByMoid
     */
    moid: string
}

export interface CondApiGetCondHclStatusDetailListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof CondApigetCondHclStatusDetailList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof CondApigetCondHclStatusDetailList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof CondApigetCondHclStatusDetailList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof CondApigetCondHclStatusDetailList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof CondApigetCondHclStatusDetailList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof CondApigetCondHclStatusDetailList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof CondApigetCondHclStatusDetailList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof CondApigetCondHclStatusDetailList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof CondApigetCondHclStatusDetailList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof CondApigetCondHclStatusDetailList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof CondApigetCondHclStatusDetailList
     */
    tags?: string
}

export interface CondApiGetCondHclStatusJobByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof CondApigetCondHclStatusJobByMoid
     */
    moid: string
}

export interface CondApiGetCondHclStatusJobListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof CondApigetCondHclStatusJobList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof CondApigetCondHclStatusJobList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof CondApigetCondHclStatusJobList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof CondApigetCondHclStatusJobList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof CondApigetCondHclStatusJobList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof CondApigetCondHclStatusJobList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof CondApigetCondHclStatusJobList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof CondApigetCondHclStatusJobList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof CondApigetCondHclStatusJobList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof CondApigetCondHclStatusJobList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof CondApigetCondHclStatusJobList
     */
    tags?: string
}

export interface CondApiGetCondHclStatusListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof CondApigetCondHclStatusList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof CondApigetCondHclStatusList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof CondApigetCondHclStatusList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof CondApigetCondHclStatusList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof CondApigetCondHclStatusList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof CondApigetCondHclStatusList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof CondApigetCondHclStatusList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof CondApigetCondHclStatusList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof CondApigetCondHclStatusList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof CondApigetCondHclStatusList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof CondApigetCondHclStatusList
     */
    tags?: string
}


export class ObjectCondApi {
    private api: ObservableCondApi

    public constructor(configuration: Configuration, requestFactory?: CondApiRequestFactory, responseProcessor?: CondApiResponseProcessor) {
        this.api = new ObservableCondApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'cond.Alarm' resource.
     * @param param the request object
     */
    public getCondAlarmByMoid(param: CondApiGetCondAlarmByMoidRequest, options?: Configuration): Promise<CondAlarm> {
        return this.api.getCondAlarmByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'cond.Alarm' resource.
     * @param param the request object
     */
    public getCondAlarmList(param: CondApiGetCondAlarmListRequest, options?: Configuration): Promise<CondAlarmResponse> {
        return this.api.getCondAlarmList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'cond.HclStatus' resource.
     * @param param the request object
     */
    public getCondHclStatusByMoid(param: CondApiGetCondHclStatusByMoidRequest, options?: Configuration): Promise<CondHclStatus> {
        return this.api.getCondHclStatusByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'cond.HclStatusDetail' resource.
     * @param param the request object
     */
    public getCondHclStatusDetailByMoid(param: CondApiGetCondHclStatusDetailByMoidRequest, options?: Configuration): Promise<CondHclStatusDetail> {
        return this.api.getCondHclStatusDetailByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'cond.HclStatusDetail' resource.
     * @param param the request object
     */
    public getCondHclStatusDetailList(param: CondApiGetCondHclStatusDetailListRequest, options?: Configuration): Promise<CondHclStatusDetailResponse> {
        return this.api.getCondHclStatusDetailList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'cond.HclStatusJob' resource.
     * @param param the request object
     */
    public getCondHclStatusJobByMoid(param: CondApiGetCondHclStatusJobByMoidRequest, options?: Configuration): Promise<CondHclStatusJob> {
        return this.api.getCondHclStatusJobByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'cond.HclStatusJob' resource.
     * @param param the request object
     */
    public getCondHclStatusJobList(param: CondApiGetCondHclStatusJobListRequest, options?: Configuration): Promise<CondHclStatusJobResponse> {
        return this.api.getCondHclStatusJobList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'cond.HclStatus' resource.
     * @param param the request object
     */
    public getCondHclStatusList(param: CondApiGetCondHclStatusListRequest, options?: Configuration): Promise<CondHclStatusResponse> {
        return this.api.getCondHclStatusList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableConnectorpackApi } from "./ObservableAPI";
import { ConnectorpackApiRequestFactory, ConnectorpackApiResponseProcessor} from "../apis/ConnectorpackApi";

export interface ConnectorpackApiCreateConnectorpackConnectorPackUpgradeRequest {
    /**
     * The &#39;connectorpack.ConnectorPackUpgrade&#39; resource to create.
     * @type ConnectorpackConnectorPackUpgrade
     * @memberof ConnectorpackApicreateConnectorpackConnectorPackUpgrade
     */
    connectorpackConnectorPackUpgrade: ConnectorpackConnectorPackUpgrade
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ConnectorpackApicreateConnectorpackConnectorPackUpgrade
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ConnectorpackApicreateConnectorpackConnectorPackUpgrade
     */
    ifNoneMatch?: string
}

export interface ConnectorpackApiDeleteConnectorpackConnectorPackUpgradeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ConnectorpackApideleteConnectorpackConnectorPackUpgrade
     */
    moid: string
}

export interface ConnectorpackApiGetConnectorpackConnectorPackUpgradeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeByMoid
     */
    moid: string
}

export interface ConnectorpackApiGetConnectorpackConnectorPackUpgradeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackConnectorPackUpgradeList
     */
    tags?: string
}

export interface ConnectorpackApiGetConnectorpackUpgradeImpactByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactByMoid
     */
    moid: string
}

export interface ConnectorpackApiGetConnectorpackUpgradeImpactListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ConnectorpackApigetConnectorpackUpgradeImpactList
     */
    tags?: string
}


export class ObjectConnectorpackApi {
    private api: ObservableConnectorpackApi

    public constructor(configuration: Configuration, requestFactory?: ConnectorpackApiRequestFactory, responseProcessor?: ConnectorpackApiResponseProcessor) {
        this.api = new ObservableConnectorpackApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'connectorpack.ConnectorPackUpgrade' resource.
     * @param param the request object
     */
    public createConnectorpackConnectorPackUpgrade(param: ConnectorpackApiCreateConnectorpackConnectorPackUpgradeRequest, options?: Configuration): Promise<ConnectorpackConnectorPackUpgrade> {
        return this.api.createConnectorpackConnectorPackUpgrade(param.connectorpackConnectorPackUpgrade, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'connectorpack.ConnectorPackUpgrade' resource.
     * @param param the request object
     */
    public deleteConnectorpackConnectorPackUpgrade(param: ConnectorpackApiDeleteConnectorpackConnectorPackUpgradeRequest, options?: Configuration): Promise<void> {
        return this.api.deleteConnectorpackConnectorPackUpgrade(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'connectorpack.ConnectorPackUpgrade' resource.
     * @param param the request object
     */
    public getConnectorpackConnectorPackUpgradeByMoid(param: ConnectorpackApiGetConnectorpackConnectorPackUpgradeByMoidRequest, options?: Configuration): Promise<ConnectorpackConnectorPackUpgrade> {
        return this.api.getConnectorpackConnectorPackUpgradeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'connectorpack.ConnectorPackUpgrade' resource.
     * @param param the request object
     */
    public getConnectorpackConnectorPackUpgradeList(param: ConnectorpackApiGetConnectorpackConnectorPackUpgradeListRequest, options?: Configuration): Promise<ConnectorpackConnectorPackUpgradeResponse> {
        return this.api.getConnectorpackConnectorPackUpgradeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'connectorpack.UpgradeImpact' resource.
     * @param param the request object
     */
    public getConnectorpackUpgradeImpactByMoid(param: ConnectorpackApiGetConnectorpackUpgradeImpactByMoidRequest, options?: Configuration): Promise<ConnectorpackUpgradeImpact> {
        return this.api.getConnectorpackUpgradeImpactByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'connectorpack.UpgradeImpact' resource.
     * @param param the request object
     */
    public getConnectorpackUpgradeImpactList(param: ConnectorpackApiGetConnectorpackUpgradeImpactListRequest, options?: Configuration): Promise<ConnectorpackUpgradeImpactResponse> {
        return this.api.getConnectorpackUpgradeImpactList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableDeviceconnectorApi } from "./ObservableAPI";
import { DeviceconnectorApiRequestFactory, DeviceconnectorApiResponseProcessor} from "../apis/DeviceconnectorApi";

export interface DeviceconnectorApiCreateDeviceconnectorPolicyRequest {
    /**
     * The &#39;deviceconnector.Policy&#39; resource to create.
     * @type DeviceconnectorPolicy
     * @memberof DeviceconnectorApicreateDeviceconnectorPolicy
     */
    deviceconnectorPolicy: DeviceconnectorPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof DeviceconnectorApicreateDeviceconnectorPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof DeviceconnectorApicreateDeviceconnectorPolicy
     */
    ifNoneMatch?: string
}

export interface DeviceconnectorApiDeleteDeviceconnectorPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof DeviceconnectorApideleteDeviceconnectorPolicy
     */
    moid: string
}

export interface DeviceconnectorApiGetDeviceconnectorPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyByMoid
     */
    moid: string
}

export interface DeviceconnectorApiGetDeviceconnectorPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof DeviceconnectorApigetDeviceconnectorPolicyList
     */
    tags?: string
}

export interface DeviceconnectorApiPatchDeviceconnectorPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof DeviceconnectorApipatchDeviceconnectorPolicy
     */
    moid: string
    /**
     * The &#39;deviceconnector.Policy&#39; resource to update.
     * @type DeviceconnectorPolicy
     * @memberof DeviceconnectorApipatchDeviceconnectorPolicy
     */
    deviceconnectorPolicy: DeviceconnectorPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof DeviceconnectorApipatchDeviceconnectorPolicy
     */
    ifMatch?: string
}

export interface DeviceconnectorApiUpdateDeviceconnectorPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof DeviceconnectorApiupdateDeviceconnectorPolicy
     */
    moid: string
    /**
     * The &#39;deviceconnector.Policy&#39; resource to update.
     * @type DeviceconnectorPolicy
     * @memberof DeviceconnectorApiupdateDeviceconnectorPolicy
     */
    deviceconnectorPolicy: DeviceconnectorPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof DeviceconnectorApiupdateDeviceconnectorPolicy
     */
    ifMatch?: string
}


export class ObjectDeviceconnectorApi {
    private api: ObservableDeviceconnectorApi

    public constructor(configuration: Configuration, requestFactory?: DeviceconnectorApiRequestFactory, responseProcessor?: DeviceconnectorApiResponseProcessor) {
        this.api = new ObservableDeviceconnectorApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'deviceconnector.Policy' resource.
     * @param param the request object
     */
    public createDeviceconnectorPolicy(param: DeviceconnectorApiCreateDeviceconnectorPolicyRequest, options?: Configuration): Promise<DeviceconnectorPolicy> {
        return this.api.createDeviceconnectorPolicy(param.deviceconnectorPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'deviceconnector.Policy' resource.
     * @param param the request object
     */
    public deleteDeviceconnectorPolicy(param: DeviceconnectorApiDeleteDeviceconnectorPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteDeviceconnectorPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'deviceconnector.Policy' resource.
     * @param param the request object
     */
    public getDeviceconnectorPolicyByMoid(param: DeviceconnectorApiGetDeviceconnectorPolicyByMoidRequest, options?: Configuration): Promise<DeviceconnectorPolicy> {
        return this.api.getDeviceconnectorPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'deviceconnector.Policy' resource.
     * @param param the request object
     */
    public getDeviceconnectorPolicyList(param: DeviceconnectorApiGetDeviceconnectorPolicyListRequest, options?: Configuration): Promise<DeviceconnectorPolicyResponse> {
        return this.api.getDeviceconnectorPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'deviceconnector.Policy' resource.
     * @param param the request object
     */
    public patchDeviceconnectorPolicy(param: DeviceconnectorApiPatchDeviceconnectorPolicyRequest, options?: Configuration): Promise<DeviceconnectorPolicy> {
        return this.api.patchDeviceconnectorPolicy(param.moid, param.deviceconnectorPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'deviceconnector.Policy' resource.
     * @param param the request object
     */
    public updateDeviceconnectorPolicy(param: DeviceconnectorApiUpdateDeviceconnectorPolicyRequest, options?: Configuration): Promise<DeviceconnectorPolicy> {
        return this.api.updateDeviceconnectorPolicy(param.moid, param.deviceconnectorPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableEquipmentApi } from "./ObservableAPI";
import { EquipmentApiRequestFactory, EquipmentApiResponseProcessor} from "../apis/EquipmentApi";

export interface EquipmentApiGetEquipmentChassisByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentChassisByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentChassisListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentChassisList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentChassisList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentChassisList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentChassisList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentChassisList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentChassisList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentChassisList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentChassisList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentChassisList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentChassisList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentChassisList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentDeviceSummaryByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentDeviceSummaryByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentDeviceSummaryListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentDeviceSummaryList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentFanByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentFanByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentFanListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentFanList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentFanList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentFanList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentFanList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentFanList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentFanList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentFanList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentFanList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentFanList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentFanList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentFanList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentFanModuleByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentFanModuleByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentFanModuleListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentFanModuleList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentFexByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentFexByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentFexListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentFexList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentFexList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentFexList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentFexList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentFexList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentFexList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentFexList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentFexList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentFexList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentFexList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentFexList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentIoCardByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentIoCardByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentIoCardListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentIoCardList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentIoExpanderByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentIoExpanderByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentIoExpanderListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentIoExpanderList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentLocatorLedByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentLocatorLedByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentLocatorLedListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentLocatorLedList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentPsuByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentPsuByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentPsuListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentPsuList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentPsuList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentPsuList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentPsuList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentPsuList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentPsuList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentPsuList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentPsuList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentPsuList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentPsuList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentPsuList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentRackEnclosureByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentRackEnclosureListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentRackEnclosureSlotByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentRackEnclosureSlotListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentRackEnclosureSlotList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentSharedIoModuleByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentSharedIoModuleByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentSharedIoModuleListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentSharedIoModuleList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentSwitchCardByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentSwitchCardByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentSwitchCardListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentSwitchCardList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentSystemIoControllerByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentSystemIoControllerByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentSystemIoControllerListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentSystemIoControllerList
     */
    tags?: string
}

export interface EquipmentApiGetEquipmentTpmByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApigetEquipmentTpmByMoid
     */
    moid: string
}

export interface EquipmentApiGetEquipmentTpmListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EquipmentApigetEquipmentTpmList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EquipmentApigetEquipmentTpmList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentTpmList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EquipmentApigetEquipmentTpmList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EquipmentApigetEquipmentTpmList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EquipmentApigetEquipmentTpmList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EquipmentApigetEquipmentTpmList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EquipmentApigetEquipmentTpmList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EquipmentApigetEquipmentTpmList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EquipmentApigetEquipmentTpmList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EquipmentApigetEquipmentTpmList
     */
    tags?: string
}

export interface EquipmentApiPatchEquipmentChassisRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentChassis
     */
    moid: string
    /**
     * The &#39;equipment.Chassis&#39; resource to update.
     * @type EquipmentChassis
     * @memberof EquipmentApipatchEquipmentChassis
     */
    equipmentChassis: EquipmentChassis
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentChassis
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentFanRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentFan
     */
    moid: string
    /**
     * The &#39;equipment.Fan&#39; resource to update.
     * @type EquipmentFan
     * @memberof EquipmentApipatchEquipmentFan
     */
    equipmentFan: EquipmentFan
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentFan
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentFanModuleRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentFanModule
     */
    moid: string
    /**
     * The &#39;equipment.FanModule&#39; resource to update.
     * @type EquipmentFanModule
     * @memberof EquipmentApipatchEquipmentFanModule
     */
    equipmentFanModule: EquipmentFanModule
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentFanModule
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentFexRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentFex
     */
    moid: string
    /**
     * The &#39;equipment.Fex&#39; resource to update.
     * @type EquipmentFex
     * @memberof EquipmentApipatchEquipmentFex
     */
    equipmentFex: EquipmentFex
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentFex
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentIoCardRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentIoCard
     */
    moid: string
    /**
     * The &#39;equipment.IoCard&#39; resource to update.
     * @type EquipmentIoCard
     * @memberof EquipmentApipatchEquipmentIoCard
     */
    equipmentIoCard: EquipmentIoCard
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentIoCard
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentIoExpanderRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentIoExpander
     */
    moid: string
    /**
     * The &#39;equipment.IoExpander&#39; resource to update.
     * @type EquipmentIoExpander
     * @memberof EquipmentApipatchEquipmentIoExpander
     */
    equipmentIoExpander: EquipmentIoExpander
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentIoExpander
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentLocatorLedRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentLocatorLed
     */
    moid: string
    /**
     * The &#39;equipment.LocatorLed&#39; resource to update.
     * @type EquipmentLocatorLed
     * @memberof EquipmentApipatchEquipmentLocatorLed
     */
    equipmentLocatorLed: EquipmentLocatorLed
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentLocatorLed
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentPsuRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentPsu
     */
    moid: string
    /**
     * The &#39;equipment.Psu&#39; resource to update.
     * @type EquipmentPsu
     * @memberof EquipmentApipatchEquipmentPsu
     */
    equipmentPsu: EquipmentPsu
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentPsu
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentRackEnclosureRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentRackEnclosure
     */
    moid: string
    /**
     * The &#39;equipment.RackEnclosure&#39; resource to update.
     * @type EquipmentRackEnclosure
     * @memberof EquipmentApipatchEquipmentRackEnclosure
     */
    equipmentRackEnclosure: EquipmentRackEnclosure
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentRackEnclosure
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentRackEnclosureSlotRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentRackEnclosureSlot
     */
    moid: string
    /**
     * The &#39;equipment.RackEnclosureSlot&#39; resource to update.
     * @type EquipmentRackEnclosureSlot
     * @memberof EquipmentApipatchEquipmentRackEnclosureSlot
     */
    equipmentRackEnclosureSlot: EquipmentRackEnclosureSlot
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentRackEnclosureSlot
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentSharedIoModuleRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentSharedIoModule
     */
    moid: string
    /**
     * The &#39;equipment.SharedIoModule&#39; resource to update.
     * @type EquipmentSharedIoModule
     * @memberof EquipmentApipatchEquipmentSharedIoModule
     */
    equipmentSharedIoModule: EquipmentSharedIoModule
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentSharedIoModule
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentSwitchCardRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentSwitchCard
     */
    moid: string
    /**
     * The &#39;equipment.SwitchCard&#39; resource to update.
     * @type EquipmentSwitchCard
     * @memberof EquipmentApipatchEquipmentSwitchCard
     */
    equipmentSwitchCard: EquipmentSwitchCard
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentSwitchCard
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentSystemIoControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentSystemIoController
     */
    moid: string
    /**
     * The &#39;equipment.SystemIoController&#39; resource to update.
     * @type EquipmentSystemIoController
     * @memberof EquipmentApipatchEquipmentSystemIoController
     */
    equipmentSystemIoController: EquipmentSystemIoController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentSystemIoController
     */
    ifMatch?: string
}

export interface EquipmentApiPatchEquipmentTpmRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApipatchEquipmentTpm
     */
    moid: string
    /**
     * The &#39;equipment.Tpm&#39; resource to update.
     * @type EquipmentTpm
     * @memberof EquipmentApipatchEquipmentTpm
     */
    equipmentTpm: EquipmentTpm
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApipatchEquipmentTpm
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentChassisRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentChassis
     */
    moid: string
    /**
     * The &#39;equipment.Chassis&#39; resource to update.
     * @type EquipmentChassis
     * @memberof EquipmentApiupdateEquipmentChassis
     */
    equipmentChassis: EquipmentChassis
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentChassis
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentFanRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentFan
     */
    moid: string
    /**
     * The &#39;equipment.Fan&#39; resource to update.
     * @type EquipmentFan
     * @memberof EquipmentApiupdateEquipmentFan
     */
    equipmentFan: EquipmentFan
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentFan
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentFanModuleRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentFanModule
     */
    moid: string
    /**
     * The &#39;equipment.FanModule&#39; resource to update.
     * @type EquipmentFanModule
     * @memberof EquipmentApiupdateEquipmentFanModule
     */
    equipmentFanModule: EquipmentFanModule
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentFanModule
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentFexRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentFex
     */
    moid: string
    /**
     * The &#39;equipment.Fex&#39; resource to update.
     * @type EquipmentFex
     * @memberof EquipmentApiupdateEquipmentFex
     */
    equipmentFex: EquipmentFex
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentFex
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentIoCardRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentIoCard
     */
    moid: string
    /**
     * The &#39;equipment.IoCard&#39; resource to update.
     * @type EquipmentIoCard
     * @memberof EquipmentApiupdateEquipmentIoCard
     */
    equipmentIoCard: EquipmentIoCard
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentIoCard
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentIoExpanderRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentIoExpander
     */
    moid: string
    /**
     * The &#39;equipment.IoExpander&#39; resource to update.
     * @type EquipmentIoExpander
     * @memberof EquipmentApiupdateEquipmentIoExpander
     */
    equipmentIoExpander: EquipmentIoExpander
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentIoExpander
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentLocatorLedRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentLocatorLed
     */
    moid: string
    /**
     * The &#39;equipment.LocatorLed&#39; resource to update.
     * @type EquipmentLocatorLed
     * @memberof EquipmentApiupdateEquipmentLocatorLed
     */
    equipmentLocatorLed: EquipmentLocatorLed
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentLocatorLed
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentPsuRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentPsu
     */
    moid: string
    /**
     * The &#39;equipment.Psu&#39; resource to update.
     * @type EquipmentPsu
     * @memberof EquipmentApiupdateEquipmentPsu
     */
    equipmentPsu: EquipmentPsu
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentPsu
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentRackEnclosureRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentRackEnclosure
     */
    moid: string
    /**
     * The &#39;equipment.RackEnclosure&#39; resource to update.
     * @type EquipmentRackEnclosure
     * @memberof EquipmentApiupdateEquipmentRackEnclosure
     */
    equipmentRackEnclosure: EquipmentRackEnclosure
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentRackEnclosure
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentRackEnclosureSlotRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentRackEnclosureSlot
     */
    moid: string
    /**
     * The &#39;equipment.RackEnclosureSlot&#39; resource to update.
     * @type EquipmentRackEnclosureSlot
     * @memberof EquipmentApiupdateEquipmentRackEnclosureSlot
     */
    equipmentRackEnclosureSlot: EquipmentRackEnclosureSlot
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentRackEnclosureSlot
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentSharedIoModuleRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentSharedIoModule
     */
    moid: string
    /**
     * The &#39;equipment.SharedIoModule&#39; resource to update.
     * @type EquipmentSharedIoModule
     * @memberof EquipmentApiupdateEquipmentSharedIoModule
     */
    equipmentSharedIoModule: EquipmentSharedIoModule
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentSharedIoModule
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentSwitchCardRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentSwitchCard
     */
    moid: string
    /**
     * The &#39;equipment.SwitchCard&#39; resource to update.
     * @type EquipmentSwitchCard
     * @memberof EquipmentApiupdateEquipmentSwitchCard
     */
    equipmentSwitchCard: EquipmentSwitchCard
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentSwitchCard
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentSystemIoControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentSystemIoController
     */
    moid: string
    /**
     * The &#39;equipment.SystemIoController&#39; resource to update.
     * @type EquipmentSystemIoController
     * @memberof EquipmentApiupdateEquipmentSystemIoController
     */
    equipmentSystemIoController: EquipmentSystemIoController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentSystemIoController
     */
    ifMatch?: string
}

export interface EquipmentApiUpdateEquipmentTpmRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EquipmentApiupdateEquipmentTpm
     */
    moid: string
    /**
     * The &#39;equipment.Tpm&#39; resource to update.
     * @type EquipmentTpm
     * @memberof EquipmentApiupdateEquipmentTpm
     */
    equipmentTpm: EquipmentTpm
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EquipmentApiupdateEquipmentTpm
     */
    ifMatch?: string
}


export class ObjectEquipmentApi {
    private api: ObservableEquipmentApi

    public constructor(configuration: Configuration, requestFactory?: EquipmentApiRequestFactory, responseProcessor?: EquipmentApiResponseProcessor) {
        this.api = new ObservableEquipmentApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'equipment.Chassis' resource.
     * @param param the request object
     */
    public getEquipmentChassisByMoid(param: EquipmentApiGetEquipmentChassisByMoidRequest, options?: Configuration): Promise<EquipmentChassis> {
        return this.api.getEquipmentChassisByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.Chassis' resource.
     * @param param the request object
     */
    public getEquipmentChassisList(param: EquipmentApiGetEquipmentChassisListRequest, options?: Configuration): Promise<EquipmentChassisResponse> {
        return this.api.getEquipmentChassisList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.DeviceSummary' resource.
     * @param param the request object
     */
    public getEquipmentDeviceSummaryByMoid(param: EquipmentApiGetEquipmentDeviceSummaryByMoidRequest, options?: Configuration): Promise<EquipmentDeviceSummary> {
        return this.api.getEquipmentDeviceSummaryByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.DeviceSummary' resource.
     * @param param the request object
     */
    public getEquipmentDeviceSummaryList(param: EquipmentApiGetEquipmentDeviceSummaryListRequest, options?: Configuration): Promise<EquipmentDeviceSummaryResponse> {
        return this.api.getEquipmentDeviceSummaryList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.Fan' resource.
     * @param param the request object
     */
    public getEquipmentFanByMoid(param: EquipmentApiGetEquipmentFanByMoidRequest, options?: Configuration): Promise<EquipmentFan> {
        return this.api.getEquipmentFanByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.Fan' resource.
     * @param param the request object
     */
    public getEquipmentFanList(param: EquipmentApiGetEquipmentFanListRequest, options?: Configuration): Promise<EquipmentFanResponse> {
        return this.api.getEquipmentFanList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.FanModule' resource.
     * @param param the request object
     */
    public getEquipmentFanModuleByMoid(param: EquipmentApiGetEquipmentFanModuleByMoidRequest, options?: Configuration): Promise<EquipmentFanModule> {
        return this.api.getEquipmentFanModuleByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.FanModule' resource.
     * @param param the request object
     */
    public getEquipmentFanModuleList(param: EquipmentApiGetEquipmentFanModuleListRequest, options?: Configuration): Promise<EquipmentFanModuleResponse> {
        return this.api.getEquipmentFanModuleList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.Fex' resource.
     * @param param the request object
     */
    public getEquipmentFexByMoid(param: EquipmentApiGetEquipmentFexByMoidRequest, options?: Configuration): Promise<EquipmentFex> {
        return this.api.getEquipmentFexByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.Fex' resource.
     * @param param the request object
     */
    public getEquipmentFexList(param: EquipmentApiGetEquipmentFexListRequest, options?: Configuration): Promise<EquipmentFexResponse> {
        return this.api.getEquipmentFexList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.IoCard' resource.
     * @param param the request object
     */
    public getEquipmentIoCardByMoid(param: EquipmentApiGetEquipmentIoCardByMoidRequest, options?: Configuration): Promise<EquipmentIoCard> {
        return this.api.getEquipmentIoCardByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.IoCard' resource.
     * @param param the request object
     */
    public getEquipmentIoCardList(param: EquipmentApiGetEquipmentIoCardListRequest, options?: Configuration): Promise<EquipmentIoCardResponse> {
        return this.api.getEquipmentIoCardList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.IoExpander' resource.
     * @param param the request object
     */
    public getEquipmentIoExpanderByMoid(param: EquipmentApiGetEquipmentIoExpanderByMoidRequest, options?: Configuration): Promise<EquipmentIoExpander> {
        return this.api.getEquipmentIoExpanderByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.IoExpander' resource.
     * @param param the request object
     */
    public getEquipmentIoExpanderList(param: EquipmentApiGetEquipmentIoExpanderListRequest, options?: Configuration): Promise<EquipmentIoExpanderResponse> {
        return this.api.getEquipmentIoExpanderList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.LocatorLed' resource.
     * @param param the request object
     */
    public getEquipmentLocatorLedByMoid(param: EquipmentApiGetEquipmentLocatorLedByMoidRequest, options?: Configuration): Promise<EquipmentLocatorLed> {
        return this.api.getEquipmentLocatorLedByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.LocatorLed' resource.
     * @param param the request object
     */
    public getEquipmentLocatorLedList(param: EquipmentApiGetEquipmentLocatorLedListRequest, options?: Configuration): Promise<EquipmentLocatorLedResponse> {
        return this.api.getEquipmentLocatorLedList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.Psu' resource.
     * @param param the request object
     */
    public getEquipmentPsuByMoid(param: EquipmentApiGetEquipmentPsuByMoidRequest, options?: Configuration): Promise<EquipmentPsu> {
        return this.api.getEquipmentPsuByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.Psu' resource.
     * @param param the request object
     */
    public getEquipmentPsuList(param: EquipmentApiGetEquipmentPsuListRequest, options?: Configuration): Promise<EquipmentPsuResponse> {
        return this.api.getEquipmentPsuList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.RackEnclosure' resource.
     * @param param the request object
     */
    public getEquipmentRackEnclosureByMoid(param: EquipmentApiGetEquipmentRackEnclosureByMoidRequest, options?: Configuration): Promise<EquipmentRackEnclosure> {
        return this.api.getEquipmentRackEnclosureByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.RackEnclosure' resource.
     * @param param the request object
     */
    public getEquipmentRackEnclosureList(param: EquipmentApiGetEquipmentRackEnclosureListRequest, options?: Configuration): Promise<EquipmentRackEnclosureResponse> {
        return this.api.getEquipmentRackEnclosureList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.RackEnclosureSlot' resource.
     * @param param the request object
     */
    public getEquipmentRackEnclosureSlotByMoid(param: EquipmentApiGetEquipmentRackEnclosureSlotByMoidRequest, options?: Configuration): Promise<EquipmentRackEnclosureSlot> {
        return this.api.getEquipmentRackEnclosureSlotByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.RackEnclosureSlot' resource.
     * @param param the request object
     */
    public getEquipmentRackEnclosureSlotList(param: EquipmentApiGetEquipmentRackEnclosureSlotListRequest, options?: Configuration): Promise<EquipmentRackEnclosureSlotResponse> {
        return this.api.getEquipmentRackEnclosureSlotList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.SharedIoModule' resource.
     * @param param the request object
     */
    public getEquipmentSharedIoModuleByMoid(param: EquipmentApiGetEquipmentSharedIoModuleByMoidRequest, options?: Configuration): Promise<EquipmentSharedIoModule> {
        return this.api.getEquipmentSharedIoModuleByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.SharedIoModule' resource.
     * @param param the request object
     */
    public getEquipmentSharedIoModuleList(param: EquipmentApiGetEquipmentSharedIoModuleListRequest, options?: Configuration): Promise<EquipmentSharedIoModuleResponse> {
        return this.api.getEquipmentSharedIoModuleList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.SwitchCard' resource.
     * @param param the request object
     */
    public getEquipmentSwitchCardByMoid(param: EquipmentApiGetEquipmentSwitchCardByMoidRequest, options?: Configuration): Promise<EquipmentSwitchCard> {
        return this.api.getEquipmentSwitchCardByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.SwitchCard' resource.
     * @param param the request object
     */
    public getEquipmentSwitchCardList(param: EquipmentApiGetEquipmentSwitchCardListRequest, options?: Configuration): Promise<EquipmentSwitchCardResponse> {
        return this.api.getEquipmentSwitchCardList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.SystemIoController' resource.
     * @param param the request object
     */
    public getEquipmentSystemIoControllerByMoid(param: EquipmentApiGetEquipmentSystemIoControllerByMoidRequest, options?: Configuration): Promise<EquipmentSystemIoController> {
        return this.api.getEquipmentSystemIoControllerByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.SystemIoController' resource.
     * @param param the request object
     */
    public getEquipmentSystemIoControllerList(param: EquipmentApiGetEquipmentSystemIoControllerListRequest, options?: Configuration): Promise<EquipmentSystemIoControllerResponse> {
        return this.api.getEquipmentSystemIoControllerList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.Tpm' resource.
     * @param param the request object
     */
    public getEquipmentTpmByMoid(param: EquipmentApiGetEquipmentTpmByMoidRequest, options?: Configuration): Promise<EquipmentTpm> {
        return this.api.getEquipmentTpmByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'equipment.Tpm' resource.
     * @param param the request object
     */
    public getEquipmentTpmList(param: EquipmentApiGetEquipmentTpmListRequest, options?: Configuration): Promise<EquipmentTpmResponse> {
        return this.api.getEquipmentTpmList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Chassis' resource.
     * @param param the request object
     */
    public patchEquipmentChassis(param: EquipmentApiPatchEquipmentChassisRequest, options?: Configuration): Promise<EquipmentChassis> {
        return this.api.patchEquipmentChassis(param.moid, param.equipmentChassis, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Fan' resource.
     * @param param the request object
     */
    public patchEquipmentFan(param: EquipmentApiPatchEquipmentFanRequest, options?: Configuration): Promise<EquipmentFan> {
        return this.api.patchEquipmentFan(param.moid, param.equipmentFan, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.FanModule' resource.
     * @param param the request object
     */
    public patchEquipmentFanModule(param: EquipmentApiPatchEquipmentFanModuleRequest, options?: Configuration): Promise<EquipmentFanModule> {
        return this.api.patchEquipmentFanModule(param.moid, param.equipmentFanModule, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Fex' resource.
     * @param param the request object
     */
    public patchEquipmentFex(param: EquipmentApiPatchEquipmentFexRequest, options?: Configuration): Promise<EquipmentFex> {
        return this.api.patchEquipmentFex(param.moid, param.equipmentFex, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.IoCard' resource.
     * @param param the request object
     */
    public patchEquipmentIoCard(param: EquipmentApiPatchEquipmentIoCardRequest, options?: Configuration): Promise<EquipmentIoCard> {
        return this.api.patchEquipmentIoCard(param.moid, param.equipmentIoCard, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.IoExpander' resource.
     * @param param the request object
     */
    public patchEquipmentIoExpander(param: EquipmentApiPatchEquipmentIoExpanderRequest, options?: Configuration): Promise<EquipmentIoExpander> {
        return this.api.patchEquipmentIoExpander(param.moid, param.equipmentIoExpander, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.LocatorLed' resource.
     * @param param the request object
     */
    public patchEquipmentLocatorLed(param: EquipmentApiPatchEquipmentLocatorLedRequest, options?: Configuration): Promise<EquipmentLocatorLed> {
        return this.api.patchEquipmentLocatorLed(param.moid, param.equipmentLocatorLed, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Psu' resource.
     * @param param the request object
     */
    public patchEquipmentPsu(param: EquipmentApiPatchEquipmentPsuRequest, options?: Configuration): Promise<EquipmentPsu> {
        return this.api.patchEquipmentPsu(param.moid, param.equipmentPsu, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.RackEnclosure' resource.
     * @param param the request object
     */
    public patchEquipmentRackEnclosure(param: EquipmentApiPatchEquipmentRackEnclosureRequest, options?: Configuration): Promise<EquipmentRackEnclosure> {
        return this.api.patchEquipmentRackEnclosure(param.moid, param.equipmentRackEnclosure, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.RackEnclosureSlot' resource.
     * @param param the request object
     */
    public patchEquipmentRackEnclosureSlot(param: EquipmentApiPatchEquipmentRackEnclosureSlotRequest, options?: Configuration): Promise<EquipmentRackEnclosureSlot> {
        return this.api.patchEquipmentRackEnclosureSlot(param.moid, param.equipmentRackEnclosureSlot, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.SharedIoModule' resource.
     * @param param the request object
     */
    public patchEquipmentSharedIoModule(param: EquipmentApiPatchEquipmentSharedIoModuleRequest, options?: Configuration): Promise<EquipmentSharedIoModule> {
        return this.api.patchEquipmentSharedIoModule(param.moid, param.equipmentSharedIoModule, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.SwitchCard' resource.
     * @param param the request object
     */
    public patchEquipmentSwitchCard(param: EquipmentApiPatchEquipmentSwitchCardRequest, options?: Configuration): Promise<EquipmentSwitchCard> {
        return this.api.patchEquipmentSwitchCard(param.moid, param.equipmentSwitchCard, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.SystemIoController' resource.
     * @param param the request object
     */
    public patchEquipmentSystemIoController(param: EquipmentApiPatchEquipmentSystemIoControllerRequest, options?: Configuration): Promise<EquipmentSystemIoController> {
        return this.api.patchEquipmentSystemIoController(param.moid, param.equipmentSystemIoController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Tpm' resource.
     * @param param the request object
     */
    public patchEquipmentTpm(param: EquipmentApiPatchEquipmentTpmRequest, options?: Configuration): Promise<EquipmentTpm> {
        return this.api.patchEquipmentTpm(param.moid, param.equipmentTpm, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Chassis' resource.
     * @param param the request object
     */
    public updateEquipmentChassis(param: EquipmentApiUpdateEquipmentChassisRequest, options?: Configuration): Promise<EquipmentChassis> {
        return this.api.updateEquipmentChassis(param.moid, param.equipmentChassis, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Fan' resource.
     * @param param the request object
     */
    public updateEquipmentFan(param: EquipmentApiUpdateEquipmentFanRequest, options?: Configuration): Promise<EquipmentFan> {
        return this.api.updateEquipmentFan(param.moid, param.equipmentFan, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.FanModule' resource.
     * @param param the request object
     */
    public updateEquipmentFanModule(param: EquipmentApiUpdateEquipmentFanModuleRequest, options?: Configuration): Promise<EquipmentFanModule> {
        return this.api.updateEquipmentFanModule(param.moid, param.equipmentFanModule, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Fex' resource.
     * @param param the request object
     */
    public updateEquipmentFex(param: EquipmentApiUpdateEquipmentFexRequest, options?: Configuration): Promise<EquipmentFex> {
        return this.api.updateEquipmentFex(param.moid, param.equipmentFex, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.IoCard' resource.
     * @param param the request object
     */
    public updateEquipmentIoCard(param: EquipmentApiUpdateEquipmentIoCardRequest, options?: Configuration): Promise<EquipmentIoCard> {
        return this.api.updateEquipmentIoCard(param.moid, param.equipmentIoCard, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.IoExpander' resource.
     * @param param the request object
     */
    public updateEquipmentIoExpander(param: EquipmentApiUpdateEquipmentIoExpanderRequest, options?: Configuration): Promise<EquipmentIoExpander> {
        return this.api.updateEquipmentIoExpander(param.moid, param.equipmentIoExpander, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.LocatorLed' resource.
     * @param param the request object
     */
    public updateEquipmentLocatorLed(param: EquipmentApiUpdateEquipmentLocatorLedRequest, options?: Configuration): Promise<EquipmentLocatorLed> {
        return this.api.updateEquipmentLocatorLed(param.moid, param.equipmentLocatorLed, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Psu' resource.
     * @param param the request object
     */
    public updateEquipmentPsu(param: EquipmentApiUpdateEquipmentPsuRequest, options?: Configuration): Promise<EquipmentPsu> {
        return this.api.updateEquipmentPsu(param.moid, param.equipmentPsu, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.RackEnclosure' resource.
     * @param param the request object
     */
    public updateEquipmentRackEnclosure(param: EquipmentApiUpdateEquipmentRackEnclosureRequest, options?: Configuration): Promise<EquipmentRackEnclosure> {
        return this.api.updateEquipmentRackEnclosure(param.moid, param.equipmentRackEnclosure, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.RackEnclosureSlot' resource.
     * @param param the request object
     */
    public updateEquipmentRackEnclosureSlot(param: EquipmentApiUpdateEquipmentRackEnclosureSlotRequest, options?: Configuration): Promise<EquipmentRackEnclosureSlot> {
        return this.api.updateEquipmentRackEnclosureSlot(param.moid, param.equipmentRackEnclosureSlot, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.SharedIoModule' resource.
     * @param param the request object
     */
    public updateEquipmentSharedIoModule(param: EquipmentApiUpdateEquipmentSharedIoModuleRequest, options?: Configuration): Promise<EquipmentSharedIoModule> {
        return this.api.updateEquipmentSharedIoModule(param.moid, param.equipmentSharedIoModule, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.SwitchCard' resource.
     * @param param the request object
     */
    public updateEquipmentSwitchCard(param: EquipmentApiUpdateEquipmentSwitchCardRequest, options?: Configuration): Promise<EquipmentSwitchCard> {
        return this.api.updateEquipmentSwitchCard(param.moid, param.equipmentSwitchCard, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.SystemIoController' resource.
     * @param param the request object
     */
    public updateEquipmentSystemIoController(param: EquipmentApiUpdateEquipmentSystemIoControllerRequest, options?: Configuration): Promise<EquipmentSystemIoController> {
        return this.api.updateEquipmentSystemIoController(param.moid, param.equipmentSystemIoController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'equipment.Tpm' resource.
     * @param param the request object
     */
    public updateEquipmentTpm(param: EquipmentApiUpdateEquipmentTpmRequest, options?: Configuration): Promise<EquipmentTpm> {
        return this.api.updateEquipmentTpm(param.moid, param.equipmentTpm, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableEtherApi } from "./ObservableAPI";
import { EtherApiRequestFactory, EtherApiResponseProcessor} from "../apis/EtherApi";

export interface EtherApiGetEtherPhysicalPortByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EtherApigetEtherPhysicalPortByMoid
     */
    moid: string
}

export interface EtherApiGetEtherPhysicalPortListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof EtherApigetEtherPhysicalPortList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof EtherApigetEtherPhysicalPortList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof EtherApigetEtherPhysicalPortList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof EtherApigetEtherPhysicalPortList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof EtherApigetEtherPhysicalPortList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof EtherApigetEtherPhysicalPortList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof EtherApigetEtherPhysicalPortList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof EtherApigetEtherPhysicalPortList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof EtherApigetEtherPhysicalPortList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof EtherApigetEtherPhysicalPortList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof EtherApigetEtherPhysicalPortList
     */
    tags?: string
}

export interface EtherApiPatchEtherPhysicalPortRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EtherApipatchEtherPhysicalPort
     */
    moid: string
    /**
     * The &#39;ether.PhysicalPort&#39; resource to update.
     * @type EtherPhysicalPort
     * @memberof EtherApipatchEtherPhysicalPort
     */
    etherPhysicalPort: EtherPhysicalPort
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EtherApipatchEtherPhysicalPort
     */
    ifMatch?: string
}

export interface EtherApiUpdateEtherPhysicalPortRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof EtherApiupdateEtherPhysicalPort
     */
    moid: string
    /**
     * The &#39;ether.PhysicalPort&#39; resource to update.
     * @type EtherPhysicalPort
     * @memberof EtherApiupdateEtherPhysicalPort
     */
    etherPhysicalPort: EtherPhysicalPort
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof EtherApiupdateEtherPhysicalPort
     */
    ifMatch?: string
}


export class ObjectEtherApi {
    private api: ObservableEtherApi

    public constructor(configuration: Configuration, requestFactory?: EtherApiRequestFactory, responseProcessor?: EtherApiResponseProcessor) {
        this.api = new ObservableEtherApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'ether.PhysicalPort' resource.
     * @param param the request object
     */
    public getEtherPhysicalPortByMoid(param: EtherApiGetEtherPhysicalPortByMoidRequest, options?: Configuration): Promise<EtherPhysicalPort> {
        return this.api.getEtherPhysicalPortByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ether.PhysicalPort' resource.
     * @param param the request object
     */
    public getEtherPhysicalPortList(param: EtherApiGetEtherPhysicalPortListRequest, options?: Configuration): Promise<EtherPhysicalPortResponse> {
        return this.api.getEtherPhysicalPortList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'ether.PhysicalPort' resource.
     * @param param the request object
     */
    public patchEtherPhysicalPort(param: EtherApiPatchEtherPhysicalPortRequest, options?: Configuration): Promise<EtherPhysicalPort> {
        return this.api.patchEtherPhysicalPort(param.moid, param.etherPhysicalPort, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'ether.PhysicalPort' resource.
     * @param param the request object
     */
    public updateEtherPhysicalPort(param: EtherApiUpdateEtherPhysicalPortRequest, options?: Configuration): Promise<EtherPhysicalPort> {
        return this.api.updateEtherPhysicalPort(param.moid, param.etherPhysicalPort, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableExternalsiteApi } from "./ObservableAPI";
import { ExternalsiteApiRequestFactory, ExternalsiteApiResponseProcessor} from "../apis/ExternalsiteApi";

export interface ExternalsiteApiCreateExternalsiteAuthorizationRequest {
    /**
     * The &#39;externalsite.Authorization&#39; resource to create.
     * @type ExternalsiteAuthorization
     * @memberof ExternalsiteApicreateExternalsiteAuthorization
     */
    externalsiteAuthorization: ExternalsiteAuthorization
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ExternalsiteApicreateExternalsiteAuthorization
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ExternalsiteApicreateExternalsiteAuthorization
     */
    ifNoneMatch?: string
}

export interface ExternalsiteApiGetExternalsiteAuthorizationByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ExternalsiteApigetExternalsiteAuthorizationByMoid
     */
    moid: string
}

export interface ExternalsiteApiGetExternalsiteAuthorizationListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ExternalsiteApigetExternalsiteAuthorizationList
     */
    tags?: string
}

export interface ExternalsiteApiPatchExternalsiteAuthorizationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ExternalsiteApipatchExternalsiteAuthorization
     */
    moid: string
    /**
     * The &#39;externalsite.Authorization&#39; resource to update.
     * @type ExternalsiteAuthorization
     * @memberof ExternalsiteApipatchExternalsiteAuthorization
     */
    externalsiteAuthorization: ExternalsiteAuthorization
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ExternalsiteApipatchExternalsiteAuthorization
     */
    ifMatch?: string
}

export interface ExternalsiteApiUpdateExternalsiteAuthorizationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ExternalsiteApiupdateExternalsiteAuthorization
     */
    moid: string
    /**
     * The &#39;externalsite.Authorization&#39; resource to update.
     * @type ExternalsiteAuthorization
     * @memberof ExternalsiteApiupdateExternalsiteAuthorization
     */
    externalsiteAuthorization: ExternalsiteAuthorization
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ExternalsiteApiupdateExternalsiteAuthorization
     */
    ifMatch?: string
}


export class ObjectExternalsiteApi {
    private api: ObservableExternalsiteApi

    public constructor(configuration: Configuration, requestFactory?: ExternalsiteApiRequestFactory, responseProcessor?: ExternalsiteApiResponseProcessor) {
        this.api = new ObservableExternalsiteApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'externalsite.Authorization' resource.
     * @param param the request object
     */
    public createExternalsiteAuthorization(param: ExternalsiteApiCreateExternalsiteAuthorizationRequest, options?: Configuration): Promise<ExternalsiteAuthorization> {
        return this.api.createExternalsiteAuthorization(param.externalsiteAuthorization, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Read a 'externalsite.Authorization' resource.
     * @param param the request object
     */
    public getExternalsiteAuthorizationByMoid(param: ExternalsiteApiGetExternalsiteAuthorizationByMoidRequest, options?: Configuration): Promise<ExternalsiteAuthorization> {
        return this.api.getExternalsiteAuthorizationByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'externalsite.Authorization' resource.
     * @param param the request object
     */
    public getExternalsiteAuthorizationList(param: ExternalsiteApiGetExternalsiteAuthorizationListRequest, options?: Configuration): Promise<ExternalsiteAuthorizationResponse> {
        return this.api.getExternalsiteAuthorizationList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'externalsite.Authorization' resource.
     * @param param the request object
     */
    public patchExternalsiteAuthorization(param: ExternalsiteApiPatchExternalsiteAuthorizationRequest, options?: Configuration): Promise<ExternalsiteAuthorization> {
        return this.api.patchExternalsiteAuthorization(param.moid, param.externalsiteAuthorization, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'externalsite.Authorization' resource.
     * @param param the request object
     */
    public updateExternalsiteAuthorization(param: ExternalsiteApiUpdateExternalsiteAuthorizationRequest, options?: Configuration): Promise<ExternalsiteAuthorization> {
        return this.api.updateExternalsiteAuthorization(param.moid, param.externalsiteAuthorization, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableFaultApi } from "./ObservableAPI";
import { FaultApiRequestFactory, FaultApiResponseProcessor} from "../apis/FaultApi";

export interface FaultApiGetFaultInstanceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FaultApigetFaultInstanceByMoid
     */
    moid: string
}

export interface FaultApiGetFaultInstanceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof FaultApigetFaultInstanceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof FaultApigetFaultInstanceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof FaultApigetFaultInstanceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof FaultApigetFaultInstanceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof FaultApigetFaultInstanceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof FaultApigetFaultInstanceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof FaultApigetFaultInstanceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof FaultApigetFaultInstanceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof FaultApigetFaultInstanceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof FaultApigetFaultInstanceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof FaultApigetFaultInstanceList
     */
    tags?: string
}

export interface FaultApiPatchFaultInstanceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FaultApipatchFaultInstance
     */
    moid: string
    /**
     * The &#39;fault.Instance&#39; resource to update.
     * @type FaultInstance
     * @memberof FaultApipatchFaultInstance
     */
    faultInstance: FaultInstance
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FaultApipatchFaultInstance
     */
    ifMatch?: string
}

export interface FaultApiUpdateFaultInstanceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FaultApiupdateFaultInstance
     */
    moid: string
    /**
     * The &#39;fault.Instance&#39; resource to update.
     * @type FaultInstance
     * @memberof FaultApiupdateFaultInstance
     */
    faultInstance: FaultInstance
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FaultApiupdateFaultInstance
     */
    ifMatch?: string
}


export class ObjectFaultApi {
    private api: ObservableFaultApi

    public constructor(configuration: Configuration, requestFactory?: FaultApiRequestFactory, responseProcessor?: FaultApiResponseProcessor) {
        this.api = new ObservableFaultApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'fault.Instance' resource.
     * @param param the request object
     */
    public getFaultInstanceByMoid(param: FaultApiGetFaultInstanceByMoidRequest, options?: Configuration): Promise<FaultInstance> {
        return this.api.getFaultInstanceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'fault.Instance' resource.
     * @param param the request object
     */
    public getFaultInstanceList(param: FaultApiGetFaultInstanceListRequest, options?: Configuration): Promise<FaultInstanceResponse> {
        return this.api.getFaultInstanceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'fault.Instance' resource.
     * @param param the request object
     */
    public patchFaultInstance(param: FaultApiPatchFaultInstanceRequest, options?: Configuration): Promise<FaultInstance> {
        return this.api.patchFaultInstance(param.moid, param.faultInstance, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'fault.Instance' resource.
     * @param param the request object
     */
    public updateFaultInstance(param: FaultApiUpdateFaultInstanceRequest, options?: Configuration): Promise<FaultInstance> {
        return this.api.updateFaultInstance(param.moid, param.faultInstance, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableFcApi } from "./ObservableAPI";
import { FcApiRequestFactory, FcApiResponseProcessor} from "../apis/FcApi";

export interface FcApiGetFcPhysicalPortByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FcApigetFcPhysicalPortByMoid
     */
    moid: string
}

export interface FcApiGetFcPhysicalPortListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof FcApigetFcPhysicalPortList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof FcApigetFcPhysicalPortList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof FcApigetFcPhysicalPortList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof FcApigetFcPhysicalPortList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof FcApigetFcPhysicalPortList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof FcApigetFcPhysicalPortList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof FcApigetFcPhysicalPortList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof FcApigetFcPhysicalPortList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof FcApigetFcPhysicalPortList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof FcApigetFcPhysicalPortList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof FcApigetFcPhysicalPortList
     */
    tags?: string
}

export interface FcApiPatchFcPhysicalPortRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FcApipatchFcPhysicalPort
     */
    moid: string
    /**
     * The &#39;fc.PhysicalPort&#39; resource to update.
     * @type FcPhysicalPort
     * @memberof FcApipatchFcPhysicalPort
     */
    fcPhysicalPort: FcPhysicalPort
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FcApipatchFcPhysicalPort
     */
    ifMatch?: string
}

export interface FcApiUpdateFcPhysicalPortRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FcApiupdateFcPhysicalPort
     */
    moid: string
    /**
     * The &#39;fc.PhysicalPort&#39; resource to update.
     * @type FcPhysicalPort
     * @memberof FcApiupdateFcPhysicalPort
     */
    fcPhysicalPort: FcPhysicalPort
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FcApiupdateFcPhysicalPort
     */
    ifMatch?: string
}


export class ObjectFcApi {
    private api: ObservableFcApi

    public constructor(configuration: Configuration, requestFactory?: FcApiRequestFactory, responseProcessor?: FcApiResponseProcessor) {
        this.api = new ObservableFcApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'fc.PhysicalPort' resource.
     * @param param the request object
     */
    public getFcPhysicalPortByMoid(param: FcApiGetFcPhysicalPortByMoidRequest, options?: Configuration): Promise<FcPhysicalPort> {
        return this.api.getFcPhysicalPortByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'fc.PhysicalPort' resource.
     * @param param the request object
     */
    public getFcPhysicalPortList(param: FcApiGetFcPhysicalPortListRequest, options?: Configuration): Promise<FcPhysicalPortResponse> {
        return this.api.getFcPhysicalPortList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'fc.PhysicalPort' resource.
     * @param param the request object
     */
    public patchFcPhysicalPort(param: FcApiPatchFcPhysicalPortRequest, options?: Configuration): Promise<FcPhysicalPort> {
        return this.api.patchFcPhysicalPort(param.moid, param.fcPhysicalPort, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'fc.PhysicalPort' resource.
     * @param param the request object
     */
    public updateFcPhysicalPort(param: FcApiUpdateFcPhysicalPortRequest, options?: Configuration): Promise<FcPhysicalPort> {
        return this.api.updateFcPhysicalPort(param.moid, param.fcPhysicalPort, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableFeedbackApi } from "./ObservableAPI";
import { FeedbackApiRequestFactory, FeedbackApiResponseProcessor} from "../apis/FeedbackApi";

export interface FeedbackApiCreateFeedbackFeedbackPostRequest {
    /**
     * The &#39;feedback.FeedbackPost&#39; resource to create.
     * @type FeedbackFeedbackPost
     * @memberof FeedbackApicreateFeedbackFeedbackPost
     */
    feedbackFeedbackPost: FeedbackFeedbackPost
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FeedbackApicreateFeedbackFeedbackPost
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof FeedbackApicreateFeedbackFeedbackPost
     */
    ifNoneMatch?: string
}


export class ObjectFeedbackApi {
    private api: ObservableFeedbackApi

    public constructor(configuration: Configuration, requestFactory?: FeedbackApiRequestFactory, responseProcessor?: FeedbackApiResponseProcessor) {
        this.api = new ObservableFeedbackApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'feedback.FeedbackPost' resource.
     * @param param the request object
     */
    public createFeedbackFeedbackPost(param: FeedbackApiCreateFeedbackFeedbackPostRequest, options?: Configuration): Promise<FeedbackFeedbackPost> {
        return this.api.createFeedbackFeedbackPost(param.feedbackFeedbackPost, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	

}




import { ObservableFirmwareApi } from "./ObservableAPI";
import { FirmwareApiRequestFactory, FirmwareApiResponseProcessor} from "../apis/FirmwareApi";

export interface FirmwareApiCreateFirmwareDistributableRequest {
    /**
     * The &#39;firmware.Distributable&#39; resource to create.
     * @type FirmwareDistributable
     * @memberof FirmwareApicreateFirmwareDistributable
     */
    firmwareDistributable: FirmwareDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApicreateFirmwareDistributable
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof FirmwareApicreateFirmwareDistributable
     */
    ifNoneMatch?: string
}

export interface FirmwareApiCreateFirmwareDriverDistributableRequest {
    /**
     * The &#39;firmware.DriverDistributable&#39; resource to create.
     * @type FirmwareDriverDistributable
     * @memberof FirmwareApicreateFirmwareDriverDistributable
     */
    firmwareDriverDistributable: FirmwareDriverDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApicreateFirmwareDriverDistributable
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof FirmwareApicreateFirmwareDriverDistributable
     */
    ifNoneMatch?: string
}

export interface FirmwareApiCreateFirmwareEulaRequest {
    /**
     * The &#39;firmware.Eula&#39; resource to create.
     * @type FirmwareEula
     * @memberof FirmwareApicreateFirmwareEula
     */
    firmwareEula: FirmwareEula
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApicreateFirmwareEula
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof FirmwareApicreateFirmwareEula
     */
    ifNoneMatch?: string
}

export interface FirmwareApiCreateFirmwareServerConfigurationUtilityDistributableRequest {
    /**
     * The &#39;firmware.ServerConfigurationUtilityDistributable&#39; resource to create.
     * @type FirmwareServerConfigurationUtilityDistributable
     * @memberof FirmwareApicreateFirmwareServerConfigurationUtilityDistributable
     */
    firmwareServerConfigurationUtilityDistributable: FirmwareServerConfigurationUtilityDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApicreateFirmwareServerConfigurationUtilityDistributable
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof FirmwareApicreateFirmwareServerConfigurationUtilityDistributable
     */
    ifNoneMatch?: string
}

export interface FirmwareApiCreateFirmwareUpgradeRequest {
    /**
     * The &#39;firmware.Upgrade&#39; resource to create.
     * @type FirmwareUpgrade
     * @memberof FirmwareApicreateFirmwareUpgrade
     */
    firmwareUpgrade: FirmwareUpgrade
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApicreateFirmwareUpgrade
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof FirmwareApicreateFirmwareUpgrade
     */
    ifNoneMatch?: string
}

export interface FirmwareApiDeleteFirmwareDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApideleteFirmwareDistributable
     */
    moid: string
}

export interface FirmwareApiDeleteFirmwareDriverDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApideleteFirmwareDriverDistributable
     */
    moid: string
}

export interface FirmwareApiDeleteFirmwareServerConfigurationUtilityDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApideleteFirmwareServerConfigurationUtilityDistributable
     */
    moid: string
}

export interface FirmwareApiDeleteFirmwareUpgradeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApideleteFirmwareUpgrade
     */
    moid: string
}

export interface FirmwareApiGetFirmwareDistributableByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApigetFirmwareDistributableByMoid
     */
    moid: string
}

export interface FirmwareApiGetFirmwareDistributableListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof FirmwareApigetFirmwareDistributableList
     */
    tags?: string
}

export interface FirmwareApiGetFirmwareDriverDistributableByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApigetFirmwareDriverDistributableByMoid
     */
    moid: string
}

export interface FirmwareApiGetFirmwareDriverDistributableListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof FirmwareApigetFirmwareDriverDistributableList
     */
    tags?: string
}

export interface FirmwareApiGetFirmwareEulaByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApigetFirmwareEulaByMoid
     */
    moid: string
}

export interface FirmwareApiGetFirmwareEulaListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof FirmwareApigetFirmwareEulaList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof FirmwareApigetFirmwareEulaList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareEulaList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareEulaList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof FirmwareApigetFirmwareEulaList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof FirmwareApigetFirmwareEulaList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof FirmwareApigetFirmwareEulaList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof FirmwareApigetFirmwareEulaList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof FirmwareApigetFirmwareEulaList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof FirmwareApigetFirmwareEulaList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof FirmwareApigetFirmwareEulaList
     */
    tags?: string
}

export interface FirmwareApiGetFirmwareRunningFirmwareByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApigetFirmwareRunningFirmwareByMoid
     */
    moid: string
}

export interface FirmwareApiGetFirmwareRunningFirmwareListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof FirmwareApigetFirmwareRunningFirmwareList
     */
    tags?: string
}

export interface FirmwareApiGetFirmwareServerConfigurationUtilityDistributableByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableByMoid
     */
    moid: string
}

export interface FirmwareApiGetFirmwareServerConfigurationUtilityDistributableListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof FirmwareApigetFirmwareServerConfigurationUtilityDistributableList
     */
    tags?: string
}

export interface FirmwareApiGetFirmwareUpgradeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeByMoid
     */
    moid: string
}

export interface FirmwareApiGetFirmwareUpgradeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeList
     */
    tags?: string
}

export interface FirmwareApiGetFirmwareUpgradeStatusByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeStatusByMoid
     */
    moid: string
}

export interface FirmwareApiGetFirmwareUpgradeStatusListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof FirmwareApigetFirmwareUpgradeStatusList
     */
    tags?: string
}

export interface FirmwareApiPatchFirmwareDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApipatchFirmwareDistributable
     */
    moid: string
    /**
     * The &#39;firmware.Distributable&#39; resource to update.
     * @type FirmwareDistributable
     * @memberof FirmwareApipatchFirmwareDistributable
     */
    firmwareDistributable: FirmwareDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApipatchFirmwareDistributable
     */
    ifMatch?: string
}

export interface FirmwareApiPatchFirmwareDriverDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApipatchFirmwareDriverDistributable
     */
    moid: string
    /**
     * The &#39;firmware.DriverDistributable&#39; resource to update.
     * @type FirmwareDriverDistributable
     * @memberof FirmwareApipatchFirmwareDriverDistributable
     */
    firmwareDriverDistributable: FirmwareDriverDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApipatchFirmwareDriverDistributable
     */
    ifMatch?: string
}

export interface FirmwareApiPatchFirmwareRunningFirmwareRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApipatchFirmwareRunningFirmware
     */
    moid: string
    /**
     * The &#39;firmware.RunningFirmware&#39; resource to update.
     * @type FirmwareRunningFirmware
     * @memberof FirmwareApipatchFirmwareRunningFirmware
     */
    firmwareRunningFirmware: FirmwareRunningFirmware
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApipatchFirmwareRunningFirmware
     */
    ifMatch?: string
}

export interface FirmwareApiPatchFirmwareServerConfigurationUtilityDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApipatchFirmwareServerConfigurationUtilityDistributable
     */
    moid: string
    /**
     * The &#39;firmware.ServerConfigurationUtilityDistributable&#39; resource to update.
     * @type FirmwareServerConfigurationUtilityDistributable
     * @memberof FirmwareApipatchFirmwareServerConfigurationUtilityDistributable
     */
    firmwareServerConfigurationUtilityDistributable: FirmwareServerConfigurationUtilityDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApipatchFirmwareServerConfigurationUtilityDistributable
     */
    ifMatch?: string
}

export interface FirmwareApiUpdateFirmwareDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApiupdateFirmwareDistributable
     */
    moid: string
    /**
     * The &#39;firmware.Distributable&#39; resource to update.
     * @type FirmwareDistributable
     * @memberof FirmwareApiupdateFirmwareDistributable
     */
    firmwareDistributable: FirmwareDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApiupdateFirmwareDistributable
     */
    ifMatch?: string
}

export interface FirmwareApiUpdateFirmwareDriverDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApiupdateFirmwareDriverDistributable
     */
    moid: string
    /**
     * The &#39;firmware.DriverDistributable&#39; resource to update.
     * @type FirmwareDriverDistributable
     * @memberof FirmwareApiupdateFirmwareDriverDistributable
     */
    firmwareDriverDistributable: FirmwareDriverDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApiupdateFirmwareDriverDistributable
     */
    ifMatch?: string
}

export interface FirmwareApiUpdateFirmwareRunningFirmwareRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApiupdateFirmwareRunningFirmware
     */
    moid: string
    /**
     * The &#39;firmware.RunningFirmware&#39; resource to update.
     * @type FirmwareRunningFirmware
     * @memberof FirmwareApiupdateFirmwareRunningFirmware
     */
    firmwareRunningFirmware: FirmwareRunningFirmware
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApiupdateFirmwareRunningFirmware
     */
    ifMatch?: string
}

export interface FirmwareApiUpdateFirmwareServerConfigurationUtilityDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof FirmwareApiupdateFirmwareServerConfigurationUtilityDistributable
     */
    moid: string
    /**
     * The &#39;firmware.ServerConfigurationUtilityDistributable&#39; resource to update.
     * @type FirmwareServerConfigurationUtilityDistributable
     * @memberof FirmwareApiupdateFirmwareServerConfigurationUtilityDistributable
     */
    firmwareServerConfigurationUtilityDistributable: FirmwareServerConfigurationUtilityDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof FirmwareApiupdateFirmwareServerConfigurationUtilityDistributable
     */
    ifMatch?: string
}


export class ObjectFirmwareApi {
    private api: ObservableFirmwareApi

    public constructor(configuration: Configuration, requestFactory?: FirmwareApiRequestFactory, responseProcessor?: FirmwareApiResponseProcessor) {
        this.api = new ObservableFirmwareApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'firmware.Distributable' resource.
     * @param param the request object
     */
    public createFirmwareDistributable(param: FirmwareApiCreateFirmwareDistributableRequest, options?: Configuration): Promise<FirmwareDistributable> {
        return this.api.createFirmwareDistributable(param.firmwareDistributable, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'firmware.DriverDistributable' resource.
     * @param param the request object
     */
    public createFirmwareDriverDistributable(param: FirmwareApiCreateFirmwareDriverDistributableRequest, options?: Configuration): Promise<FirmwareDriverDistributable> {
        return this.api.createFirmwareDriverDistributable(param.firmwareDriverDistributable, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'firmware.Eula' resource.
     * @param param the request object
     */
    public createFirmwareEula(param: FirmwareApiCreateFirmwareEulaRequest, options?: Configuration): Promise<FirmwareEula> {
        return this.api.createFirmwareEula(param.firmwareEula, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'firmware.ServerConfigurationUtilityDistributable' resource.
     * @param param the request object
     */
    public createFirmwareServerConfigurationUtilityDistributable(param: FirmwareApiCreateFirmwareServerConfigurationUtilityDistributableRequest, options?: Configuration): Promise<FirmwareServerConfigurationUtilityDistributable> {
        return this.api.createFirmwareServerConfigurationUtilityDistributable(param.firmwareServerConfigurationUtilityDistributable, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'firmware.Upgrade' resource.
     * @param param the request object
     */
    public createFirmwareUpgrade(param: FirmwareApiCreateFirmwareUpgradeRequest, options?: Configuration): Promise<FirmwareUpgrade> {
        return this.api.createFirmwareUpgrade(param.firmwareUpgrade, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'firmware.Distributable' resource.
     * @param param the request object
     */
    public deleteFirmwareDistributable(param: FirmwareApiDeleteFirmwareDistributableRequest, options?: Configuration): Promise<void> {
        return this.api.deleteFirmwareDistributable(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'firmware.DriverDistributable' resource.
     * @param param the request object
     */
    public deleteFirmwareDriverDistributable(param: FirmwareApiDeleteFirmwareDriverDistributableRequest, options?: Configuration): Promise<void> {
        return this.api.deleteFirmwareDriverDistributable(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'firmware.ServerConfigurationUtilityDistributable' resource.
     * @param param the request object
     */
    public deleteFirmwareServerConfigurationUtilityDistributable(param: FirmwareApiDeleteFirmwareServerConfigurationUtilityDistributableRequest, options?: Configuration): Promise<void> {
        return this.api.deleteFirmwareServerConfigurationUtilityDistributable(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'firmware.Upgrade' resource.
     * @param param the request object
     */
    public deleteFirmwareUpgrade(param: FirmwareApiDeleteFirmwareUpgradeRequest, options?: Configuration): Promise<void> {
        return this.api.deleteFirmwareUpgrade(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.Distributable' resource.
     * @param param the request object
     */
    public getFirmwareDistributableByMoid(param: FirmwareApiGetFirmwareDistributableByMoidRequest, options?: Configuration): Promise<FirmwareDistributable> {
        return this.api.getFirmwareDistributableByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.Distributable' resource.
     * @param param the request object
     */
    public getFirmwareDistributableList(param: FirmwareApiGetFirmwareDistributableListRequest, options?: Configuration): Promise<FirmwareDistributableResponse> {
        return this.api.getFirmwareDistributableList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.DriverDistributable' resource.
     * @param param the request object
     */
    public getFirmwareDriverDistributableByMoid(param: FirmwareApiGetFirmwareDriverDistributableByMoidRequest, options?: Configuration): Promise<FirmwareDriverDistributable> {
        return this.api.getFirmwareDriverDistributableByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.DriverDistributable' resource.
     * @param param the request object
     */
    public getFirmwareDriverDistributableList(param: FirmwareApiGetFirmwareDriverDistributableListRequest, options?: Configuration): Promise<FirmwareDriverDistributableResponse> {
        return this.api.getFirmwareDriverDistributableList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.Eula' resource.
     * @param param the request object
     */
    public getFirmwareEulaByMoid(param: FirmwareApiGetFirmwareEulaByMoidRequest, options?: Configuration): Promise<FirmwareEula> {
        return this.api.getFirmwareEulaByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.Eula' resource.
     * @param param the request object
     */
    public getFirmwareEulaList(param: FirmwareApiGetFirmwareEulaListRequest, options?: Configuration): Promise<FirmwareEulaResponse> {
        return this.api.getFirmwareEulaList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.RunningFirmware' resource.
     * @param param the request object
     */
    public getFirmwareRunningFirmwareByMoid(param: FirmwareApiGetFirmwareRunningFirmwareByMoidRequest, options?: Configuration): Promise<FirmwareRunningFirmware> {
        return this.api.getFirmwareRunningFirmwareByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.RunningFirmware' resource.
     * @param param the request object
     */
    public getFirmwareRunningFirmwareList(param: FirmwareApiGetFirmwareRunningFirmwareListRequest, options?: Configuration): Promise<FirmwareRunningFirmwareResponse> {
        return this.api.getFirmwareRunningFirmwareList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.ServerConfigurationUtilityDistributable' resource.
     * @param param the request object
     */
    public getFirmwareServerConfigurationUtilityDistributableByMoid(param: FirmwareApiGetFirmwareServerConfigurationUtilityDistributableByMoidRequest, options?: Configuration): Promise<FirmwareServerConfigurationUtilityDistributable> {
        return this.api.getFirmwareServerConfigurationUtilityDistributableByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.ServerConfigurationUtilityDistributable' resource.
     * @param param the request object
     */
    public getFirmwareServerConfigurationUtilityDistributableList(param: FirmwareApiGetFirmwareServerConfigurationUtilityDistributableListRequest, options?: Configuration): Promise<FirmwareServerConfigurationUtilityDistributableResponse> {
        return this.api.getFirmwareServerConfigurationUtilityDistributableList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.Upgrade' resource.
     * @param param the request object
     */
    public getFirmwareUpgradeByMoid(param: FirmwareApiGetFirmwareUpgradeByMoidRequest, options?: Configuration): Promise<FirmwareUpgrade> {
        return this.api.getFirmwareUpgradeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.Upgrade' resource.
     * @param param the request object
     */
    public getFirmwareUpgradeList(param: FirmwareApiGetFirmwareUpgradeListRequest, options?: Configuration): Promise<FirmwareUpgradeResponse> {
        return this.api.getFirmwareUpgradeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.UpgradeStatus' resource.
     * @param param the request object
     */
    public getFirmwareUpgradeStatusByMoid(param: FirmwareApiGetFirmwareUpgradeStatusByMoidRequest, options?: Configuration): Promise<FirmwareUpgradeStatus> {
        return this.api.getFirmwareUpgradeStatusByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'firmware.UpgradeStatus' resource.
     * @param param the request object
     */
    public getFirmwareUpgradeStatusList(param: FirmwareApiGetFirmwareUpgradeStatusListRequest, options?: Configuration): Promise<FirmwareUpgradeStatusResponse> {
        return this.api.getFirmwareUpgradeStatusList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'firmware.Distributable' resource.
     * @param param the request object
     */
    public patchFirmwareDistributable(param: FirmwareApiPatchFirmwareDistributableRequest, options?: Configuration): Promise<FirmwareDistributable> {
        return this.api.patchFirmwareDistributable(param.moid, param.firmwareDistributable, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'firmware.DriverDistributable' resource.
     * @param param the request object
     */
    public patchFirmwareDriverDistributable(param: FirmwareApiPatchFirmwareDriverDistributableRequest, options?: Configuration): Promise<FirmwareDriverDistributable> {
        return this.api.patchFirmwareDriverDistributable(param.moid, param.firmwareDriverDistributable, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'firmware.RunningFirmware' resource.
     * @param param the request object
     */
    public patchFirmwareRunningFirmware(param: FirmwareApiPatchFirmwareRunningFirmwareRequest, options?: Configuration): Promise<FirmwareRunningFirmware> {
        return this.api.patchFirmwareRunningFirmware(param.moid, param.firmwareRunningFirmware, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'firmware.ServerConfigurationUtilityDistributable' resource.
     * @param param the request object
     */
    public patchFirmwareServerConfigurationUtilityDistributable(param: FirmwareApiPatchFirmwareServerConfigurationUtilityDistributableRequest, options?: Configuration): Promise<FirmwareServerConfigurationUtilityDistributable> {
        return this.api.patchFirmwareServerConfigurationUtilityDistributable(param.moid, param.firmwareServerConfigurationUtilityDistributable, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'firmware.Distributable' resource.
     * @param param the request object
     */
    public updateFirmwareDistributable(param: FirmwareApiUpdateFirmwareDistributableRequest, options?: Configuration): Promise<FirmwareDistributable> {
        return this.api.updateFirmwareDistributable(param.moid, param.firmwareDistributable, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'firmware.DriverDistributable' resource.
     * @param param the request object
     */
    public updateFirmwareDriverDistributable(param: FirmwareApiUpdateFirmwareDriverDistributableRequest, options?: Configuration): Promise<FirmwareDriverDistributable> {
        return this.api.updateFirmwareDriverDistributable(param.moid, param.firmwareDriverDistributable, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'firmware.RunningFirmware' resource.
     * @param param the request object
     */
    public updateFirmwareRunningFirmware(param: FirmwareApiUpdateFirmwareRunningFirmwareRequest, options?: Configuration): Promise<FirmwareRunningFirmware> {
        return this.api.updateFirmwareRunningFirmware(param.moid, param.firmwareRunningFirmware, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'firmware.ServerConfigurationUtilityDistributable' resource.
     * @param param the request object
     */
    public updateFirmwareServerConfigurationUtilityDistributable(param: FirmwareApiUpdateFirmwareServerConfigurationUtilityDistributableRequest, options?: Configuration): Promise<FirmwareServerConfigurationUtilityDistributable> {
        return this.api.updateFirmwareServerConfigurationUtilityDistributable(param.moid, param.firmwareServerConfigurationUtilityDistributable, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableForecastApi } from "./ObservableAPI";
import { ForecastApiRequestFactory, ForecastApiResponseProcessor} from "../apis/ForecastApi";

export interface ForecastApiGetForecastCatalogByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ForecastApigetForecastCatalogByMoid
     */
    moid: string
}

export interface ForecastApiGetForecastCatalogListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ForecastApigetForecastCatalogList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ForecastApigetForecastCatalogList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ForecastApigetForecastCatalogList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ForecastApigetForecastCatalogList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ForecastApigetForecastCatalogList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ForecastApigetForecastCatalogList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ForecastApigetForecastCatalogList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ForecastApigetForecastCatalogList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ForecastApigetForecastCatalogList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ForecastApigetForecastCatalogList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ForecastApigetForecastCatalogList
     */
    tags?: string
}

export interface ForecastApiGetForecastDefinitionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ForecastApigetForecastDefinitionByMoid
     */
    moid: string
}

export interface ForecastApiGetForecastDefinitionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ForecastApigetForecastDefinitionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ForecastApigetForecastDefinitionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ForecastApigetForecastDefinitionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ForecastApigetForecastDefinitionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ForecastApigetForecastDefinitionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ForecastApigetForecastDefinitionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ForecastApigetForecastDefinitionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ForecastApigetForecastDefinitionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ForecastApigetForecastDefinitionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ForecastApigetForecastDefinitionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ForecastApigetForecastDefinitionList
     */
    tags?: string
}

export interface ForecastApiGetForecastInstanceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ForecastApigetForecastInstanceByMoid
     */
    moid: string
}

export interface ForecastApiGetForecastInstanceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ForecastApigetForecastInstanceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ForecastApigetForecastInstanceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ForecastApigetForecastInstanceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ForecastApigetForecastInstanceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ForecastApigetForecastInstanceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ForecastApigetForecastInstanceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ForecastApigetForecastInstanceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ForecastApigetForecastInstanceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ForecastApigetForecastInstanceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ForecastApigetForecastInstanceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ForecastApigetForecastInstanceList
     */
    tags?: string
}


export class ObjectForecastApi {
    private api: ObservableForecastApi

    public constructor(configuration: Configuration, requestFactory?: ForecastApiRequestFactory, responseProcessor?: ForecastApiResponseProcessor) {
        this.api = new ObservableForecastApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'forecast.Catalog' resource.
     * @param param the request object
     */
    public getForecastCatalogByMoid(param: ForecastApiGetForecastCatalogByMoidRequest, options?: Configuration): Promise<ForecastCatalog> {
        return this.api.getForecastCatalogByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'forecast.Catalog' resource.
     * @param param the request object
     */
    public getForecastCatalogList(param: ForecastApiGetForecastCatalogListRequest, options?: Configuration): Promise<ForecastCatalogResponse> {
        return this.api.getForecastCatalogList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'forecast.Definition' resource.
     * @param param the request object
     */
    public getForecastDefinitionByMoid(param: ForecastApiGetForecastDefinitionByMoidRequest, options?: Configuration): Promise<ForecastDefinition> {
        return this.api.getForecastDefinitionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'forecast.Definition' resource.
     * @param param the request object
     */
    public getForecastDefinitionList(param: ForecastApiGetForecastDefinitionListRequest, options?: Configuration): Promise<ForecastDefinitionResponse> {
        return this.api.getForecastDefinitionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'forecast.Instance' resource.
     * @param param the request object
     */
    public getForecastInstanceByMoid(param: ForecastApiGetForecastInstanceByMoidRequest, options?: Configuration): Promise<ForecastInstance> {
        return this.api.getForecastInstanceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'forecast.Instance' resource.
     * @param param the request object
     */
    public getForecastInstanceList(param: ForecastApiGetForecastInstanceListRequest, options?: Configuration): Promise<ForecastInstanceResponse> {
        return this.api.getForecastInstanceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableGraphicsApi } from "./ObservableAPI";
import { GraphicsApiRequestFactory, GraphicsApiResponseProcessor} from "../apis/GraphicsApi";

export interface GraphicsApiGetGraphicsCardByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof GraphicsApigetGraphicsCardByMoid
     */
    moid: string
}

export interface GraphicsApiGetGraphicsCardListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof GraphicsApigetGraphicsCardList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof GraphicsApigetGraphicsCardList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof GraphicsApigetGraphicsCardList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof GraphicsApigetGraphicsCardList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof GraphicsApigetGraphicsCardList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof GraphicsApigetGraphicsCardList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof GraphicsApigetGraphicsCardList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof GraphicsApigetGraphicsCardList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof GraphicsApigetGraphicsCardList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof GraphicsApigetGraphicsCardList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof GraphicsApigetGraphicsCardList
     */
    tags?: string
}

export interface GraphicsApiGetGraphicsControllerByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof GraphicsApigetGraphicsControllerByMoid
     */
    moid: string
}

export interface GraphicsApiGetGraphicsControllerListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof GraphicsApigetGraphicsControllerList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof GraphicsApigetGraphicsControllerList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof GraphicsApigetGraphicsControllerList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof GraphicsApigetGraphicsControllerList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof GraphicsApigetGraphicsControllerList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof GraphicsApigetGraphicsControllerList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof GraphicsApigetGraphicsControllerList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof GraphicsApigetGraphicsControllerList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof GraphicsApigetGraphicsControllerList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof GraphicsApigetGraphicsControllerList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof GraphicsApigetGraphicsControllerList
     */
    tags?: string
}

export interface GraphicsApiPatchGraphicsCardRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof GraphicsApipatchGraphicsCard
     */
    moid: string
    /**
     * The &#39;graphics.Card&#39; resource to update.
     * @type GraphicsCard
     * @memberof GraphicsApipatchGraphicsCard
     */
    graphicsCard: GraphicsCard
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof GraphicsApipatchGraphicsCard
     */
    ifMatch?: string
}

export interface GraphicsApiPatchGraphicsControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof GraphicsApipatchGraphicsController
     */
    moid: string
    /**
     * The &#39;graphics.Controller&#39; resource to update.
     * @type GraphicsController
     * @memberof GraphicsApipatchGraphicsController
     */
    graphicsController: GraphicsController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof GraphicsApipatchGraphicsController
     */
    ifMatch?: string
}

export interface GraphicsApiUpdateGraphicsCardRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof GraphicsApiupdateGraphicsCard
     */
    moid: string
    /**
     * The &#39;graphics.Card&#39; resource to update.
     * @type GraphicsCard
     * @memberof GraphicsApiupdateGraphicsCard
     */
    graphicsCard: GraphicsCard
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof GraphicsApiupdateGraphicsCard
     */
    ifMatch?: string
}

export interface GraphicsApiUpdateGraphicsControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof GraphicsApiupdateGraphicsController
     */
    moid: string
    /**
     * The &#39;graphics.Controller&#39; resource to update.
     * @type GraphicsController
     * @memberof GraphicsApiupdateGraphicsController
     */
    graphicsController: GraphicsController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof GraphicsApiupdateGraphicsController
     */
    ifMatch?: string
}


export class ObjectGraphicsApi {
    private api: ObservableGraphicsApi

    public constructor(configuration: Configuration, requestFactory?: GraphicsApiRequestFactory, responseProcessor?: GraphicsApiResponseProcessor) {
        this.api = new ObservableGraphicsApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'graphics.Card' resource.
     * @param param the request object
     */
    public getGraphicsCardByMoid(param: GraphicsApiGetGraphicsCardByMoidRequest, options?: Configuration): Promise<GraphicsCard> {
        return this.api.getGraphicsCardByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'graphics.Card' resource.
     * @param param the request object
     */
    public getGraphicsCardList(param: GraphicsApiGetGraphicsCardListRequest, options?: Configuration): Promise<GraphicsCardResponse> {
        return this.api.getGraphicsCardList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'graphics.Controller' resource.
     * @param param the request object
     */
    public getGraphicsControllerByMoid(param: GraphicsApiGetGraphicsControllerByMoidRequest, options?: Configuration): Promise<GraphicsController> {
        return this.api.getGraphicsControllerByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'graphics.Controller' resource.
     * @param param the request object
     */
    public getGraphicsControllerList(param: GraphicsApiGetGraphicsControllerListRequest, options?: Configuration): Promise<GraphicsControllerResponse> {
        return this.api.getGraphicsControllerList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'graphics.Card' resource.
     * @param param the request object
     */
    public patchGraphicsCard(param: GraphicsApiPatchGraphicsCardRequest, options?: Configuration): Promise<GraphicsCard> {
        return this.api.patchGraphicsCard(param.moid, param.graphicsCard, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'graphics.Controller' resource.
     * @param param the request object
     */
    public patchGraphicsController(param: GraphicsApiPatchGraphicsControllerRequest, options?: Configuration): Promise<GraphicsController> {
        return this.api.patchGraphicsController(param.moid, param.graphicsController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'graphics.Card' resource.
     * @param param the request object
     */
    public updateGraphicsCard(param: GraphicsApiUpdateGraphicsCardRequest, options?: Configuration): Promise<GraphicsCard> {
        return this.api.updateGraphicsCard(param.moid, param.graphicsCard, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'graphics.Controller' resource.
     * @param param the request object
     */
    public updateGraphicsController(param: GraphicsApiUpdateGraphicsControllerRequest, options?: Configuration): Promise<GraphicsController> {
        return this.api.updateGraphicsController(param.moid, param.graphicsController, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableHclApi } from "./ObservableAPI";
import { HclApiRequestFactory, HclApiResponseProcessor} from "../apis/HclApi";

export interface HclApiCreateHclCompatibilityStatusRequest {
    /**
     * The &#39;hcl.CompatibilityStatus&#39; resource to create.
     * @type HclCompatibilityStatus
     * @memberof HclApicreateHclCompatibilityStatus
     */
    hclCompatibilityStatus: HclCompatibilityStatus
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HclApicreateHclCompatibilityStatus
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HclApicreateHclCompatibilityStatus
     */
    ifNoneMatch?: string
}

export interface HclApiCreateHclHyperflexSoftwareCompatibilityInfoRequest {
    /**
     * The &#39;hcl.HyperflexSoftwareCompatibilityInfo&#39; resource to create.
     * @type HclHyperflexSoftwareCompatibilityInfo
     * @memberof HclApicreateHclHyperflexSoftwareCompatibilityInfo
     */
    hclHyperflexSoftwareCompatibilityInfo: HclHyperflexSoftwareCompatibilityInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HclApicreateHclHyperflexSoftwareCompatibilityInfo
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HclApicreateHclHyperflexSoftwareCompatibilityInfo
     */
    ifNoneMatch?: string
}

export interface HclApiCreateHclSupportedDriverNameRequest {
    /**
     * The &#39;hcl.SupportedDriverName&#39; resource to create.
     * @type HclSupportedDriverName
     * @memberof HclApicreateHclSupportedDriverName
     */
    hclSupportedDriverName: HclSupportedDriverName
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HclApicreateHclSupportedDriverName
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HclApicreateHclSupportedDriverName
     */
    ifNoneMatch?: string
}

export interface HclApiDeleteHclHyperflexSoftwareCompatibilityInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HclApideleteHclHyperflexSoftwareCompatibilityInfo
     */
    moid: string
}

export interface HclApiGetHclDriverImageByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HclApigetHclDriverImageByMoid
     */
    moid: string
}

export interface HclApiGetHclDriverImageListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HclApigetHclDriverImageList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HclApigetHclDriverImageList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HclApigetHclDriverImageList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HclApigetHclDriverImageList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HclApigetHclDriverImageList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HclApigetHclDriverImageList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HclApigetHclDriverImageList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HclApigetHclDriverImageList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HclApigetHclDriverImageList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HclApigetHclDriverImageList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HclApigetHclDriverImageList
     */
    tags?: string
}

export interface HclApiGetHclExemptedCatalogByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HclApigetHclExemptedCatalogByMoid
     */
    moid: string
}

export interface HclApiGetHclExemptedCatalogListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HclApigetHclExemptedCatalogList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HclApigetHclExemptedCatalogList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HclApigetHclExemptedCatalogList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HclApigetHclExemptedCatalogList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HclApigetHclExemptedCatalogList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HclApigetHclExemptedCatalogList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HclApigetHclExemptedCatalogList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HclApigetHclExemptedCatalogList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HclApigetHclExemptedCatalogList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HclApigetHclExemptedCatalogList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HclApigetHclExemptedCatalogList
     */
    tags?: string
}

export interface HclApiGetHclHyperflexSoftwareCompatibilityInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoByMoid
     */
    moid: string
}

export interface HclApiGetHclHyperflexSoftwareCompatibilityInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HclApigetHclHyperflexSoftwareCompatibilityInfoList
     */
    tags?: string
}

export interface HclApiGetHclOperatingSystemByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HclApigetHclOperatingSystemByMoid
     */
    moid: string
}

export interface HclApiGetHclOperatingSystemListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HclApigetHclOperatingSystemList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HclApigetHclOperatingSystemList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HclApigetHclOperatingSystemList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HclApigetHclOperatingSystemList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HclApigetHclOperatingSystemList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HclApigetHclOperatingSystemList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HclApigetHclOperatingSystemList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HclApigetHclOperatingSystemList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HclApigetHclOperatingSystemList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HclApigetHclOperatingSystemList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HclApigetHclOperatingSystemList
     */
    tags?: string
}

export interface HclApiGetHclOperatingSystemVendorByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HclApigetHclOperatingSystemVendorByMoid
     */
    moid: string
}

export interface HclApiGetHclOperatingSystemVendorListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HclApigetHclOperatingSystemVendorList
     */
    tags?: string
}

export interface HclApiGetHclServiceStatusByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HclApigetHclServiceStatusByMoid
     */
    moid: string
}

export interface HclApiGetHclServiceStatusListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HclApigetHclServiceStatusList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HclApigetHclServiceStatusList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HclApigetHclServiceStatusList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HclApigetHclServiceStatusList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HclApigetHclServiceStatusList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HclApigetHclServiceStatusList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HclApigetHclServiceStatusList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HclApigetHclServiceStatusList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HclApigetHclServiceStatusList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HclApigetHclServiceStatusList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HclApigetHclServiceStatusList
     */
    tags?: string
}

export interface HclApiPatchHclHyperflexSoftwareCompatibilityInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HclApipatchHclHyperflexSoftwareCompatibilityInfo
     */
    moid: string
    /**
     * The &#39;hcl.HyperflexSoftwareCompatibilityInfo&#39; resource to update.
     * @type HclHyperflexSoftwareCompatibilityInfo
     * @memberof HclApipatchHclHyperflexSoftwareCompatibilityInfo
     */
    hclHyperflexSoftwareCompatibilityInfo: HclHyperflexSoftwareCompatibilityInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HclApipatchHclHyperflexSoftwareCompatibilityInfo
     */
    ifMatch?: string
}

export interface HclApiUpdateHclHyperflexSoftwareCompatibilityInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HclApiupdateHclHyperflexSoftwareCompatibilityInfo
     */
    moid: string
    /**
     * The &#39;hcl.HyperflexSoftwareCompatibilityInfo&#39; resource to update.
     * @type HclHyperflexSoftwareCompatibilityInfo
     * @memberof HclApiupdateHclHyperflexSoftwareCompatibilityInfo
     */
    hclHyperflexSoftwareCompatibilityInfo: HclHyperflexSoftwareCompatibilityInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HclApiupdateHclHyperflexSoftwareCompatibilityInfo
     */
    ifMatch?: string
}


export class ObjectHclApi {
    private api: ObservableHclApi

    public constructor(configuration: Configuration, requestFactory?: HclApiRequestFactory, responseProcessor?: HclApiResponseProcessor) {
        this.api = new ObservableHclApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'hcl.CompatibilityStatus' resource.
     * @param param the request object
     */
    public createHclCompatibilityStatus(param: HclApiCreateHclCompatibilityStatusRequest, options?: Configuration): Promise<HclCompatibilityStatus> {
        return this.api.createHclCompatibilityStatus(param.hclCompatibilityStatus, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.
     * @param param the request object
     */
    public createHclHyperflexSoftwareCompatibilityInfo(param: HclApiCreateHclHyperflexSoftwareCompatibilityInfoRequest, options?: Configuration): Promise<HclHyperflexSoftwareCompatibilityInfo> {
        return this.api.createHclHyperflexSoftwareCompatibilityInfo(param.hclHyperflexSoftwareCompatibilityInfo, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hcl.SupportedDriverName' resource.
     * @param param the request object
     */
    public createHclSupportedDriverName(param: HclApiCreateHclSupportedDriverNameRequest, options?: Configuration): Promise<HclSupportedDriverName> {
        return this.api.createHclSupportedDriverName(param.hclSupportedDriverName, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.
     * @param param the request object
     */
    public deleteHclHyperflexSoftwareCompatibilityInfo(param: HclApiDeleteHclHyperflexSoftwareCompatibilityInfoRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHclHyperflexSoftwareCompatibilityInfo(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.DriverImage' resource.
     * @param param the request object
     */
    public getHclDriverImageByMoid(param: HclApiGetHclDriverImageByMoidRequest, options?: Configuration): Promise<HclDriverImage> {
        return this.api.getHclDriverImageByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.DriverImage' resource.
     * @param param the request object
     */
    public getHclDriverImageList(param: HclApiGetHclDriverImageListRequest, options?: Configuration): Promise<HclDriverImageResponse> {
        return this.api.getHclDriverImageList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.ExemptedCatalog' resource.
     * @param param the request object
     */
    public getHclExemptedCatalogByMoid(param: HclApiGetHclExemptedCatalogByMoidRequest, options?: Configuration): Promise<HclExemptedCatalog> {
        return this.api.getHclExemptedCatalogByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.ExemptedCatalog' resource.
     * @param param the request object
     */
    public getHclExemptedCatalogList(param: HclApiGetHclExemptedCatalogListRequest, options?: Configuration): Promise<HclExemptedCatalogResponse> {
        return this.api.getHclExemptedCatalogList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.
     * @param param the request object
     */
    public getHclHyperflexSoftwareCompatibilityInfoByMoid(param: HclApiGetHclHyperflexSoftwareCompatibilityInfoByMoidRequest, options?: Configuration): Promise<HclHyperflexSoftwareCompatibilityInfo> {
        return this.api.getHclHyperflexSoftwareCompatibilityInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.
     * @param param the request object
     */
    public getHclHyperflexSoftwareCompatibilityInfoList(param: HclApiGetHclHyperflexSoftwareCompatibilityInfoListRequest, options?: Configuration): Promise<HclHyperflexSoftwareCompatibilityInfoResponse> {
        return this.api.getHclHyperflexSoftwareCompatibilityInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.OperatingSystem' resource.
     * @param param the request object
     */
    public getHclOperatingSystemByMoid(param: HclApiGetHclOperatingSystemByMoidRequest, options?: Configuration): Promise<HclOperatingSystem> {
        return this.api.getHclOperatingSystemByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.OperatingSystem' resource.
     * @param param the request object
     */
    public getHclOperatingSystemList(param: HclApiGetHclOperatingSystemListRequest, options?: Configuration): Promise<HclOperatingSystemResponse> {
        return this.api.getHclOperatingSystemList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.OperatingSystemVendor' resource.
     * @param param the request object
     */
    public getHclOperatingSystemVendorByMoid(param: HclApiGetHclOperatingSystemVendorByMoidRequest, options?: Configuration): Promise<HclOperatingSystemVendor> {
        return this.api.getHclOperatingSystemVendorByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.OperatingSystemVendor' resource.
     * @param param the request object
     */
    public getHclOperatingSystemVendorList(param: HclApiGetHclOperatingSystemVendorListRequest, options?: Configuration): Promise<HclOperatingSystemVendorResponse> {
        return this.api.getHclOperatingSystemVendorList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.ServiceStatus' resource.
     * @param param the request object
     */
    public getHclServiceStatusByMoid(param: HclApiGetHclServiceStatusByMoidRequest, options?: Configuration): Promise<HclServiceStatus> {
        return this.api.getHclServiceStatusByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hcl.ServiceStatus' resource.
     * @param param the request object
     */
    public getHclServiceStatusList(param: HclApiGetHclServiceStatusListRequest, options?: Configuration): Promise<HclServiceStatusResponse> {
        return this.api.getHclServiceStatusList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.
     * @param param the request object
     */
    public patchHclHyperflexSoftwareCompatibilityInfo(param: HclApiPatchHclHyperflexSoftwareCompatibilityInfoRequest, options?: Configuration): Promise<HclHyperflexSoftwareCompatibilityInfo> {
        return this.api.patchHclHyperflexSoftwareCompatibilityInfo(param.moid, param.hclHyperflexSoftwareCompatibilityInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hcl.HyperflexSoftwareCompatibilityInfo' resource.
     * @param param the request object
     */
    public updateHclHyperflexSoftwareCompatibilityInfo(param: HclApiUpdateHclHyperflexSoftwareCompatibilityInfoRequest, options?: Configuration): Promise<HclHyperflexSoftwareCompatibilityInfo> {
        return this.api.updateHclHyperflexSoftwareCompatibilityInfo(param.moid, param.hclHyperflexSoftwareCompatibilityInfo, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableHyperflexApi } from "./ObservableAPI";
import { HyperflexApiRequestFactory, HyperflexApiResponseProcessor} from "../apis/HyperflexApi";

export interface HyperflexApiCreateHyperflexAppCatalogRequest {
    /**
     * The &#39;hyperflex.AppCatalog&#39; resource to create.
     * @type HyperflexAppCatalog
     * @memberof HyperflexApicreateHyperflexAppCatalog
     */
    hyperflexAppCatalog: HyperflexAppCatalog
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexAppCatalog
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexAppCatalog
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexAutoSupportPolicyRequest {
    /**
     * The &#39;hyperflex.AutoSupportPolicy&#39; resource to create.
     * @type HyperflexAutoSupportPolicy
     * @memberof HyperflexApicreateHyperflexAutoSupportPolicy
     */
    hyperflexAutoSupportPolicy: HyperflexAutoSupportPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexAutoSupportPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexAutoSupportPolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexCapabilityInfoRequest {
    /**
     * The &#39;hyperflex.CapabilityInfo&#39; resource to create.
     * @type HyperflexCapabilityInfo
     * @memberof HyperflexApicreateHyperflexCapabilityInfo
     */
    hyperflexCapabilityInfo: HyperflexCapabilityInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexCapabilityInfo
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexCapabilityInfo
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexClusterNetworkPolicyRequest {
    /**
     * The &#39;hyperflex.ClusterNetworkPolicy&#39; resource to create.
     * @type HyperflexClusterNetworkPolicy
     * @memberof HyperflexApicreateHyperflexClusterNetworkPolicy
     */
    hyperflexClusterNetworkPolicy: HyperflexClusterNetworkPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexClusterNetworkPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexClusterNetworkPolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexClusterProfileRequest {
    /**
     * The &#39;hyperflex.ClusterProfile&#39; resource to create.
     * @type HyperflexClusterProfile
     * @memberof HyperflexApicreateHyperflexClusterProfile
     */
    hyperflexClusterProfile: HyperflexClusterProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexClusterProfile
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexClusterProfile
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexClusterStoragePolicyRequest {
    /**
     * The &#39;hyperflex.ClusterStoragePolicy&#39; resource to create.
     * @type HyperflexClusterStoragePolicy
     * @memberof HyperflexApicreateHyperflexClusterStoragePolicy
     */
    hyperflexClusterStoragePolicy: HyperflexClusterStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexClusterStoragePolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexClusterStoragePolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexExtFcStoragePolicyRequest {
    /**
     * The &#39;hyperflex.ExtFcStoragePolicy&#39; resource to create.
     * @type HyperflexExtFcStoragePolicy
     * @memberof HyperflexApicreateHyperflexExtFcStoragePolicy
     */
    hyperflexExtFcStoragePolicy: HyperflexExtFcStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexExtFcStoragePolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexExtFcStoragePolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexExtIscsiStoragePolicyRequest {
    /**
     * The &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource to create.
     * @type HyperflexExtIscsiStoragePolicy
     * @memberof HyperflexApicreateHyperflexExtIscsiStoragePolicy
     */
    hyperflexExtIscsiStoragePolicy: HyperflexExtIscsiStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexExtIscsiStoragePolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexExtIscsiStoragePolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexFeatureLimitExternalRequest {
    /**
     * The &#39;hyperflex.FeatureLimitExternal&#39; resource to create.
     * @type HyperflexFeatureLimitExternal
     * @memberof HyperflexApicreateHyperflexFeatureLimitExternal
     */
    hyperflexFeatureLimitExternal: HyperflexFeatureLimitExternal
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexFeatureLimitExternal
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexFeatureLimitExternal
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexFeatureLimitInternalRequest {
    /**
     * The &#39;hyperflex.FeatureLimitInternal&#39; resource to create.
     * @type HyperflexFeatureLimitInternal
     * @memberof HyperflexApicreateHyperflexFeatureLimitInternal
     */
    hyperflexFeatureLimitInternal: HyperflexFeatureLimitInternal
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexFeatureLimitInternal
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexFeatureLimitInternal
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexHxdpVersionRequest {
    /**
     * The &#39;hyperflex.HxdpVersion&#39; resource to create.
     * @type HyperflexHxdpVersion
     * @memberof HyperflexApicreateHyperflexHxdpVersion
     */
    hyperflexHxdpVersion: HyperflexHxdpVersion
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexHxdpVersion
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexHxdpVersion
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexLocalCredentialPolicyRequest {
    /**
     * The &#39;hyperflex.LocalCredentialPolicy&#39; resource to create.
     * @type HyperflexLocalCredentialPolicy
     * @memberof HyperflexApicreateHyperflexLocalCredentialPolicy
     */
    hyperflexLocalCredentialPolicy: HyperflexLocalCredentialPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexLocalCredentialPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexLocalCredentialPolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexNodeConfigPolicyRequest {
    /**
     * The &#39;hyperflex.NodeConfigPolicy&#39; resource to create.
     * @type HyperflexNodeConfigPolicy
     * @memberof HyperflexApicreateHyperflexNodeConfigPolicy
     */
    hyperflexNodeConfigPolicy: HyperflexNodeConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexNodeConfigPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexNodeConfigPolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexNodeProfileRequest {
    /**
     * The &#39;hyperflex.NodeProfile&#39; resource to create.
     * @type HyperflexNodeProfile
     * @memberof HyperflexApicreateHyperflexNodeProfile
     */
    hyperflexNodeProfile: HyperflexNodeProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexNodeProfile
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexNodeProfile
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexProxySettingPolicyRequest {
    /**
     * The &#39;hyperflex.ProxySettingPolicy&#39; resource to create.
     * @type HyperflexProxySettingPolicy
     * @memberof HyperflexApicreateHyperflexProxySettingPolicy
     */
    hyperflexProxySettingPolicy: HyperflexProxySettingPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexProxySettingPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexProxySettingPolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexServerFirmwareVersionRequest {
    /**
     * The &#39;hyperflex.ServerFirmwareVersion&#39; resource to create.
     * @type HyperflexServerFirmwareVersion
     * @memberof HyperflexApicreateHyperflexServerFirmwareVersion
     */
    hyperflexServerFirmwareVersion: HyperflexServerFirmwareVersion
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexServerFirmwareVersion
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexServerFirmwareVersion
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexServerModelRequest {
    /**
     * The &#39;hyperflex.ServerModel&#39; resource to create.
     * @type HyperflexServerModel
     * @memberof HyperflexApicreateHyperflexServerModel
     */
    hyperflexServerModel: HyperflexServerModel
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexServerModel
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexServerModel
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexSoftwareVersionPolicyRequest {
    /**
     * The &#39;hyperflex.SoftwareVersionPolicy&#39; resource to create.
     * @type HyperflexSoftwareVersionPolicy
     * @memberof HyperflexApicreateHyperflexSoftwareVersionPolicy
     */
    hyperflexSoftwareVersionPolicy: HyperflexSoftwareVersionPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexSoftwareVersionPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexSoftwareVersionPolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexSysConfigPolicyRequest {
    /**
     * The &#39;hyperflex.SysConfigPolicy&#39; resource to create.
     * @type HyperflexSysConfigPolicy
     * @memberof HyperflexApicreateHyperflexSysConfigPolicy
     */
    hyperflexSysConfigPolicy: HyperflexSysConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexSysConfigPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexSysConfigPolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexUcsmConfigPolicyRequest {
    /**
     * The &#39;hyperflex.UcsmConfigPolicy&#39; resource to create.
     * @type HyperflexUcsmConfigPolicy
     * @memberof HyperflexApicreateHyperflexUcsmConfigPolicy
     */
    hyperflexUcsmConfigPolicy: HyperflexUcsmConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexUcsmConfigPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexUcsmConfigPolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiCreateHyperflexVcenterConfigPolicyRequest {
    /**
     * The &#39;hyperflex.VcenterConfigPolicy&#39; resource to create.
     * @type HyperflexVcenterConfigPolicy
     * @memberof HyperflexApicreateHyperflexVcenterConfigPolicy
     */
    hyperflexVcenterConfigPolicy: HyperflexVcenterConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApicreateHyperflexVcenterConfigPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof HyperflexApicreateHyperflexVcenterConfigPolicy
     */
    ifNoneMatch?: string
}

export interface HyperflexApiDeleteHyperflexAppCatalogRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexAppCatalog
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexAutoSupportPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexAutoSupportPolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexCapabilityInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexCapabilityInfo
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexClusterNetworkPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexClusterNetworkPolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexClusterProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexClusterProfile
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexClusterStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexClusterStoragePolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexExtFcStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexExtFcStoragePolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexExtIscsiStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexExtIscsiStoragePolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexFeatureLimitExternalRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexFeatureLimitExternal
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexFeatureLimitInternalRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexFeatureLimitInternal
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexHxdpVersionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexHxdpVersion
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexLocalCredentialPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexLocalCredentialPolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexNodeConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexNodeConfigPolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexNodeProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexNodeProfile
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexProxySettingPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexProxySettingPolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexServerFirmwareVersionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexServerFirmwareVersion
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexServerModelRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexServerModel
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexSoftwareVersionPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexSoftwareVersionPolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexSysConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexSysConfigPolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexUcsmConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexUcsmConfigPolicy
     */
    moid: string
}

export interface HyperflexApiDeleteHyperflexVcenterConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApideleteHyperflexVcenterConfigPolicy
     */
    moid: string
}

export interface HyperflexApiGetHyperflexAlarmByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexAlarmByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexAlarmListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexAlarmList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexAppCatalogByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexAppCatalogByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexAppCatalogListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexAppCatalogList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexAutoSupportPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexAutoSupportPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexAutoSupportPolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexCapabilityInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexCapabilityInfoByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexCapabilityInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexCapabilityInfoList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexClusterByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexClusterListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexClusterList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexClusterList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexClusterList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexClusterList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexClusterList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexClusterNetworkPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexClusterNetworkPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterNetworkPolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexClusterProfileByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterProfileByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexClusterProfileListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterProfileList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexClusterStoragePolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexClusterStoragePolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexClusterStoragePolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexConfigResultByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexConfigResultEntryByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultEntryByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexConfigResultEntryListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultEntryList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexConfigResultListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexConfigResultList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexExtFcStoragePolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexExtFcStoragePolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexExtFcStoragePolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexExtIscsiStoragePolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexExtIscsiStoragePolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexExtIscsiStoragePolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexFeatureLimitExternalByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexFeatureLimitExternalListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitExternalList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexFeatureLimitInternalByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexFeatureLimitInternalListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexFeatureLimitInternalList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexHealthByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexHealthByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexHealthListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexHealthList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexHealthList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexHealthList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexHealthList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexHealthList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexHealthList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexHealthList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexHealthList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexHealthList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexHealthList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexHealthList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexHxdpVersionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexHxdpVersionByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexHxdpVersionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexHxdpVersionList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexLocalCredentialPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexLocalCredentialPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexLocalCredentialPolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexNodeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexNodeConfigPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexNodeConfigPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeConfigPolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexNodeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexNodeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexNodeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexNodeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexNodeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexNodeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexNodeProfileByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeProfileByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexNodeProfileListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexNodeProfileList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexProxySettingPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexProxySettingPolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexProxySettingPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexProxySettingPolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexServerFirmwareVersionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexServerFirmwareVersionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexServerFirmwareVersionList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexServerModelByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexServerModelByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexServerModelListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexServerModelList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexSoftwareVersionPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexSoftwareVersionPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexSoftwareVersionPolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexSysConfigPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexSysConfigPolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexSysConfigPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexSysConfigPolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexUcsmConfigPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexUcsmConfigPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexUcsmConfigPolicyList
     */
    tags?: string
}

export interface HyperflexApiGetHyperflexVcenterConfigPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyByMoid
     */
    moid: string
}

export interface HyperflexApiGetHyperflexVcenterConfigPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof HyperflexApigetHyperflexVcenterConfigPolicyList
     */
    tags?: string
}

export interface HyperflexApiPatchHyperflexAppCatalogRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexAppCatalog
     */
    moid: string
    /**
     * The &#39;hyperflex.AppCatalog&#39; resource to update.
     * @type HyperflexAppCatalog
     * @memberof HyperflexApipatchHyperflexAppCatalog
     */
    hyperflexAppCatalog: HyperflexAppCatalog
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexAppCatalog
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexAutoSupportPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexAutoSupportPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.AutoSupportPolicy&#39; resource to update.
     * @type HyperflexAutoSupportPolicy
     * @memberof HyperflexApipatchHyperflexAutoSupportPolicy
     */
    hyperflexAutoSupportPolicy: HyperflexAutoSupportPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexAutoSupportPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexCapabilityInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexCapabilityInfo
     */
    moid: string
    /**
     * The &#39;hyperflex.CapabilityInfo&#39; resource to update.
     * @type HyperflexCapabilityInfo
     * @memberof HyperflexApipatchHyperflexCapabilityInfo
     */
    hyperflexCapabilityInfo: HyperflexCapabilityInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexCapabilityInfo
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexClusterRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexCluster
     */
    moid: string
    /**
     * The &#39;hyperflex.Cluster&#39; resource to update.
     * @type HyperflexCluster
     * @memberof HyperflexApipatchHyperflexCluster
     */
    hyperflexCluster: HyperflexCluster
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexCluster
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexClusterNetworkPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexClusterNetworkPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ClusterNetworkPolicy&#39; resource to update.
     * @type HyperflexClusterNetworkPolicy
     * @memberof HyperflexApipatchHyperflexClusterNetworkPolicy
     */
    hyperflexClusterNetworkPolicy: HyperflexClusterNetworkPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexClusterNetworkPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexClusterProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexClusterProfile
     */
    moid: string
    /**
     * The &#39;hyperflex.ClusterProfile&#39; resource to update.
     * @type HyperflexClusterProfile
     * @memberof HyperflexApipatchHyperflexClusterProfile
     */
    hyperflexClusterProfile: HyperflexClusterProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexClusterProfile
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexClusterStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexClusterStoragePolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ClusterStoragePolicy&#39; resource to update.
     * @type HyperflexClusterStoragePolicy
     * @memberof HyperflexApipatchHyperflexClusterStoragePolicy
     */
    hyperflexClusterStoragePolicy: HyperflexClusterStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexClusterStoragePolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexExtFcStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexExtFcStoragePolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ExtFcStoragePolicy&#39; resource to update.
     * @type HyperflexExtFcStoragePolicy
     * @memberof HyperflexApipatchHyperflexExtFcStoragePolicy
     */
    hyperflexExtFcStoragePolicy: HyperflexExtFcStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexExtFcStoragePolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexExtIscsiStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexExtIscsiStoragePolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource to update.
     * @type HyperflexExtIscsiStoragePolicy
     * @memberof HyperflexApipatchHyperflexExtIscsiStoragePolicy
     */
    hyperflexExtIscsiStoragePolicy: HyperflexExtIscsiStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexExtIscsiStoragePolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexFeatureLimitExternalRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexFeatureLimitExternal
     */
    moid: string
    /**
     * The &#39;hyperflex.FeatureLimitExternal&#39; resource to update.
     * @type HyperflexFeatureLimitExternal
     * @memberof HyperflexApipatchHyperflexFeatureLimitExternal
     */
    hyperflexFeatureLimitExternal: HyperflexFeatureLimitExternal
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexFeatureLimitExternal
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexFeatureLimitInternalRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexFeatureLimitInternal
     */
    moid: string
    /**
     * The &#39;hyperflex.FeatureLimitInternal&#39; resource to update.
     * @type HyperflexFeatureLimitInternal
     * @memberof HyperflexApipatchHyperflexFeatureLimitInternal
     */
    hyperflexFeatureLimitInternal: HyperflexFeatureLimitInternal
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexFeatureLimitInternal
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexHxdpVersionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexHxdpVersion
     */
    moid: string
    /**
     * The &#39;hyperflex.HxdpVersion&#39; resource to update.
     * @type HyperflexHxdpVersion
     * @memberof HyperflexApipatchHyperflexHxdpVersion
     */
    hyperflexHxdpVersion: HyperflexHxdpVersion
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexHxdpVersion
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexLocalCredentialPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexLocalCredentialPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.LocalCredentialPolicy&#39; resource to update.
     * @type HyperflexLocalCredentialPolicy
     * @memberof HyperflexApipatchHyperflexLocalCredentialPolicy
     */
    hyperflexLocalCredentialPolicy: HyperflexLocalCredentialPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexLocalCredentialPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexNodeConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexNodeConfigPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.NodeConfigPolicy&#39; resource to update.
     * @type HyperflexNodeConfigPolicy
     * @memberof HyperflexApipatchHyperflexNodeConfigPolicy
     */
    hyperflexNodeConfigPolicy: HyperflexNodeConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexNodeConfigPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexNodeProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexNodeProfile
     */
    moid: string
    /**
     * The &#39;hyperflex.NodeProfile&#39; resource to update.
     * @type HyperflexNodeProfile
     * @memberof HyperflexApipatchHyperflexNodeProfile
     */
    hyperflexNodeProfile: HyperflexNodeProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexNodeProfile
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexProxySettingPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexProxySettingPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ProxySettingPolicy&#39; resource to update.
     * @type HyperflexProxySettingPolicy
     * @memberof HyperflexApipatchHyperflexProxySettingPolicy
     */
    hyperflexProxySettingPolicy: HyperflexProxySettingPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexProxySettingPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexServerFirmwareVersionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexServerFirmwareVersion
     */
    moid: string
    /**
     * The &#39;hyperflex.ServerFirmwareVersion&#39; resource to update.
     * @type HyperflexServerFirmwareVersion
     * @memberof HyperflexApipatchHyperflexServerFirmwareVersion
     */
    hyperflexServerFirmwareVersion: HyperflexServerFirmwareVersion
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexServerFirmwareVersion
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexServerModelRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexServerModel
     */
    moid: string
    /**
     * The &#39;hyperflex.ServerModel&#39; resource to update.
     * @type HyperflexServerModel
     * @memberof HyperflexApipatchHyperflexServerModel
     */
    hyperflexServerModel: HyperflexServerModel
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexServerModel
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexSoftwareVersionPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexSoftwareVersionPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.SoftwareVersionPolicy&#39; resource to update.
     * @type HyperflexSoftwareVersionPolicy
     * @memberof HyperflexApipatchHyperflexSoftwareVersionPolicy
     */
    hyperflexSoftwareVersionPolicy: HyperflexSoftwareVersionPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexSoftwareVersionPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexSysConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexSysConfigPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.SysConfigPolicy&#39; resource to update.
     * @type HyperflexSysConfigPolicy
     * @memberof HyperflexApipatchHyperflexSysConfigPolicy
     */
    hyperflexSysConfigPolicy: HyperflexSysConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexSysConfigPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexUcsmConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexUcsmConfigPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.UcsmConfigPolicy&#39; resource to update.
     * @type HyperflexUcsmConfigPolicy
     * @memberof HyperflexApipatchHyperflexUcsmConfigPolicy
     */
    hyperflexUcsmConfigPolicy: HyperflexUcsmConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexUcsmConfigPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiPatchHyperflexVcenterConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApipatchHyperflexVcenterConfigPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.VcenterConfigPolicy&#39; resource to update.
     * @type HyperflexVcenterConfigPolicy
     * @memberof HyperflexApipatchHyperflexVcenterConfigPolicy
     */
    hyperflexVcenterConfigPolicy: HyperflexVcenterConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApipatchHyperflexVcenterConfigPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexAppCatalogRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexAppCatalog
     */
    moid: string
    /**
     * The &#39;hyperflex.AppCatalog&#39; resource to update.
     * @type HyperflexAppCatalog
     * @memberof HyperflexApiupdateHyperflexAppCatalog
     */
    hyperflexAppCatalog: HyperflexAppCatalog
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexAppCatalog
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexAutoSupportPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexAutoSupportPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.AutoSupportPolicy&#39; resource to update.
     * @type HyperflexAutoSupportPolicy
     * @memberof HyperflexApiupdateHyperflexAutoSupportPolicy
     */
    hyperflexAutoSupportPolicy: HyperflexAutoSupportPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexAutoSupportPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexCapabilityInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexCapabilityInfo
     */
    moid: string
    /**
     * The &#39;hyperflex.CapabilityInfo&#39; resource to update.
     * @type HyperflexCapabilityInfo
     * @memberof HyperflexApiupdateHyperflexCapabilityInfo
     */
    hyperflexCapabilityInfo: HyperflexCapabilityInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexCapabilityInfo
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexClusterRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexCluster
     */
    moid: string
    /**
     * The &#39;hyperflex.Cluster&#39; resource to update.
     * @type HyperflexCluster
     * @memberof HyperflexApiupdateHyperflexCluster
     */
    hyperflexCluster: HyperflexCluster
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexCluster
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexClusterNetworkPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexClusterNetworkPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ClusterNetworkPolicy&#39; resource to update.
     * @type HyperflexClusterNetworkPolicy
     * @memberof HyperflexApiupdateHyperflexClusterNetworkPolicy
     */
    hyperflexClusterNetworkPolicy: HyperflexClusterNetworkPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexClusterNetworkPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexClusterProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexClusterProfile
     */
    moid: string
    /**
     * The &#39;hyperflex.ClusterProfile&#39; resource to update.
     * @type HyperflexClusterProfile
     * @memberof HyperflexApiupdateHyperflexClusterProfile
     */
    hyperflexClusterProfile: HyperflexClusterProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexClusterProfile
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexClusterStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexClusterStoragePolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ClusterStoragePolicy&#39; resource to update.
     * @type HyperflexClusterStoragePolicy
     * @memberof HyperflexApiupdateHyperflexClusterStoragePolicy
     */
    hyperflexClusterStoragePolicy: HyperflexClusterStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexClusterStoragePolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexExtFcStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexExtFcStoragePolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ExtFcStoragePolicy&#39; resource to update.
     * @type HyperflexExtFcStoragePolicy
     * @memberof HyperflexApiupdateHyperflexExtFcStoragePolicy
     */
    hyperflexExtFcStoragePolicy: HyperflexExtFcStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexExtFcStoragePolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexExtIscsiStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexExtIscsiStoragePolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ExtIscsiStoragePolicy&#39; resource to update.
     * @type HyperflexExtIscsiStoragePolicy
     * @memberof HyperflexApiupdateHyperflexExtIscsiStoragePolicy
     */
    hyperflexExtIscsiStoragePolicy: HyperflexExtIscsiStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexExtIscsiStoragePolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexFeatureLimitExternalRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexFeatureLimitExternal
     */
    moid: string
    /**
     * The &#39;hyperflex.FeatureLimitExternal&#39; resource to update.
     * @type HyperflexFeatureLimitExternal
     * @memberof HyperflexApiupdateHyperflexFeatureLimitExternal
     */
    hyperflexFeatureLimitExternal: HyperflexFeatureLimitExternal
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexFeatureLimitExternal
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexFeatureLimitInternalRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexFeatureLimitInternal
     */
    moid: string
    /**
     * The &#39;hyperflex.FeatureLimitInternal&#39; resource to update.
     * @type HyperflexFeatureLimitInternal
     * @memberof HyperflexApiupdateHyperflexFeatureLimitInternal
     */
    hyperflexFeatureLimitInternal: HyperflexFeatureLimitInternal
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexFeatureLimitInternal
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexHxdpVersionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexHxdpVersion
     */
    moid: string
    /**
     * The &#39;hyperflex.HxdpVersion&#39; resource to update.
     * @type HyperflexHxdpVersion
     * @memberof HyperflexApiupdateHyperflexHxdpVersion
     */
    hyperflexHxdpVersion: HyperflexHxdpVersion
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexHxdpVersion
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexLocalCredentialPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexLocalCredentialPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.LocalCredentialPolicy&#39; resource to update.
     * @type HyperflexLocalCredentialPolicy
     * @memberof HyperflexApiupdateHyperflexLocalCredentialPolicy
     */
    hyperflexLocalCredentialPolicy: HyperflexLocalCredentialPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexLocalCredentialPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexNodeConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexNodeConfigPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.NodeConfigPolicy&#39; resource to update.
     * @type HyperflexNodeConfigPolicy
     * @memberof HyperflexApiupdateHyperflexNodeConfigPolicy
     */
    hyperflexNodeConfigPolicy: HyperflexNodeConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexNodeConfigPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexNodeProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexNodeProfile
     */
    moid: string
    /**
     * The &#39;hyperflex.NodeProfile&#39; resource to update.
     * @type HyperflexNodeProfile
     * @memberof HyperflexApiupdateHyperflexNodeProfile
     */
    hyperflexNodeProfile: HyperflexNodeProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexNodeProfile
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexProxySettingPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexProxySettingPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.ProxySettingPolicy&#39; resource to update.
     * @type HyperflexProxySettingPolicy
     * @memberof HyperflexApiupdateHyperflexProxySettingPolicy
     */
    hyperflexProxySettingPolicy: HyperflexProxySettingPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexProxySettingPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexServerFirmwareVersionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexServerFirmwareVersion
     */
    moid: string
    /**
     * The &#39;hyperflex.ServerFirmwareVersion&#39; resource to update.
     * @type HyperflexServerFirmwareVersion
     * @memberof HyperflexApiupdateHyperflexServerFirmwareVersion
     */
    hyperflexServerFirmwareVersion: HyperflexServerFirmwareVersion
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexServerFirmwareVersion
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexServerModelRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexServerModel
     */
    moid: string
    /**
     * The &#39;hyperflex.ServerModel&#39; resource to update.
     * @type HyperflexServerModel
     * @memberof HyperflexApiupdateHyperflexServerModel
     */
    hyperflexServerModel: HyperflexServerModel
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexServerModel
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexSoftwareVersionPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexSoftwareVersionPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.SoftwareVersionPolicy&#39; resource to update.
     * @type HyperflexSoftwareVersionPolicy
     * @memberof HyperflexApiupdateHyperflexSoftwareVersionPolicy
     */
    hyperflexSoftwareVersionPolicy: HyperflexSoftwareVersionPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexSoftwareVersionPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexSysConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexSysConfigPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.SysConfigPolicy&#39; resource to update.
     * @type HyperflexSysConfigPolicy
     * @memberof HyperflexApiupdateHyperflexSysConfigPolicy
     */
    hyperflexSysConfigPolicy: HyperflexSysConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexSysConfigPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexUcsmConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexUcsmConfigPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.UcsmConfigPolicy&#39; resource to update.
     * @type HyperflexUcsmConfigPolicy
     * @memberof HyperflexApiupdateHyperflexUcsmConfigPolicy
     */
    hyperflexUcsmConfigPolicy: HyperflexUcsmConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexUcsmConfigPolicy
     */
    ifMatch?: string
}

export interface HyperflexApiUpdateHyperflexVcenterConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof HyperflexApiupdateHyperflexVcenterConfigPolicy
     */
    moid: string
    /**
     * The &#39;hyperflex.VcenterConfigPolicy&#39; resource to update.
     * @type HyperflexVcenterConfigPolicy
     * @memberof HyperflexApiupdateHyperflexVcenterConfigPolicy
     */
    hyperflexVcenterConfigPolicy: HyperflexVcenterConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof HyperflexApiupdateHyperflexVcenterConfigPolicy
     */
    ifMatch?: string
}


export class ObjectHyperflexApi {
    private api: ObservableHyperflexApi

    public constructor(configuration: Configuration, requestFactory?: HyperflexApiRequestFactory, responseProcessor?: HyperflexApiResponseProcessor) {
        this.api = new ObservableHyperflexApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'hyperflex.AppCatalog' resource.
     * @param param the request object
     */
    public createHyperflexAppCatalog(param: HyperflexApiCreateHyperflexAppCatalogRequest, options?: Configuration): Promise<HyperflexAppCatalog> {
        return this.api.createHyperflexAppCatalog(param.hyperflexAppCatalog, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.AutoSupportPolicy' resource.
     * @param param the request object
     */
    public createHyperflexAutoSupportPolicy(param: HyperflexApiCreateHyperflexAutoSupportPolicyRequest, options?: Configuration): Promise<HyperflexAutoSupportPolicy> {
        return this.api.createHyperflexAutoSupportPolicy(param.hyperflexAutoSupportPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.CapabilityInfo' resource.
     * @param param the request object
     */
    public createHyperflexCapabilityInfo(param: HyperflexApiCreateHyperflexCapabilityInfoRequest, options?: Configuration): Promise<HyperflexCapabilityInfo> {
        return this.api.createHyperflexCapabilityInfo(param.hyperflexCapabilityInfo, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.ClusterNetworkPolicy' resource.
     * @param param the request object
     */
    public createHyperflexClusterNetworkPolicy(param: HyperflexApiCreateHyperflexClusterNetworkPolicyRequest, options?: Configuration): Promise<HyperflexClusterNetworkPolicy> {
        return this.api.createHyperflexClusterNetworkPolicy(param.hyperflexClusterNetworkPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.ClusterProfile' resource.
     * @param param the request object
     */
    public createHyperflexClusterProfile(param: HyperflexApiCreateHyperflexClusterProfileRequest, options?: Configuration): Promise<HyperflexClusterProfile> {
        return this.api.createHyperflexClusterProfile(param.hyperflexClusterProfile, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.ClusterStoragePolicy' resource.
     * @param param the request object
     */
    public createHyperflexClusterStoragePolicy(param: HyperflexApiCreateHyperflexClusterStoragePolicyRequest, options?: Configuration): Promise<HyperflexClusterStoragePolicy> {
        return this.api.createHyperflexClusterStoragePolicy(param.hyperflexClusterStoragePolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.ExtFcStoragePolicy' resource.
     * @param param the request object
     */
    public createHyperflexExtFcStoragePolicy(param: HyperflexApiCreateHyperflexExtFcStoragePolicyRequest, options?: Configuration): Promise<HyperflexExtFcStoragePolicy> {
        return this.api.createHyperflexExtFcStoragePolicy(param.hyperflexExtFcStoragePolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.ExtIscsiStoragePolicy' resource.
     * @param param the request object
     */
    public createHyperflexExtIscsiStoragePolicy(param: HyperflexApiCreateHyperflexExtIscsiStoragePolicyRequest, options?: Configuration): Promise<HyperflexExtIscsiStoragePolicy> {
        return this.api.createHyperflexExtIscsiStoragePolicy(param.hyperflexExtIscsiStoragePolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.FeatureLimitExternal' resource.
     * @param param the request object
     */
    public createHyperflexFeatureLimitExternal(param: HyperflexApiCreateHyperflexFeatureLimitExternalRequest, options?: Configuration): Promise<HyperflexFeatureLimitExternal> {
        return this.api.createHyperflexFeatureLimitExternal(param.hyperflexFeatureLimitExternal, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.FeatureLimitInternal' resource.
     * @param param the request object
     */
    public createHyperflexFeatureLimitInternal(param: HyperflexApiCreateHyperflexFeatureLimitInternalRequest, options?: Configuration): Promise<HyperflexFeatureLimitInternal> {
        return this.api.createHyperflexFeatureLimitInternal(param.hyperflexFeatureLimitInternal, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.HxdpVersion' resource.
     * @param param the request object
     */
    public createHyperflexHxdpVersion(param: HyperflexApiCreateHyperflexHxdpVersionRequest, options?: Configuration): Promise<HyperflexHxdpVersion> {
        return this.api.createHyperflexHxdpVersion(param.hyperflexHxdpVersion, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.LocalCredentialPolicy' resource.
     * @param param the request object
     */
    public createHyperflexLocalCredentialPolicy(param: HyperflexApiCreateHyperflexLocalCredentialPolicyRequest, options?: Configuration): Promise<HyperflexLocalCredentialPolicy> {
        return this.api.createHyperflexLocalCredentialPolicy(param.hyperflexLocalCredentialPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.NodeConfigPolicy' resource.
     * @param param the request object
     */
    public createHyperflexNodeConfigPolicy(param: HyperflexApiCreateHyperflexNodeConfigPolicyRequest, options?: Configuration): Promise<HyperflexNodeConfigPolicy> {
        return this.api.createHyperflexNodeConfigPolicy(param.hyperflexNodeConfigPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.NodeProfile' resource.
     * @param param the request object
     */
    public createHyperflexNodeProfile(param: HyperflexApiCreateHyperflexNodeProfileRequest, options?: Configuration): Promise<HyperflexNodeProfile> {
        return this.api.createHyperflexNodeProfile(param.hyperflexNodeProfile, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.ProxySettingPolicy' resource.
     * @param param the request object
     */
    public createHyperflexProxySettingPolicy(param: HyperflexApiCreateHyperflexProxySettingPolicyRequest, options?: Configuration): Promise<HyperflexProxySettingPolicy> {
        return this.api.createHyperflexProxySettingPolicy(param.hyperflexProxySettingPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.ServerFirmwareVersion' resource.
     * @param param the request object
     */
    public createHyperflexServerFirmwareVersion(param: HyperflexApiCreateHyperflexServerFirmwareVersionRequest, options?: Configuration): Promise<HyperflexServerFirmwareVersion> {
        return this.api.createHyperflexServerFirmwareVersion(param.hyperflexServerFirmwareVersion, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.ServerModel' resource.
     * @param param the request object
     */
    public createHyperflexServerModel(param: HyperflexApiCreateHyperflexServerModelRequest, options?: Configuration): Promise<HyperflexServerModel> {
        return this.api.createHyperflexServerModel(param.hyperflexServerModel, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.SoftwareVersionPolicy' resource.
     * @param param the request object
     */
    public createHyperflexSoftwareVersionPolicy(param: HyperflexApiCreateHyperflexSoftwareVersionPolicyRequest, options?: Configuration): Promise<HyperflexSoftwareVersionPolicy> {
        return this.api.createHyperflexSoftwareVersionPolicy(param.hyperflexSoftwareVersionPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.SysConfigPolicy' resource.
     * @param param the request object
     */
    public createHyperflexSysConfigPolicy(param: HyperflexApiCreateHyperflexSysConfigPolicyRequest, options?: Configuration): Promise<HyperflexSysConfigPolicy> {
        return this.api.createHyperflexSysConfigPolicy(param.hyperflexSysConfigPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.UcsmConfigPolicy' resource.
     * @param param the request object
     */
    public createHyperflexUcsmConfigPolicy(param: HyperflexApiCreateHyperflexUcsmConfigPolicyRequest, options?: Configuration): Promise<HyperflexUcsmConfigPolicy> {
        return this.api.createHyperflexUcsmConfigPolicy(param.hyperflexUcsmConfigPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'hyperflex.VcenterConfigPolicy' resource.
     * @param param the request object
     */
    public createHyperflexVcenterConfigPolicy(param: HyperflexApiCreateHyperflexVcenterConfigPolicyRequest, options?: Configuration): Promise<HyperflexVcenterConfigPolicy> {
        return this.api.createHyperflexVcenterConfigPolicy(param.hyperflexVcenterConfigPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.AppCatalog' resource.
     * @param param the request object
     */
    public deleteHyperflexAppCatalog(param: HyperflexApiDeleteHyperflexAppCatalogRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexAppCatalog(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.AutoSupportPolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexAutoSupportPolicy(param: HyperflexApiDeleteHyperflexAutoSupportPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexAutoSupportPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.CapabilityInfo' resource.
     * @param param the request object
     */
    public deleteHyperflexCapabilityInfo(param: HyperflexApiDeleteHyperflexCapabilityInfoRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexCapabilityInfo(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.ClusterNetworkPolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexClusterNetworkPolicy(param: HyperflexApiDeleteHyperflexClusterNetworkPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexClusterNetworkPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.ClusterProfile' resource.
     * @param param the request object
     */
    public deleteHyperflexClusterProfile(param: HyperflexApiDeleteHyperflexClusterProfileRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexClusterProfile(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.ClusterStoragePolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexClusterStoragePolicy(param: HyperflexApiDeleteHyperflexClusterStoragePolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexClusterStoragePolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.ExtFcStoragePolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexExtFcStoragePolicy(param: HyperflexApiDeleteHyperflexExtFcStoragePolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexExtFcStoragePolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.ExtIscsiStoragePolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexExtIscsiStoragePolicy(param: HyperflexApiDeleteHyperflexExtIscsiStoragePolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexExtIscsiStoragePolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.FeatureLimitExternal' resource.
     * @param param the request object
     */
    public deleteHyperflexFeatureLimitExternal(param: HyperflexApiDeleteHyperflexFeatureLimitExternalRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexFeatureLimitExternal(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.FeatureLimitInternal' resource.
     * @param param the request object
     */
    public deleteHyperflexFeatureLimitInternal(param: HyperflexApiDeleteHyperflexFeatureLimitInternalRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexFeatureLimitInternal(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.HxdpVersion' resource.
     * @param param the request object
     */
    public deleteHyperflexHxdpVersion(param: HyperflexApiDeleteHyperflexHxdpVersionRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexHxdpVersion(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.LocalCredentialPolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexLocalCredentialPolicy(param: HyperflexApiDeleteHyperflexLocalCredentialPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexLocalCredentialPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.NodeConfigPolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexNodeConfigPolicy(param: HyperflexApiDeleteHyperflexNodeConfigPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexNodeConfigPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.NodeProfile' resource.
     * @param param the request object
     */
    public deleteHyperflexNodeProfile(param: HyperflexApiDeleteHyperflexNodeProfileRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexNodeProfile(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.ProxySettingPolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexProxySettingPolicy(param: HyperflexApiDeleteHyperflexProxySettingPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexProxySettingPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.ServerFirmwareVersion' resource.
     * @param param the request object
     */
    public deleteHyperflexServerFirmwareVersion(param: HyperflexApiDeleteHyperflexServerFirmwareVersionRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexServerFirmwareVersion(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.ServerModel' resource.
     * @param param the request object
     */
    public deleteHyperflexServerModel(param: HyperflexApiDeleteHyperflexServerModelRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexServerModel(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.SoftwareVersionPolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexSoftwareVersionPolicy(param: HyperflexApiDeleteHyperflexSoftwareVersionPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexSoftwareVersionPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.SysConfigPolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexSysConfigPolicy(param: HyperflexApiDeleteHyperflexSysConfigPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexSysConfigPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.UcsmConfigPolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexUcsmConfigPolicy(param: HyperflexApiDeleteHyperflexUcsmConfigPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexUcsmConfigPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'hyperflex.VcenterConfigPolicy' resource.
     * @param param the request object
     */
    public deleteHyperflexVcenterConfigPolicy(param: HyperflexApiDeleteHyperflexVcenterConfigPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteHyperflexVcenterConfigPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.Alarm' resource.
     * @param param the request object
     */
    public getHyperflexAlarmByMoid(param: HyperflexApiGetHyperflexAlarmByMoidRequest, options?: Configuration): Promise<HyperflexAlarm> {
        return this.api.getHyperflexAlarmByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.Alarm' resource.
     * @param param the request object
     */
    public getHyperflexAlarmList(param: HyperflexApiGetHyperflexAlarmListRequest, options?: Configuration): Promise<HyperflexAlarmResponse> {
        return this.api.getHyperflexAlarmList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.AppCatalog' resource.
     * @param param the request object
     */
    public getHyperflexAppCatalogByMoid(param: HyperflexApiGetHyperflexAppCatalogByMoidRequest, options?: Configuration): Promise<HyperflexAppCatalog> {
        return this.api.getHyperflexAppCatalogByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.AppCatalog' resource.
     * @param param the request object
     */
    public getHyperflexAppCatalogList(param: HyperflexApiGetHyperflexAppCatalogListRequest, options?: Configuration): Promise<HyperflexAppCatalogResponse> {
        return this.api.getHyperflexAppCatalogList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.AutoSupportPolicy' resource.
     * @param param the request object
     */
    public getHyperflexAutoSupportPolicyByMoid(param: HyperflexApiGetHyperflexAutoSupportPolicyByMoidRequest, options?: Configuration): Promise<HyperflexAutoSupportPolicy> {
        return this.api.getHyperflexAutoSupportPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.AutoSupportPolicy' resource.
     * @param param the request object
     */
    public getHyperflexAutoSupportPolicyList(param: HyperflexApiGetHyperflexAutoSupportPolicyListRequest, options?: Configuration): Promise<HyperflexAutoSupportPolicyResponse> {
        return this.api.getHyperflexAutoSupportPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.CapabilityInfo' resource.
     * @param param the request object
     */
    public getHyperflexCapabilityInfoByMoid(param: HyperflexApiGetHyperflexCapabilityInfoByMoidRequest, options?: Configuration): Promise<HyperflexCapabilityInfo> {
        return this.api.getHyperflexCapabilityInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.CapabilityInfo' resource.
     * @param param the request object
     */
    public getHyperflexCapabilityInfoList(param: HyperflexApiGetHyperflexCapabilityInfoListRequest, options?: Configuration): Promise<HyperflexCapabilityInfoResponse> {
        return this.api.getHyperflexCapabilityInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.Cluster' resource.
     * @param param the request object
     */
    public getHyperflexClusterByMoid(param: HyperflexApiGetHyperflexClusterByMoidRequest, options?: Configuration): Promise<HyperflexCluster> {
        return this.api.getHyperflexClusterByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.Cluster' resource.
     * @param param the request object
     */
    public getHyperflexClusterList(param: HyperflexApiGetHyperflexClusterListRequest, options?: Configuration): Promise<HyperflexClusterResponse> {
        return this.api.getHyperflexClusterList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ClusterNetworkPolicy' resource.
     * @param param the request object
     */
    public getHyperflexClusterNetworkPolicyByMoid(param: HyperflexApiGetHyperflexClusterNetworkPolicyByMoidRequest, options?: Configuration): Promise<HyperflexClusterNetworkPolicy> {
        return this.api.getHyperflexClusterNetworkPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ClusterNetworkPolicy' resource.
     * @param param the request object
     */
    public getHyperflexClusterNetworkPolicyList(param: HyperflexApiGetHyperflexClusterNetworkPolicyListRequest, options?: Configuration): Promise<HyperflexClusterNetworkPolicyResponse> {
        return this.api.getHyperflexClusterNetworkPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ClusterProfile' resource.
     * @param param the request object
     */
    public getHyperflexClusterProfileByMoid(param: HyperflexApiGetHyperflexClusterProfileByMoidRequest, options?: Configuration): Promise<HyperflexClusterProfile> {
        return this.api.getHyperflexClusterProfileByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ClusterProfile' resource.
     * @param param the request object
     */
    public getHyperflexClusterProfileList(param: HyperflexApiGetHyperflexClusterProfileListRequest, options?: Configuration): Promise<HyperflexClusterProfileResponse> {
        return this.api.getHyperflexClusterProfileList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ClusterStoragePolicy' resource.
     * @param param the request object
     */
    public getHyperflexClusterStoragePolicyByMoid(param: HyperflexApiGetHyperflexClusterStoragePolicyByMoidRequest, options?: Configuration): Promise<HyperflexClusterStoragePolicy> {
        return this.api.getHyperflexClusterStoragePolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ClusterStoragePolicy' resource.
     * @param param the request object
     */
    public getHyperflexClusterStoragePolicyList(param: HyperflexApiGetHyperflexClusterStoragePolicyListRequest, options?: Configuration): Promise<HyperflexClusterStoragePolicyResponse> {
        return this.api.getHyperflexClusterStoragePolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ConfigResult' resource.
     * @param param the request object
     */
    public getHyperflexConfigResultByMoid(param: HyperflexApiGetHyperflexConfigResultByMoidRequest, options?: Configuration): Promise<HyperflexConfigResult> {
        return this.api.getHyperflexConfigResultByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ConfigResultEntry' resource.
     * @param param the request object
     */
    public getHyperflexConfigResultEntryByMoid(param: HyperflexApiGetHyperflexConfigResultEntryByMoidRequest, options?: Configuration): Promise<HyperflexConfigResultEntry> {
        return this.api.getHyperflexConfigResultEntryByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ConfigResultEntry' resource.
     * @param param the request object
     */
    public getHyperflexConfigResultEntryList(param: HyperflexApiGetHyperflexConfigResultEntryListRequest, options?: Configuration): Promise<HyperflexConfigResultEntryResponse> {
        return this.api.getHyperflexConfigResultEntryList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ConfigResult' resource.
     * @param param the request object
     */
    public getHyperflexConfigResultList(param: HyperflexApiGetHyperflexConfigResultListRequest, options?: Configuration): Promise<HyperflexConfigResultResponse> {
        return this.api.getHyperflexConfigResultList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ExtFcStoragePolicy' resource.
     * @param param the request object
     */
    public getHyperflexExtFcStoragePolicyByMoid(param: HyperflexApiGetHyperflexExtFcStoragePolicyByMoidRequest, options?: Configuration): Promise<HyperflexExtFcStoragePolicy> {
        return this.api.getHyperflexExtFcStoragePolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ExtFcStoragePolicy' resource.
     * @param param the request object
     */
    public getHyperflexExtFcStoragePolicyList(param: HyperflexApiGetHyperflexExtFcStoragePolicyListRequest, options?: Configuration): Promise<HyperflexExtFcStoragePolicyResponse> {
        return this.api.getHyperflexExtFcStoragePolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ExtIscsiStoragePolicy' resource.
     * @param param the request object
     */
    public getHyperflexExtIscsiStoragePolicyByMoid(param: HyperflexApiGetHyperflexExtIscsiStoragePolicyByMoidRequest, options?: Configuration): Promise<HyperflexExtIscsiStoragePolicy> {
        return this.api.getHyperflexExtIscsiStoragePolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ExtIscsiStoragePolicy' resource.
     * @param param the request object
     */
    public getHyperflexExtIscsiStoragePolicyList(param: HyperflexApiGetHyperflexExtIscsiStoragePolicyListRequest, options?: Configuration): Promise<HyperflexExtIscsiStoragePolicyResponse> {
        return this.api.getHyperflexExtIscsiStoragePolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.FeatureLimitExternal' resource.
     * @param param the request object
     */
    public getHyperflexFeatureLimitExternalByMoid(param: HyperflexApiGetHyperflexFeatureLimitExternalByMoidRequest, options?: Configuration): Promise<HyperflexFeatureLimitExternal> {
        return this.api.getHyperflexFeatureLimitExternalByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.FeatureLimitExternal' resource.
     * @param param the request object
     */
    public getHyperflexFeatureLimitExternalList(param: HyperflexApiGetHyperflexFeatureLimitExternalListRequest, options?: Configuration): Promise<HyperflexFeatureLimitExternalResponse> {
        return this.api.getHyperflexFeatureLimitExternalList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.FeatureLimitInternal' resource.
     * @param param the request object
     */
    public getHyperflexFeatureLimitInternalByMoid(param: HyperflexApiGetHyperflexFeatureLimitInternalByMoidRequest, options?: Configuration): Promise<HyperflexFeatureLimitInternal> {
        return this.api.getHyperflexFeatureLimitInternalByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.FeatureLimitInternal' resource.
     * @param param the request object
     */
    public getHyperflexFeatureLimitInternalList(param: HyperflexApiGetHyperflexFeatureLimitInternalListRequest, options?: Configuration): Promise<HyperflexFeatureLimitInternalResponse> {
        return this.api.getHyperflexFeatureLimitInternalList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.Health' resource.
     * @param param the request object
     */
    public getHyperflexHealthByMoid(param: HyperflexApiGetHyperflexHealthByMoidRequest, options?: Configuration): Promise<HyperflexHealth> {
        return this.api.getHyperflexHealthByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.Health' resource.
     * @param param the request object
     */
    public getHyperflexHealthList(param: HyperflexApiGetHyperflexHealthListRequest, options?: Configuration): Promise<HyperflexHealthResponse> {
        return this.api.getHyperflexHealthList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.HxdpVersion' resource.
     * @param param the request object
     */
    public getHyperflexHxdpVersionByMoid(param: HyperflexApiGetHyperflexHxdpVersionByMoidRequest, options?: Configuration): Promise<HyperflexHxdpVersion> {
        return this.api.getHyperflexHxdpVersionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.HxdpVersion' resource.
     * @param param the request object
     */
    public getHyperflexHxdpVersionList(param: HyperflexApiGetHyperflexHxdpVersionListRequest, options?: Configuration): Promise<HyperflexHxdpVersionResponse> {
        return this.api.getHyperflexHxdpVersionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.LocalCredentialPolicy' resource.
     * @param param the request object
     */
    public getHyperflexLocalCredentialPolicyByMoid(param: HyperflexApiGetHyperflexLocalCredentialPolicyByMoidRequest, options?: Configuration): Promise<HyperflexLocalCredentialPolicy> {
        return this.api.getHyperflexLocalCredentialPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.LocalCredentialPolicy' resource.
     * @param param the request object
     */
    public getHyperflexLocalCredentialPolicyList(param: HyperflexApiGetHyperflexLocalCredentialPolicyListRequest, options?: Configuration): Promise<HyperflexLocalCredentialPolicyResponse> {
        return this.api.getHyperflexLocalCredentialPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.Node' resource.
     * @param param the request object
     */
    public getHyperflexNodeByMoid(param: HyperflexApiGetHyperflexNodeByMoidRequest, options?: Configuration): Promise<HyperflexNode> {
        return this.api.getHyperflexNodeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.NodeConfigPolicy' resource.
     * @param param the request object
     */
    public getHyperflexNodeConfigPolicyByMoid(param: HyperflexApiGetHyperflexNodeConfigPolicyByMoidRequest, options?: Configuration): Promise<HyperflexNodeConfigPolicy> {
        return this.api.getHyperflexNodeConfigPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.NodeConfigPolicy' resource.
     * @param param the request object
     */
    public getHyperflexNodeConfigPolicyList(param: HyperflexApiGetHyperflexNodeConfigPolicyListRequest, options?: Configuration): Promise<HyperflexNodeConfigPolicyResponse> {
        return this.api.getHyperflexNodeConfigPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.Node' resource.
     * @param param the request object
     */
    public getHyperflexNodeList(param: HyperflexApiGetHyperflexNodeListRequest, options?: Configuration): Promise<HyperflexNodeResponse> {
        return this.api.getHyperflexNodeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.NodeProfile' resource.
     * @param param the request object
     */
    public getHyperflexNodeProfileByMoid(param: HyperflexApiGetHyperflexNodeProfileByMoidRequest, options?: Configuration): Promise<HyperflexNodeProfile> {
        return this.api.getHyperflexNodeProfileByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.NodeProfile' resource.
     * @param param the request object
     */
    public getHyperflexNodeProfileList(param: HyperflexApiGetHyperflexNodeProfileListRequest, options?: Configuration): Promise<HyperflexNodeProfileResponse> {
        return this.api.getHyperflexNodeProfileList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ProxySettingPolicy' resource.
     * @param param the request object
     */
    public getHyperflexProxySettingPolicyByMoid(param: HyperflexApiGetHyperflexProxySettingPolicyByMoidRequest, options?: Configuration): Promise<HyperflexProxySettingPolicy> {
        return this.api.getHyperflexProxySettingPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ProxySettingPolicy' resource.
     * @param param the request object
     */
    public getHyperflexProxySettingPolicyList(param: HyperflexApiGetHyperflexProxySettingPolicyListRequest, options?: Configuration): Promise<HyperflexProxySettingPolicyResponse> {
        return this.api.getHyperflexProxySettingPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ServerFirmwareVersion' resource.
     * @param param the request object
     */
    public getHyperflexServerFirmwareVersionByMoid(param: HyperflexApiGetHyperflexServerFirmwareVersionByMoidRequest, options?: Configuration): Promise<HyperflexServerFirmwareVersion> {
        return this.api.getHyperflexServerFirmwareVersionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ServerFirmwareVersion' resource.
     * @param param the request object
     */
    public getHyperflexServerFirmwareVersionList(param: HyperflexApiGetHyperflexServerFirmwareVersionListRequest, options?: Configuration): Promise<HyperflexServerFirmwareVersionResponse> {
        return this.api.getHyperflexServerFirmwareVersionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ServerModel' resource.
     * @param param the request object
     */
    public getHyperflexServerModelByMoid(param: HyperflexApiGetHyperflexServerModelByMoidRequest, options?: Configuration): Promise<HyperflexServerModel> {
        return this.api.getHyperflexServerModelByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.ServerModel' resource.
     * @param param the request object
     */
    public getHyperflexServerModelList(param: HyperflexApiGetHyperflexServerModelListRequest, options?: Configuration): Promise<HyperflexServerModelResponse> {
        return this.api.getHyperflexServerModelList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.SoftwareVersionPolicy' resource.
     * @param param the request object
     */
    public getHyperflexSoftwareVersionPolicyByMoid(param: HyperflexApiGetHyperflexSoftwareVersionPolicyByMoidRequest, options?: Configuration): Promise<HyperflexSoftwareVersionPolicy> {
        return this.api.getHyperflexSoftwareVersionPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.SoftwareVersionPolicy' resource.
     * @param param the request object
     */
    public getHyperflexSoftwareVersionPolicyList(param: HyperflexApiGetHyperflexSoftwareVersionPolicyListRequest, options?: Configuration): Promise<HyperflexSoftwareVersionPolicyResponse> {
        return this.api.getHyperflexSoftwareVersionPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.SysConfigPolicy' resource.
     * @param param the request object
     */
    public getHyperflexSysConfigPolicyByMoid(param: HyperflexApiGetHyperflexSysConfigPolicyByMoidRequest, options?: Configuration): Promise<HyperflexSysConfigPolicy> {
        return this.api.getHyperflexSysConfigPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.SysConfigPolicy' resource.
     * @param param the request object
     */
    public getHyperflexSysConfigPolicyList(param: HyperflexApiGetHyperflexSysConfigPolicyListRequest, options?: Configuration): Promise<HyperflexSysConfigPolicyResponse> {
        return this.api.getHyperflexSysConfigPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.UcsmConfigPolicy' resource.
     * @param param the request object
     */
    public getHyperflexUcsmConfigPolicyByMoid(param: HyperflexApiGetHyperflexUcsmConfigPolicyByMoidRequest, options?: Configuration): Promise<HyperflexUcsmConfigPolicy> {
        return this.api.getHyperflexUcsmConfigPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.UcsmConfigPolicy' resource.
     * @param param the request object
     */
    public getHyperflexUcsmConfigPolicyList(param: HyperflexApiGetHyperflexUcsmConfigPolicyListRequest, options?: Configuration): Promise<HyperflexUcsmConfigPolicyResponse> {
        return this.api.getHyperflexUcsmConfigPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.VcenterConfigPolicy' resource.
     * @param param the request object
     */
    public getHyperflexVcenterConfigPolicyByMoid(param: HyperflexApiGetHyperflexVcenterConfigPolicyByMoidRequest, options?: Configuration): Promise<HyperflexVcenterConfigPolicy> {
        return this.api.getHyperflexVcenterConfigPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'hyperflex.VcenterConfigPolicy' resource.
     * @param param the request object
     */
    public getHyperflexVcenterConfigPolicyList(param: HyperflexApiGetHyperflexVcenterConfigPolicyListRequest, options?: Configuration): Promise<HyperflexVcenterConfigPolicyResponse> {
        return this.api.getHyperflexVcenterConfigPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.AppCatalog' resource.
     * @param param the request object
     */
    public patchHyperflexAppCatalog(param: HyperflexApiPatchHyperflexAppCatalogRequest, options?: Configuration): Promise<HyperflexAppCatalog> {
        return this.api.patchHyperflexAppCatalog(param.moid, param.hyperflexAppCatalog, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.AutoSupportPolicy' resource.
     * @param param the request object
     */
    public patchHyperflexAutoSupportPolicy(param: HyperflexApiPatchHyperflexAutoSupportPolicyRequest, options?: Configuration): Promise<HyperflexAutoSupportPolicy> {
        return this.api.patchHyperflexAutoSupportPolicy(param.moid, param.hyperflexAutoSupportPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.CapabilityInfo' resource.
     * @param param the request object
     */
    public patchHyperflexCapabilityInfo(param: HyperflexApiPatchHyperflexCapabilityInfoRequest, options?: Configuration): Promise<HyperflexCapabilityInfo> {
        return this.api.patchHyperflexCapabilityInfo(param.moid, param.hyperflexCapabilityInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.Cluster' resource.
     * @param param the request object
     */
    public patchHyperflexCluster(param: HyperflexApiPatchHyperflexClusterRequest, options?: Configuration): Promise<HyperflexCluster> {
        return this.api.patchHyperflexCluster(param.moid, param.hyperflexCluster, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ClusterNetworkPolicy' resource.
     * @param param the request object
     */
    public patchHyperflexClusterNetworkPolicy(param: HyperflexApiPatchHyperflexClusterNetworkPolicyRequest, options?: Configuration): Promise<HyperflexClusterNetworkPolicy> {
        return this.api.patchHyperflexClusterNetworkPolicy(param.moid, param.hyperflexClusterNetworkPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ClusterProfile' resource.
     * @param param the request object
     */
    public patchHyperflexClusterProfile(param: HyperflexApiPatchHyperflexClusterProfileRequest, options?: Configuration): Promise<HyperflexClusterProfile> {
        return this.api.patchHyperflexClusterProfile(param.moid, param.hyperflexClusterProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ClusterStoragePolicy' resource.
     * @param param the request object
     */
    public patchHyperflexClusterStoragePolicy(param: HyperflexApiPatchHyperflexClusterStoragePolicyRequest, options?: Configuration): Promise<HyperflexClusterStoragePolicy> {
        return this.api.patchHyperflexClusterStoragePolicy(param.moid, param.hyperflexClusterStoragePolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ExtFcStoragePolicy' resource.
     * @param param the request object
     */
    public patchHyperflexExtFcStoragePolicy(param: HyperflexApiPatchHyperflexExtFcStoragePolicyRequest, options?: Configuration): Promise<HyperflexExtFcStoragePolicy> {
        return this.api.patchHyperflexExtFcStoragePolicy(param.moid, param.hyperflexExtFcStoragePolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ExtIscsiStoragePolicy' resource.
     * @param param the request object
     */
    public patchHyperflexExtIscsiStoragePolicy(param: HyperflexApiPatchHyperflexExtIscsiStoragePolicyRequest, options?: Configuration): Promise<HyperflexExtIscsiStoragePolicy> {
        return this.api.patchHyperflexExtIscsiStoragePolicy(param.moid, param.hyperflexExtIscsiStoragePolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.FeatureLimitExternal' resource.
     * @param param the request object
     */
    public patchHyperflexFeatureLimitExternal(param: HyperflexApiPatchHyperflexFeatureLimitExternalRequest, options?: Configuration): Promise<HyperflexFeatureLimitExternal> {
        return this.api.patchHyperflexFeatureLimitExternal(param.moid, param.hyperflexFeatureLimitExternal, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.FeatureLimitInternal' resource.
     * @param param the request object
     */
    public patchHyperflexFeatureLimitInternal(param: HyperflexApiPatchHyperflexFeatureLimitInternalRequest, options?: Configuration): Promise<HyperflexFeatureLimitInternal> {
        return this.api.patchHyperflexFeatureLimitInternal(param.moid, param.hyperflexFeatureLimitInternal, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.HxdpVersion' resource.
     * @param param the request object
     */
    public patchHyperflexHxdpVersion(param: HyperflexApiPatchHyperflexHxdpVersionRequest, options?: Configuration): Promise<HyperflexHxdpVersion> {
        return this.api.patchHyperflexHxdpVersion(param.moid, param.hyperflexHxdpVersion, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.LocalCredentialPolicy' resource.
     * @param param the request object
     */
    public patchHyperflexLocalCredentialPolicy(param: HyperflexApiPatchHyperflexLocalCredentialPolicyRequest, options?: Configuration): Promise<HyperflexLocalCredentialPolicy> {
        return this.api.patchHyperflexLocalCredentialPolicy(param.moid, param.hyperflexLocalCredentialPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.NodeConfigPolicy' resource.
     * @param param the request object
     */
    public patchHyperflexNodeConfigPolicy(param: HyperflexApiPatchHyperflexNodeConfigPolicyRequest, options?: Configuration): Promise<HyperflexNodeConfigPolicy> {
        return this.api.patchHyperflexNodeConfigPolicy(param.moid, param.hyperflexNodeConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.NodeProfile' resource.
     * @param param the request object
     */
    public patchHyperflexNodeProfile(param: HyperflexApiPatchHyperflexNodeProfileRequest, options?: Configuration): Promise<HyperflexNodeProfile> {
        return this.api.patchHyperflexNodeProfile(param.moid, param.hyperflexNodeProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ProxySettingPolicy' resource.
     * @param param the request object
     */
    public patchHyperflexProxySettingPolicy(param: HyperflexApiPatchHyperflexProxySettingPolicyRequest, options?: Configuration): Promise<HyperflexProxySettingPolicy> {
        return this.api.patchHyperflexProxySettingPolicy(param.moid, param.hyperflexProxySettingPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ServerFirmwareVersion' resource.
     * @param param the request object
     */
    public patchHyperflexServerFirmwareVersion(param: HyperflexApiPatchHyperflexServerFirmwareVersionRequest, options?: Configuration): Promise<HyperflexServerFirmwareVersion> {
        return this.api.patchHyperflexServerFirmwareVersion(param.moid, param.hyperflexServerFirmwareVersion, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ServerModel' resource.
     * @param param the request object
     */
    public patchHyperflexServerModel(param: HyperflexApiPatchHyperflexServerModelRequest, options?: Configuration): Promise<HyperflexServerModel> {
        return this.api.patchHyperflexServerModel(param.moid, param.hyperflexServerModel, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.SoftwareVersionPolicy' resource.
     * @param param the request object
     */
    public patchHyperflexSoftwareVersionPolicy(param: HyperflexApiPatchHyperflexSoftwareVersionPolicyRequest, options?: Configuration): Promise<HyperflexSoftwareVersionPolicy> {
        return this.api.patchHyperflexSoftwareVersionPolicy(param.moid, param.hyperflexSoftwareVersionPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.SysConfigPolicy' resource.
     * @param param the request object
     */
    public patchHyperflexSysConfigPolicy(param: HyperflexApiPatchHyperflexSysConfigPolicyRequest, options?: Configuration): Promise<HyperflexSysConfigPolicy> {
        return this.api.patchHyperflexSysConfigPolicy(param.moid, param.hyperflexSysConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.UcsmConfigPolicy' resource.
     * @param param the request object
     */
    public patchHyperflexUcsmConfigPolicy(param: HyperflexApiPatchHyperflexUcsmConfigPolicyRequest, options?: Configuration): Promise<HyperflexUcsmConfigPolicy> {
        return this.api.patchHyperflexUcsmConfigPolicy(param.moid, param.hyperflexUcsmConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.VcenterConfigPolicy' resource.
     * @param param the request object
     */
    public patchHyperflexVcenterConfigPolicy(param: HyperflexApiPatchHyperflexVcenterConfigPolicyRequest, options?: Configuration): Promise<HyperflexVcenterConfigPolicy> {
        return this.api.patchHyperflexVcenterConfigPolicy(param.moid, param.hyperflexVcenterConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.AppCatalog' resource.
     * @param param the request object
     */
    public updateHyperflexAppCatalog(param: HyperflexApiUpdateHyperflexAppCatalogRequest, options?: Configuration): Promise<HyperflexAppCatalog> {
        return this.api.updateHyperflexAppCatalog(param.moid, param.hyperflexAppCatalog, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.AutoSupportPolicy' resource.
     * @param param the request object
     */
    public updateHyperflexAutoSupportPolicy(param: HyperflexApiUpdateHyperflexAutoSupportPolicyRequest, options?: Configuration): Promise<HyperflexAutoSupportPolicy> {
        return this.api.updateHyperflexAutoSupportPolicy(param.moid, param.hyperflexAutoSupportPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.CapabilityInfo' resource.
     * @param param the request object
     */
    public updateHyperflexCapabilityInfo(param: HyperflexApiUpdateHyperflexCapabilityInfoRequest, options?: Configuration): Promise<HyperflexCapabilityInfo> {
        return this.api.updateHyperflexCapabilityInfo(param.moid, param.hyperflexCapabilityInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.Cluster' resource.
     * @param param the request object
     */
    public updateHyperflexCluster(param: HyperflexApiUpdateHyperflexClusterRequest, options?: Configuration): Promise<HyperflexCluster> {
        return this.api.updateHyperflexCluster(param.moid, param.hyperflexCluster, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ClusterNetworkPolicy' resource.
     * @param param the request object
     */
    public updateHyperflexClusterNetworkPolicy(param: HyperflexApiUpdateHyperflexClusterNetworkPolicyRequest, options?: Configuration): Promise<HyperflexClusterNetworkPolicy> {
        return this.api.updateHyperflexClusterNetworkPolicy(param.moid, param.hyperflexClusterNetworkPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ClusterProfile' resource.
     * @param param the request object
     */
    public updateHyperflexClusterProfile(param: HyperflexApiUpdateHyperflexClusterProfileRequest, options?: Configuration): Promise<HyperflexClusterProfile> {
        return this.api.updateHyperflexClusterProfile(param.moid, param.hyperflexClusterProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ClusterStoragePolicy' resource.
     * @param param the request object
     */
    public updateHyperflexClusterStoragePolicy(param: HyperflexApiUpdateHyperflexClusterStoragePolicyRequest, options?: Configuration): Promise<HyperflexClusterStoragePolicy> {
        return this.api.updateHyperflexClusterStoragePolicy(param.moid, param.hyperflexClusterStoragePolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ExtFcStoragePolicy' resource.
     * @param param the request object
     */
    public updateHyperflexExtFcStoragePolicy(param: HyperflexApiUpdateHyperflexExtFcStoragePolicyRequest, options?: Configuration): Promise<HyperflexExtFcStoragePolicy> {
        return this.api.updateHyperflexExtFcStoragePolicy(param.moid, param.hyperflexExtFcStoragePolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ExtIscsiStoragePolicy' resource.
     * @param param the request object
     */
    public updateHyperflexExtIscsiStoragePolicy(param: HyperflexApiUpdateHyperflexExtIscsiStoragePolicyRequest, options?: Configuration): Promise<HyperflexExtIscsiStoragePolicy> {
        return this.api.updateHyperflexExtIscsiStoragePolicy(param.moid, param.hyperflexExtIscsiStoragePolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.FeatureLimitExternal' resource.
     * @param param the request object
     */
    public updateHyperflexFeatureLimitExternal(param: HyperflexApiUpdateHyperflexFeatureLimitExternalRequest, options?: Configuration): Promise<HyperflexFeatureLimitExternal> {
        return this.api.updateHyperflexFeatureLimitExternal(param.moid, param.hyperflexFeatureLimitExternal, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.FeatureLimitInternal' resource.
     * @param param the request object
     */
    public updateHyperflexFeatureLimitInternal(param: HyperflexApiUpdateHyperflexFeatureLimitInternalRequest, options?: Configuration): Promise<HyperflexFeatureLimitInternal> {
        return this.api.updateHyperflexFeatureLimitInternal(param.moid, param.hyperflexFeatureLimitInternal, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.HxdpVersion' resource.
     * @param param the request object
     */
    public updateHyperflexHxdpVersion(param: HyperflexApiUpdateHyperflexHxdpVersionRequest, options?: Configuration): Promise<HyperflexHxdpVersion> {
        return this.api.updateHyperflexHxdpVersion(param.moid, param.hyperflexHxdpVersion, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.LocalCredentialPolicy' resource.
     * @param param the request object
     */
    public updateHyperflexLocalCredentialPolicy(param: HyperflexApiUpdateHyperflexLocalCredentialPolicyRequest, options?: Configuration): Promise<HyperflexLocalCredentialPolicy> {
        return this.api.updateHyperflexLocalCredentialPolicy(param.moid, param.hyperflexLocalCredentialPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.NodeConfigPolicy' resource.
     * @param param the request object
     */
    public updateHyperflexNodeConfigPolicy(param: HyperflexApiUpdateHyperflexNodeConfigPolicyRequest, options?: Configuration): Promise<HyperflexNodeConfigPolicy> {
        return this.api.updateHyperflexNodeConfigPolicy(param.moid, param.hyperflexNodeConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.NodeProfile' resource.
     * @param param the request object
     */
    public updateHyperflexNodeProfile(param: HyperflexApiUpdateHyperflexNodeProfileRequest, options?: Configuration): Promise<HyperflexNodeProfile> {
        return this.api.updateHyperflexNodeProfile(param.moid, param.hyperflexNodeProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ProxySettingPolicy' resource.
     * @param param the request object
     */
    public updateHyperflexProxySettingPolicy(param: HyperflexApiUpdateHyperflexProxySettingPolicyRequest, options?: Configuration): Promise<HyperflexProxySettingPolicy> {
        return this.api.updateHyperflexProxySettingPolicy(param.moid, param.hyperflexProxySettingPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ServerFirmwareVersion' resource.
     * @param param the request object
     */
    public updateHyperflexServerFirmwareVersion(param: HyperflexApiUpdateHyperflexServerFirmwareVersionRequest, options?: Configuration): Promise<HyperflexServerFirmwareVersion> {
        return this.api.updateHyperflexServerFirmwareVersion(param.moid, param.hyperflexServerFirmwareVersion, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.ServerModel' resource.
     * @param param the request object
     */
    public updateHyperflexServerModel(param: HyperflexApiUpdateHyperflexServerModelRequest, options?: Configuration): Promise<HyperflexServerModel> {
        return this.api.updateHyperflexServerModel(param.moid, param.hyperflexServerModel, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.SoftwareVersionPolicy' resource.
     * @param param the request object
     */
    public updateHyperflexSoftwareVersionPolicy(param: HyperflexApiUpdateHyperflexSoftwareVersionPolicyRequest, options?: Configuration): Promise<HyperflexSoftwareVersionPolicy> {
        return this.api.updateHyperflexSoftwareVersionPolicy(param.moid, param.hyperflexSoftwareVersionPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.SysConfigPolicy' resource.
     * @param param the request object
     */
    public updateHyperflexSysConfigPolicy(param: HyperflexApiUpdateHyperflexSysConfigPolicyRequest, options?: Configuration): Promise<HyperflexSysConfigPolicy> {
        return this.api.updateHyperflexSysConfigPolicy(param.moid, param.hyperflexSysConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.UcsmConfigPolicy' resource.
     * @param param the request object
     */
    public updateHyperflexUcsmConfigPolicy(param: HyperflexApiUpdateHyperflexUcsmConfigPolicyRequest, options?: Configuration): Promise<HyperflexUcsmConfigPolicy> {
        return this.api.updateHyperflexUcsmConfigPolicy(param.moid, param.hyperflexUcsmConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'hyperflex.VcenterConfigPolicy' resource.
     * @param param the request object
     */
    public updateHyperflexVcenterConfigPolicy(param: HyperflexApiUpdateHyperflexVcenterConfigPolicyRequest, options?: Configuration): Promise<HyperflexVcenterConfigPolicy> {
        return this.api.updateHyperflexVcenterConfigPolicy(param.moid, param.hyperflexVcenterConfigPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableIaasApi } from "./ObservableAPI";
import { IaasApiRequestFactory, IaasApiResponseProcessor} from "../apis/IaasApi";

export interface IaasApiDeleteIaasUcsdInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IaasApideleteIaasUcsdInfo
     */
    moid: string
}

export interface IaasApiGetIaasConnectorPackByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IaasApigetIaasConnectorPackByMoid
     */
    moid: string
}

export interface IaasApiGetIaasConnectorPackListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IaasApigetIaasConnectorPackList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IaasApigetIaasConnectorPackList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IaasApigetIaasConnectorPackList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IaasApigetIaasConnectorPackList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IaasApigetIaasConnectorPackList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IaasApigetIaasConnectorPackList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IaasApigetIaasConnectorPackList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IaasApigetIaasConnectorPackList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IaasApigetIaasConnectorPackList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IaasApigetIaasConnectorPackList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IaasApigetIaasConnectorPackList
     */
    tags?: string
}

export interface IaasApiGetIaasDeviceStatusByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IaasApigetIaasDeviceStatusByMoid
     */
    moid: string
}

export interface IaasApiGetIaasDeviceStatusListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IaasApigetIaasDeviceStatusList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IaasApigetIaasDeviceStatusList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IaasApigetIaasDeviceStatusList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IaasApigetIaasDeviceStatusList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IaasApigetIaasDeviceStatusList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IaasApigetIaasDeviceStatusList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IaasApigetIaasDeviceStatusList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IaasApigetIaasDeviceStatusList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IaasApigetIaasDeviceStatusList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IaasApigetIaasDeviceStatusList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IaasApigetIaasDeviceStatusList
     */
    tags?: string
}

export interface IaasApiGetIaasLicenseInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IaasApigetIaasLicenseInfoByMoid
     */
    moid: string
}

export interface IaasApiGetIaasLicenseInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IaasApigetIaasLicenseInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IaasApigetIaasLicenseInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IaasApigetIaasLicenseInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IaasApigetIaasLicenseInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IaasApigetIaasLicenseInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IaasApigetIaasLicenseInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IaasApigetIaasLicenseInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IaasApigetIaasLicenseInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IaasApigetIaasLicenseInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IaasApigetIaasLicenseInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IaasApigetIaasLicenseInfoList
     */
    tags?: string
}

export interface IaasApiGetIaasMostRunTasksByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IaasApigetIaasMostRunTasksByMoid
     */
    moid: string
}

export interface IaasApiGetIaasMostRunTasksListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IaasApigetIaasMostRunTasksList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IaasApigetIaasMostRunTasksList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IaasApigetIaasMostRunTasksList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IaasApigetIaasMostRunTasksList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IaasApigetIaasMostRunTasksList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IaasApigetIaasMostRunTasksList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IaasApigetIaasMostRunTasksList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IaasApigetIaasMostRunTasksList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IaasApigetIaasMostRunTasksList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IaasApigetIaasMostRunTasksList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IaasApigetIaasMostRunTasksList
     */
    tags?: string
}

export interface IaasApiGetIaasUcsdInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IaasApigetIaasUcsdInfoByMoid
     */
    moid: string
}

export interface IaasApiGetIaasUcsdInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IaasApigetIaasUcsdInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IaasApigetIaasUcsdInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IaasApigetIaasUcsdInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IaasApigetIaasUcsdInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IaasApigetIaasUcsdInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IaasApigetIaasUcsdInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IaasApigetIaasUcsdInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IaasApigetIaasUcsdInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IaasApigetIaasUcsdInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IaasApigetIaasUcsdInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IaasApigetIaasUcsdInfoList
     */
    tags?: string
}

export interface IaasApiGetIaasUcsdManagedInfraByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IaasApigetIaasUcsdManagedInfraByMoid
     */
    moid: string
}

export interface IaasApiGetIaasUcsdManagedInfraListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IaasApigetIaasUcsdManagedInfraList
     */
    tags?: string
}

export interface IaasApiPatchIaasUcsdInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IaasApipatchIaasUcsdInfo
     */
    moid: string
    /**
     * The &#39;iaas.UcsdInfo&#39; resource to update.
     * @type IaasUcsdInfo
     * @memberof IaasApipatchIaasUcsdInfo
     */
    iaasUcsdInfo: IaasUcsdInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IaasApipatchIaasUcsdInfo
     */
    ifMatch?: string
}

export interface IaasApiUpdateIaasUcsdInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IaasApiupdateIaasUcsdInfo
     */
    moid: string
    /**
     * The &#39;iaas.UcsdInfo&#39; resource to update.
     * @type IaasUcsdInfo
     * @memberof IaasApiupdateIaasUcsdInfo
     */
    iaasUcsdInfo: IaasUcsdInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IaasApiupdateIaasUcsdInfo
     */
    ifMatch?: string
}


export class ObjectIaasApi {
    private api: ObservableIaasApi

    public constructor(configuration: Configuration, requestFactory?: IaasApiRequestFactory, responseProcessor?: IaasApiResponseProcessor) {
        this.api = new ObservableIaasApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Delete a 'iaas.UcsdInfo' resource.
     * @param param the request object
     */
    public deleteIaasUcsdInfo(param: IaasApiDeleteIaasUcsdInfoRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIaasUcsdInfo(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.ConnectorPack' resource.
     * @param param the request object
     */
    public getIaasConnectorPackByMoid(param: IaasApiGetIaasConnectorPackByMoidRequest, options?: Configuration): Promise<IaasConnectorPack> {
        return this.api.getIaasConnectorPackByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.ConnectorPack' resource.
     * @param param the request object
     */
    public getIaasConnectorPackList(param: IaasApiGetIaasConnectorPackListRequest, options?: Configuration): Promise<IaasConnectorPackResponse> {
        return this.api.getIaasConnectorPackList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.DeviceStatus' resource.
     * @param param the request object
     */
    public getIaasDeviceStatusByMoid(param: IaasApiGetIaasDeviceStatusByMoidRequest, options?: Configuration): Promise<IaasDeviceStatus> {
        return this.api.getIaasDeviceStatusByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.DeviceStatus' resource.
     * @param param the request object
     */
    public getIaasDeviceStatusList(param: IaasApiGetIaasDeviceStatusListRequest, options?: Configuration): Promise<IaasDeviceStatusResponse> {
        return this.api.getIaasDeviceStatusList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.LicenseInfo' resource.
     * @param param the request object
     */
    public getIaasLicenseInfoByMoid(param: IaasApiGetIaasLicenseInfoByMoidRequest, options?: Configuration): Promise<IaasLicenseInfo> {
        return this.api.getIaasLicenseInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.LicenseInfo' resource.
     * @param param the request object
     */
    public getIaasLicenseInfoList(param: IaasApiGetIaasLicenseInfoListRequest, options?: Configuration): Promise<IaasLicenseInfoResponse> {
        return this.api.getIaasLicenseInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.MostRunTasks' resource.
     * @param param the request object
     */
    public getIaasMostRunTasksByMoid(param: IaasApiGetIaasMostRunTasksByMoidRequest, options?: Configuration): Promise<IaasMostRunTasks> {
        return this.api.getIaasMostRunTasksByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.MostRunTasks' resource.
     * @param param the request object
     */
    public getIaasMostRunTasksList(param: IaasApiGetIaasMostRunTasksListRequest, options?: Configuration): Promise<IaasMostRunTasksResponse> {
        return this.api.getIaasMostRunTasksList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.UcsdInfo' resource.
     * @param param the request object
     */
    public getIaasUcsdInfoByMoid(param: IaasApiGetIaasUcsdInfoByMoidRequest, options?: Configuration): Promise<IaasUcsdInfo> {
        return this.api.getIaasUcsdInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.UcsdInfo' resource.
     * @param param the request object
     */
    public getIaasUcsdInfoList(param: IaasApiGetIaasUcsdInfoListRequest, options?: Configuration): Promise<IaasUcsdInfoResponse> {
        return this.api.getIaasUcsdInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.UcsdManagedInfra' resource.
     * @param param the request object
     */
    public getIaasUcsdManagedInfraByMoid(param: IaasApiGetIaasUcsdManagedInfraByMoidRequest, options?: Configuration): Promise<IaasUcsdManagedInfra> {
        return this.api.getIaasUcsdManagedInfraByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iaas.UcsdManagedInfra' resource.
     * @param param the request object
     */
    public getIaasUcsdManagedInfraList(param: IaasApiGetIaasUcsdManagedInfraListRequest, options?: Configuration): Promise<IaasUcsdManagedInfraResponse> {
        return this.api.getIaasUcsdManagedInfraList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'iaas.UcsdInfo' resource.
     * @param param the request object
     */
    public patchIaasUcsdInfo(param: IaasApiPatchIaasUcsdInfoRequest, options?: Configuration): Promise<IaasUcsdInfo> {
        return this.api.patchIaasUcsdInfo(param.moid, param.iaasUcsdInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iaas.UcsdInfo' resource.
     * @param param the request object
     */
    public updateIaasUcsdInfo(param: IaasApiUpdateIaasUcsdInfoRequest, options?: Configuration): Promise<IaasUcsdInfo> {
        return this.api.updateIaasUcsdInfo(param.moid, param.iaasUcsdInfo, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableIamApi } from "./ObservableAPI";
import { IamApiRequestFactory, IamApiResponseProcessor} from "../apis/IamApi";

export interface IamApiCreateIamAccountRequest {
    /**
     * The &#39;iam.Account&#39; resource to create.
     * @type IamAccount
     * @memberof IamApicreateIamAccount
     */
    iamAccount: IamAccount
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamAccount
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamAccount
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamAccountExperienceRequest {
    /**
     * The &#39;iam.AccountExperience&#39; resource to create.
     * @type IamAccountExperience
     * @memberof IamApicreateIamAccountExperience
     */
    iamAccountExperience: IamAccountExperience
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamAccountExperience
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamAccountExperience
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamApiKeyRequest {
    /**
     * The &#39;iam.ApiKey&#39; resource to create.
     * @type IamApiKey
     * @memberof IamApicreateIamApiKey
     */
    iamApiKey: IamApiKey
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamApiKey
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamApiKey
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamAppRegistrationRequest {
    /**
     * The &#39;iam.AppRegistration&#39; resource to create.
     * @type IamAppRegistration
     * @memberof IamApicreateIamAppRegistration
     */
    iamAppRegistration: IamAppRegistration
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamAppRegistration
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamAppRegistration
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamCertificateRequest {
    /**
     * The &#39;iam.Certificate&#39; resource to create.
     * @type IamCertificate
     * @memberof IamApicreateIamCertificate
     */
    iamCertificate: IamCertificate
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamCertificate
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamCertificate
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamCertificateRequestRequest {
    /**
     * The &#39;iam.CertificateRequest&#39; resource to create.
     * @type IamCertificateRequest
     * @memberof IamApicreateIamCertificateRequest
     */
    iamCertificateRequest: IamCertificateRequest
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamCertificateRequest
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamCertificateRequest
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamEndPointUserRequest {
    /**
     * The &#39;iam.EndPointUser&#39; resource to create.
     * @type IamEndPointUser
     * @memberof IamApicreateIamEndPointUser
     */
    iamEndPointUser: IamEndPointUser
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamEndPointUser
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamEndPointUser
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamEndPointUserPolicyRequest {
    /**
     * The &#39;iam.EndPointUserPolicy&#39; resource to create.
     * @type IamEndPointUserPolicy
     * @memberof IamApicreateIamEndPointUserPolicy
     */
    iamEndPointUserPolicy: IamEndPointUserPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamEndPointUserPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamEndPointUserPolicy
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamEndPointUserRoleRequest {
    /**
     * The &#39;iam.EndPointUserRole&#39; resource to create.
     * @type IamEndPointUserRole
     * @memberof IamApicreateIamEndPointUserRole
     */
    iamEndPointUserRole: IamEndPointUserRole
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamEndPointUserRole
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamEndPointUserRole
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamIdpRequest {
    /**
     * The &#39;iam.Idp&#39; resource to create.
     * @type IamIdp
     * @memberof IamApicreateIamIdp
     */
    iamIdp: IamIdp
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamIdp
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamIdp
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamLdapGroupRequest {
    /**
     * The &#39;iam.LdapGroup&#39; resource to create.
     * @type IamLdapGroup
     * @memberof IamApicreateIamLdapGroup
     */
    iamLdapGroup: IamLdapGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamLdapGroup
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamLdapGroup
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamLdapPolicyRequest {
    /**
     * The &#39;iam.LdapPolicy&#39; resource to create.
     * @type IamLdapPolicy
     * @memberof IamApicreateIamLdapPolicy
     */
    iamLdapPolicy: IamLdapPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamLdapPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamLdapPolicy
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamLdapProviderRequest {
    /**
     * The &#39;iam.LdapProvider&#39; resource to create.
     * @type IamLdapProvider
     * @memberof IamApicreateIamLdapProvider
     */
    iamLdapProvider: IamLdapProvider
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamLdapProvider
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamLdapProvider
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamPermissionRequest {
    /**
     * The &#39;iam.Permission&#39; resource to create.
     * @type IamPermission
     * @memberof IamApicreateIamPermission
     */
    iamPermission: IamPermission
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamPermission
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamPermission
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamPrivateKeySpecRequest {
    /**
     * The &#39;iam.PrivateKeySpec&#39; resource to create.
     * @type IamPrivateKeySpec
     * @memberof IamApicreateIamPrivateKeySpec
     */
    iamPrivateKeySpec: IamPrivateKeySpec
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamPrivateKeySpec
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamPrivateKeySpec
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamQualifierRequest {
    /**
     * The &#39;iam.Qualifier&#39; resource to create.
     * @type IamQualifier
     * @memberof IamApicreateIamQualifier
     */
    iamQualifier: IamQualifier
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamQualifier
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamQualifier
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamResourceRolesRequest {
    /**
     * The &#39;iam.ResourceRoles&#39; resource to create.
     * @type IamResourceRoles
     * @memberof IamApicreateIamResourceRoles
     */
    iamResourceRoles: IamResourceRoles
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamResourceRoles
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamResourceRoles
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamSessionLimitsRequest {
    /**
     * The &#39;iam.SessionLimits&#39; resource to create.
     * @type IamSessionLimits
     * @memberof IamApicreateIamSessionLimits
     */
    iamSessionLimits: IamSessionLimits
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamSessionLimits
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamSessionLimits
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamTrustPointRequest {
    /**
     * The &#39;iam.TrustPoint&#39; resource to create.
     * @type IamTrustPoint
     * @memberof IamApicreateIamTrustPoint
     */
    iamTrustPoint: IamTrustPoint
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamTrustPoint
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamTrustPoint
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamUserRequest {
    /**
     * The &#39;iam.User&#39; resource to create.
     * @type IamUser
     * @memberof IamApicreateIamUser
     */
    iamUser: IamUser
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamUser
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamUser
     */
    ifNoneMatch?: string
}

export interface IamApiCreateIamUserGroupRequest {
    /**
     * The &#39;iam.UserGroup&#39; resource to create.
     * @type IamUserGroup
     * @memberof IamApicreateIamUserGroup
     */
    iamUserGroup: IamUserGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApicreateIamUserGroup
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IamApicreateIamUserGroup
     */
    ifNoneMatch?: string
}

export interface IamApiDeleteIamAccountRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamAccount
     */
    moid: string
}

export interface IamApiDeleteIamApiKeyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamApiKey
     */
    moid: string
}

export interface IamApiDeleteIamAppRegistrationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamAppRegistration
     */
    moid: string
}

export interface IamApiDeleteIamCertificateRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamCertificate
     */
    moid: string
}

export interface IamApiDeleteIamCertificateRequestRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamCertificateRequest
     */
    moid: string
}

export interface IamApiDeleteIamEndPointUserRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamEndPointUser
     */
    moid: string
}

export interface IamApiDeleteIamEndPointUserPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamEndPointUserPolicy
     */
    moid: string
}

export interface IamApiDeleteIamEndPointUserRoleRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamEndPointUserRole
     */
    moid: string
}

export interface IamApiDeleteIamIdpRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamIdp
     */
    moid: string
}

export interface IamApiDeleteIamLdapGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamLdapGroup
     */
    moid: string
}

export interface IamApiDeleteIamLdapPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamLdapPolicy
     */
    moid: string
}

export interface IamApiDeleteIamLdapProviderRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamLdapProvider
     */
    moid: string
}

export interface IamApiDeleteIamOAuthTokenRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamOAuthToken
     */
    moid: string
}

export interface IamApiDeleteIamPermissionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamPermission
     */
    moid: string
}

export interface IamApiDeleteIamPrivateKeySpecRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamPrivateKeySpec
     */
    moid: string
}

export interface IamApiDeleteIamQualifierRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamQualifier
     */
    moid: string
}

export interface IamApiDeleteIamResourceRolesRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamResourceRoles
     */
    moid: string
}

export interface IamApiDeleteIamSessionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamSession
     */
    moid: string
}

export interface IamApiDeleteIamSessionLimitsRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamSessionLimits
     */
    moid: string
}

export interface IamApiDeleteIamTrustPointRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamTrustPoint
     */
    moid: string
}

export interface IamApiDeleteIamUserRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamUser
     */
    moid: string
}

export interface IamApiDeleteIamUserGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApideleteIamUserGroup
     */
    moid: string
}

export interface IamApiGetIamAccountByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamAccountByMoid
     */
    moid: string
}

export interface IamApiGetIamAccountExperienceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamAccountExperienceByMoid
     */
    moid: string
}

export interface IamApiGetIamAccountExperienceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamAccountExperienceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamAccountExperienceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamAccountExperienceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamAccountExperienceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamAccountExperienceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamAccountExperienceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamAccountExperienceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamAccountExperienceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamAccountExperienceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamAccountExperienceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamAccountExperienceList
     */
    tags?: string
}

export interface IamApiGetIamAccountListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamAccountList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamAccountList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamAccountList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamAccountList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamAccountList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamAccountList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamAccountList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamAccountList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamAccountList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamAccountList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamAccountList
     */
    tags?: string
}

export interface IamApiGetIamApiKeyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamApiKeyByMoid
     */
    moid: string
}

export interface IamApiGetIamApiKeyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamApiKeyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamApiKeyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamApiKeyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamApiKeyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamApiKeyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamApiKeyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamApiKeyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamApiKeyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamApiKeyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamApiKeyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamApiKeyList
     */
    tags?: string
}

export interface IamApiGetIamAppRegistrationByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamAppRegistrationByMoid
     */
    moid: string
}

export interface IamApiGetIamAppRegistrationListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamAppRegistrationList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamAppRegistrationList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamAppRegistrationList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamAppRegistrationList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamAppRegistrationList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamAppRegistrationList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamAppRegistrationList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamAppRegistrationList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamAppRegistrationList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamAppRegistrationList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamAppRegistrationList
     */
    tags?: string
}

export interface IamApiGetIamCertificateByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamCertificateByMoid
     */
    moid: string
}

export interface IamApiGetIamCertificateListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamCertificateList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamCertificateList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamCertificateList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamCertificateList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamCertificateList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamCertificateList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamCertificateList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamCertificateList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamCertificateList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamCertificateList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamCertificateList
     */
    tags?: string
}

export interface IamApiGetIamCertificateRequestByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamCertificateRequestByMoid
     */
    moid: string
}

export interface IamApiGetIamCertificateRequestListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamCertificateRequestList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamCertificateRequestList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamCertificateRequestList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamCertificateRequestList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamCertificateRequestList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamCertificateRequestList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamCertificateRequestList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamCertificateRequestList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamCertificateRequestList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamCertificateRequestList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamCertificateRequestList
     */
    tags?: string
}

export interface IamApiGetIamDomainGroupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamDomainGroupByMoid
     */
    moid: string
}

export interface IamApiGetIamDomainGroupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamDomainGroupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamDomainGroupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamDomainGroupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamDomainGroupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamDomainGroupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamDomainGroupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamDomainGroupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamDomainGroupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamDomainGroupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamDomainGroupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamDomainGroupList
     */
    tags?: string
}

export interface IamApiGetIamEndPointPrivilegeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamEndPointPrivilegeByMoid
     */
    moid: string
}

export interface IamApiGetIamEndPointPrivilegeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamEndPointPrivilegeList
     */
    tags?: string
}

export interface IamApiGetIamEndPointRoleByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamEndPointRoleByMoid
     */
    moid: string
}

export interface IamApiGetIamEndPointRoleListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamEndPointRoleList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamEndPointRoleList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamEndPointRoleList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamEndPointRoleList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamEndPointRoleList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamEndPointRoleList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamEndPointRoleList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamEndPointRoleList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamEndPointRoleList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamEndPointRoleList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamEndPointRoleList
     */
    tags?: string
}

export interface IamApiGetIamEndPointUserByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamEndPointUserByMoid
     */
    moid: string
}

export interface IamApiGetIamEndPointUserListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamEndPointUserList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamEndPointUserList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamEndPointUserList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamEndPointUserList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamEndPointUserList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamEndPointUserList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamEndPointUserList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamEndPointUserList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamEndPointUserList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamEndPointUserList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamEndPointUserList
     */
    tags?: string
}

export interface IamApiGetIamEndPointUserPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamEndPointUserPolicyByMoid
     */
    moid: string
}

export interface IamApiGetIamEndPointUserPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamEndPointUserPolicyList
     */
    tags?: string
}

export interface IamApiGetIamEndPointUserRoleByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamEndPointUserRoleByMoid
     */
    moid: string
}

export interface IamApiGetIamEndPointUserRoleListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamEndPointUserRoleList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamEndPointUserRoleList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamEndPointUserRoleList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamEndPointUserRoleList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamEndPointUserRoleList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamEndPointUserRoleList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamEndPointUserRoleList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamEndPointUserRoleList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamEndPointUserRoleList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamEndPointUserRoleList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamEndPointUserRoleList
     */
    tags?: string
}

export interface IamApiGetIamIdpByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamIdpByMoid
     */
    moid: string
}

export interface IamApiGetIamIdpListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamIdpList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamIdpList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamIdpList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamIdpList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamIdpList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamIdpList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamIdpList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamIdpList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamIdpList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamIdpList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamIdpList
     */
    tags?: string
}

export interface IamApiGetIamIdpReferenceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamIdpReferenceByMoid
     */
    moid: string
}

export interface IamApiGetIamIdpReferenceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamIdpReferenceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamIdpReferenceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamIdpReferenceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamIdpReferenceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamIdpReferenceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamIdpReferenceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamIdpReferenceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamIdpReferenceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamIdpReferenceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamIdpReferenceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamIdpReferenceList
     */
    tags?: string
}

export interface IamApiGetIamLdapGroupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamLdapGroupByMoid
     */
    moid: string
}

export interface IamApiGetIamLdapGroupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamLdapGroupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamLdapGroupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamLdapGroupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamLdapGroupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamLdapGroupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamLdapGroupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamLdapGroupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamLdapGroupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamLdapGroupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamLdapGroupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamLdapGroupList
     */
    tags?: string
}

export interface IamApiGetIamLdapPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamLdapPolicyByMoid
     */
    moid: string
}

export interface IamApiGetIamLdapPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamLdapPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamLdapPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamLdapPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamLdapPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamLdapPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamLdapPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamLdapPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamLdapPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamLdapPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamLdapPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamLdapPolicyList
     */
    tags?: string
}

export interface IamApiGetIamLdapProviderByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamLdapProviderByMoid
     */
    moid: string
}

export interface IamApiGetIamLdapProviderListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamLdapProviderList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamLdapProviderList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamLdapProviderList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamLdapProviderList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamLdapProviderList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamLdapProviderList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamLdapProviderList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamLdapProviderList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamLdapProviderList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamLdapProviderList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamLdapProviderList
     */
    tags?: string
}

export interface IamApiGetIamOAuthTokenByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamOAuthTokenByMoid
     */
    moid: string
}

export interface IamApiGetIamOAuthTokenListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamOAuthTokenList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamOAuthTokenList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamOAuthTokenList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamOAuthTokenList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamOAuthTokenList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamOAuthTokenList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamOAuthTokenList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamOAuthTokenList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamOAuthTokenList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamOAuthTokenList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamOAuthTokenList
     */
    tags?: string
}

export interface IamApiGetIamPermissionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamPermissionByMoid
     */
    moid: string
}

export interface IamApiGetIamPermissionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamPermissionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamPermissionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamPermissionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamPermissionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamPermissionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamPermissionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamPermissionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamPermissionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamPermissionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamPermissionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamPermissionList
     */
    tags?: string
}

export interface IamApiGetIamPrivateKeySpecByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamPrivateKeySpecByMoid
     */
    moid: string
}

export interface IamApiGetIamPrivateKeySpecListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamPrivateKeySpecList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamPrivateKeySpecList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamPrivateKeySpecList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamPrivateKeySpecList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamPrivateKeySpecList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamPrivateKeySpecList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamPrivateKeySpecList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamPrivateKeySpecList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamPrivateKeySpecList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamPrivateKeySpecList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamPrivateKeySpecList
     */
    tags?: string
}

export interface IamApiGetIamPrivilegeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamPrivilegeByMoid
     */
    moid: string
}

export interface IamApiGetIamPrivilegeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamPrivilegeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamPrivilegeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamPrivilegeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamPrivilegeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamPrivilegeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamPrivilegeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamPrivilegeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamPrivilegeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamPrivilegeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamPrivilegeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamPrivilegeList
     */
    tags?: string
}

export interface IamApiGetIamPrivilegeSetByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamPrivilegeSetByMoid
     */
    moid: string
}

export interface IamApiGetIamPrivilegeSetListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamPrivilegeSetList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamPrivilegeSetList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamPrivilegeSetList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamPrivilegeSetList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamPrivilegeSetList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamPrivilegeSetList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamPrivilegeSetList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamPrivilegeSetList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamPrivilegeSetList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamPrivilegeSetList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamPrivilegeSetList
     */
    tags?: string
}

export interface IamApiGetIamQualifierByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamQualifierByMoid
     */
    moid: string
}

export interface IamApiGetIamQualifierListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamQualifierList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamQualifierList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamQualifierList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamQualifierList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamQualifierList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamQualifierList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamQualifierList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamQualifierList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamQualifierList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamQualifierList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamQualifierList
     */
    tags?: string
}

export interface IamApiGetIamResourceLimitsByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamResourceLimitsByMoid
     */
    moid: string
}

export interface IamApiGetIamResourceLimitsListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamResourceLimitsList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamResourceLimitsList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamResourceLimitsList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamResourceLimitsList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamResourceLimitsList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamResourceLimitsList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamResourceLimitsList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamResourceLimitsList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamResourceLimitsList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamResourceLimitsList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamResourceLimitsList
     */
    tags?: string
}

export interface IamApiGetIamResourcePermissionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamResourcePermissionByMoid
     */
    moid: string
}

export interface IamApiGetIamResourcePermissionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamResourcePermissionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamResourcePermissionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamResourcePermissionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamResourcePermissionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamResourcePermissionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamResourcePermissionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamResourcePermissionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamResourcePermissionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamResourcePermissionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamResourcePermissionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamResourcePermissionList
     */
    tags?: string
}

export interface IamApiGetIamResourceRolesByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamResourceRolesByMoid
     */
    moid: string
}

export interface IamApiGetIamResourceRolesListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamResourceRolesList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamResourceRolesList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamResourceRolesList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamResourceRolesList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamResourceRolesList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamResourceRolesList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamResourceRolesList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamResourceRolesList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamResourceRolesList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamResourceRolesList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamResourceRolesList
     */
    tags?: string
}

export interface IamApiGetIamRoleByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamRoleByMoid
     */
    moid: string
}

export interface IamApiGetIamRoleListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamRoleList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamRoleList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamRoleList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamRoleList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamRoleList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamRoleList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamRoleList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamRoleList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamRoleList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamRoleList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamRoleList
     */
    tags?: string
}

export interface IamApiGetIamSecurityHolderByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamSecurityHolderByMoid
     */
    moid: string
}

export interface IamApiGetIamSecurityHolderListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamSecurityHolderList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamSecurityHolderList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamSecurityHolderList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamSecurityHolderList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamSecurityHolderList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamSecurityHolderList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamSecurityHolderList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamSecurityHolderList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamSecurityHolderList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamSecurityHolderList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamSecurityHolderList
     */
    tags?: string
}

export interface IamApiGetIamServiceProviderByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamServiceProviderByMoid
     */
    moid: string
}

export interface IamApiGetIamServiceProviderListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamServiceProviderList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamServiceProviderList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamServiceProviderList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamServiceProviderList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamServiceProviderList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamServiceProviderList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamServiceProviderList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamServiceProviderList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamServiceProviderList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamServiceProviderList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamServiceProviderList
     */
    tags?: string
}

export interface IamApiGetIamSessionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamSessionByMoid
     */
    moid: string
}

export interface IamApiGetIamSessionLimitsByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamSessionLimitsByMoid
     */
    moid: string
}

export interface IamApiGetIamSessionLimitsListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamSessionLimitsList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamSessionLimitsList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamSessionLimitsList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamSessionLimitsList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamSessionLimitsList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamSessionLimitsList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamSessionLimitsList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamSessionLimitsList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamSessionLimitsList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamSessionLimitsList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamSessionLimitsList
     */
    tags?: string
}

export interface IamApiGetIamSessionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamSessionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamSessionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamSessionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamSessionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamSessionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamSessionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamSessionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamSessionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamSessionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamSessionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamSessionList
     */
    tags?: string
}

export interface IamApiGetIamSystemByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamSystemByMoid
     */
    moid: string
}

export interface IamApiGetIamSystemListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamSystemList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamSystemList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamSystemList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamSystemList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamSystemList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamSystemList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamSystemList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamSystemList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamSystemList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamSystemList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamSystemList
     */
    tags?: string
}

export interface IamApiGetIamTrustPointByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamTrustPointByMoid
     */
    moid: string
}

export interface IamApiGetIamTrustPointListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamTrustPointList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamTrustPointList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamTrustPointList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamTrustPointList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamTrustPointList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamTrustPointList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamTrustPointList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamTrustPointList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamTrustPointList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamTrustPointList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamTrustPointList
     */
    tags?: string
}

export interface IamApiGetIamUserByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamUserByMoid
     */
    moid: string
}

export interface IamApiGetIamUserGroupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamUserGroupByMoid
     */
    moid: string
}

export interface IamApiGetIamUserGroupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamUserGroupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamUserGroupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamUserGroupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamUserGroupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamUserGroupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamUserGroupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamUserGroupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamUserGroupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamUserGroupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamUserGroupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamUserGroupList
     */
    tags?: string
}

export interface IamApiGetIamUserListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamUserList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamUserList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamUserList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamUserList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamUserList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamUserList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamUserList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamUserList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamUserList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamUserList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamUserList
     */
    tags?: string
}

export interface IamApiGetIamUserPreferenceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApigetIamUserPreferenceByMoid
     */
    moid: string
}

export interface IamApiGetIamUserPreferenceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IamApigetIamUserPreferenceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IamApigetIamUserPreferenceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IamApigetIamUserPreferenceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IamApigetIamUserPreferenceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IamApigetIamUserPreferenceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IamApigetIamUserPreferenceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IamApigetIamUserPreferenceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IamApigetIamUserPreferenceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IamApigetIamUserPreferenceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IamApigetIamUserPreferenceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IamApigetIamUserPreferenceList
     */
    tags?: string
}

export interface IamApiPatchIamAccountRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamAccount
     */
    moid: string
    /**
     * The &#39;iam.Account&#39; resource to update.
     * @type IamAccount
     * @memberof IamApipatchIamAccount
     */
    iamAccount: IamAccount
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamAccount
     */
    ifMatch?: string
}

export interface IamApiPatchIamApiKeyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamApiKey
     */
    moid: string
    /**
     * The &#39;iam.ApiKey&#39; resource to update.
     * @type IamApiKey
     * @memberof IamApipatchIamApiKey
     */
    iamApiKey: IamApiKey
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamApiKey
     */
    ifMatch?: string
}

export interface IamApiPatchIamAppRegistrationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamAppRegistration
     */
    moid: string
    /**
     * The &#39;iam.AppRegistration&#39; resource to update.
     * @type IamAppRegistration
     * @memberof IamApipatchIamAppRegistration
     */
    iamAppRegistration: IamAppRegistration
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamAppRegistration
     */
    ifMatch?: string
}

export interface IamApiPatchIamCertificateRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamCertificate
     */
    moid: string
    /**
     * The &#39;iam.Certificate&#39; resource to update.
     * @type IamCertificate
     * @memberof IamApipatchIamCertificate
     */
    iamCertificate: IamCertificate
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamCertificate
     */
    ifMatch?: string
}

export interface IamApiPatchIamCertificateRequestRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamCertificateRequest
     */
    moid: string
    /**
     * The &#39;iam.CertificateRequest&#39; resource to update.
     * @type IamCertificateRequest
     * @memberof IamApipatchIamCertificateRequest
     */
    iamCertificateRequest: IamCertificateRequest
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamCertificateRequest
     */
    ifMatch?: string
}

export interface IamApiPatchIamEndPointUserRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamEndPointUser
     */
    moid: string
    /**
     * The &#39;iam.EndPointUser&#39; resource to update.
     * @type IamEndPointUser
     * @memberof IamApipatchIamEndPointUser
     */
    iamEndPointUser: IamEndPointUser
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamEndPointUser
     */
    ifMatch?: string
}

export interface IamApiPatchIamEndPointUserPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamEndPointUserPolicy
     */
    moid: string
    /**
     * The &#39;iam.EndPointUserPolicy&#39; resource to update.
     * @type IamEndPointUserPolicy
     * @memberof IamApipatchIamEndPointUserPolicy
     */
    iamEndPointUserPolicy: IamEndPointUserPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamEndPointUserPolicy
     */
    ifMatch?: string
}

export interface IamApiPatchIamEndPointUserRoleRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamEndPointUserRole
     */
    moid: string
    /**
     * The &#39;iam.EndPointUserRole&#39; resource to update.
     * @type IamEndPointUserRole
     * @memberof IamApipatchIamEndPointUserRole
     */
    iamEndPointUserRole: IamEndPointUserRole
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamEndPointUserRole
     */
    ifMatch?: string
}

export interface IamApiPatchIamIdpRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamIdp
     */
    moid: string
    /**
     * The &#39;iam.Idp&#39; resource to update.
     * @type IamIdp
     * @memberof IamApipatchIamIdp
     */
    iamIdp: IamIdp
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamIdp
     */
    ifMatch?: string
}

export interface IamApiPatchIamIdpReferenceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamIdpReference
     */
    moid: string
    /**
     * The &#39;iam.IdpReference&#39; resource to update.
     * @type IamIdpReference
     * @memberof IamApipatchIamIdpReference
     */
    iamIdpReference: IamIdpReference
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamIdpReference
     */
    ifMatch?: string
}

export interface IamApiPatchIamLdapGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamLdapGroup
     */
    moid: string
    /**
     * The &#39;iam.LdapGroup&#39; resource to update.
     * @type IamLdapGroup
     * @memberof IamApipatchIamLdapGroup
     */
    iamLdapGroup: IamLdapGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamLdapGroup
     */
    ifMatch?: string
}

export interface IamApiPatchIamLdapPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamLdapPolicy
     */
    moid: string
    /**
     * The &#39;iam.LdapPolicy&#39; resource to update.
     * @type IamLdapPolicy
     * @memberof IamApipatchIamLdapPolicy
     */
    iamLdapPolicy: IamLdapPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamLdapPolicy
     */
    ifMatch?: string
}

export interface IamApiPatchIamLdapProviderRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamLdapProvider
     */
    moid: string
    /**
     * The &#39;iam.LdapProvider&#39; resource to update.
     * @type IamLdapProvider
     * @memberof IamApipatchIamLdapProvider
     */
    iamLdapProvider: IamLdapProvider
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamLdapProvider
     */
    ifMatch?: string
}

export interface IamApiPatchIamLocalUserPasswordRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamLocalUserPassword
     */
    moid: string
    /**
     * The &#39;iam.LocalUserPassword&#39; resource to update.
     * @type IamLocalUserPassword
     * @memberof IamApipatchIamLocalUserPassword
     */
    iamLocalUserPassword: IamLocalUserPassword
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamLocalUserPassword
     */
    ifMatch?: string
}

export interface IamApiPatchIamPermissionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamPermission
     */
    moid: string
    /**
     * The &#39;iam.Permission&#39; resource to update.
     * @type IamPermission
     * @memberof IamApipatchIamPermission
     */
    iamPermission: IamPermission
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamPermission
     */
    ifMatch?: string
}

export interface IamApiPatchIamPrivateKeySpecRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamPrivateKeySpec
     */
    moid: string
    /**
     * The &#39;iam.PrivateKeySpec&#39; resource to update.
     * @type IamPrivateKeySpec
     * @memberof IamApipatchIamPrivateKeySpec
     */
    iamPrivateKeySpec: IamPrivateKeySpec
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamPrivateKeySpec
     */
    ifMatch?: string
}

export interface IamApiPatchIamQualifierRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamQualifier
     */
    moid: string
    /**
     * The &#39;iam.Qualifier&#39; resource to update.
     * @type IamQualifier
     * @memberof IamApipatchIamQualifier
     */
    iamQualifier: IamQualifier
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamQualifier
     */
    ifMatch?: string
}

export interface IamApiPatchIamResourceRolesRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamResourceRoles
     */
    moid: string
    /**
     * The &#39;iam.ResourceRoles&#39; resource to update.
     * @type IamResourceRoles
     * @memberof IamApipatchIamResourceRoles
     */
    iamResourceRoles: IamResourceRoles
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamResourceRoles
     */
    ifMatch?: string
}

export interface IamApiPatchIamSessionLimitsRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamSessionLimits
     */
    moid: string
    /**
     * The &#39;iam.SessionLimits&#39; resource to update.
     * @type IamSessionLimits
     * @memberof IamApipatchIamSessionLimits
     */
    iamSessionLimits: IamSessionLimits
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamSessionLimits
     */
    ifMatch?: string
}

export interface IamApiPatchIamUserRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamUser
     */
    moid: string
    /**
     * The &#39;iam.User&#39; resource to update.
     * @type IamUser
     * @memberof IamApipatchIamUser
     */
    iamUser: IamUser
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamUser
     */
    ifMatch?: string
}

export interface IamApiPatchIamUserGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamUserGroup
     */
    moid: string
    /**
     * The &#39;iam.UserGroup&#39; resource to update.
     * @type IamUserGroup
     * @memberof IamApipatchIamUserGroup
     */
    iamUserGroup: IamUserGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamUserGroup
     */
    ifMatch?: string
}

export interface IamApiPatchIamUserPreferenceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApipatchIamUserPreference
     */
    moid: string
    /**
     * The &#39;iam.UserPreference&#39; resource to update.
     * @type IamUserPreference
     * @memberof IamApipatchIamUserPreference
     */
    iamUserPreference: IamUserPreference
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApipatchIamUserPreference
     */
    ifMatch?: string
}

export interface IamApiUpdateIamAccountRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamAccount
     */
    moid: string
    /**
     * The &#39;iam.Account&#39; resource to update.
     * @type IamAccount
     * @memberof IamApiupdateIamAccount
     */
    iamAccount: IamAccount
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamAccount
     */
    ifMatch?: string
}

export interface IamApiUpdateIamApiKeyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamApiKey
     */
    moid: string
    /**
     * The &#39;iam.ApiKey&#39; resource to update.
     * @type IamApiKey
     * @memberof IamApiupdateIamApiKey
     */
    iamApiKey: IamApiKey
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamApiKey
     */
    ifMatch?: string
}

export interface IamApiUpdateIamAppRegistrationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamAppRegistration
     */
    moid: string
    /**
     * The &#39;iam.AppRegistration&#39; resource to update.
     * @type IamAppRegistration
     * @memberof IamApiupdateIamAppRegistration
     */
    iamAppRegistration: IamAppRegistration
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamAppRegistration
     */
    ifMatch?: string
}

export interface IamApiUpdateIamCertificateRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamCertificate
     */
    moid: string
    /**
     * The &#39;iam.Certificate&#39; resource to update.
     * @type IamCertificate
     * @memberof IamApiupdateIamCertificate
     */
    iamCertificate: IamCertificate
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamCertificate
     */
    ifMatch?: string
}

export interface IamApiUpdateIamCertificateRequestRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamCertificateRequest
     */
    moid: string
    /**
     * The &#39;iam.CertificateRequest&#39; resource to update.
     * @type IamCertificateRequest
     * @memberof IamApiupdateIamCertificateRequest
     */
    iamCertificateRequest: IamCertificateRequest
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamCertificateRequest
     */
    ifMatch?: string
}

export interface IamApiUpdateIamEndPointUserRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamEndPointUser
     */
    moid: string
    /**
     * The &#39;iam.EndPointUser&#39; resource to update.
     * @type IamEndPointUser
     * @memberof IamApiupdateIamEndPointUser
     */
    iamEndPointUser: IamEndPointUser
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamEndPointUser
     */
    ifMatch?: string
}

export interface IamApiUpdateIamEndPointUserPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamEndPointUserPolicy
     */
    moid: string
    /**
     * The &#39;iam.EndPointUserPolicy&#39; resource to update.
     * @type IamEndPointUserPolicy
     * @memberof IamApiupdateIamEndPointUserPolicy
     */
    iamEndPointUserPolicy: IamEndPointUserPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamEndPointUserPolicy
     */
    ifMatch?: string
}

export interface IamApiUpdateIamEndPointUserRoleRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamEndPointUserRole
     */
    moid: string
    /**
     * The &#39;iam.EndPointUserRole&#39; resource to update.
     * @type IamEndPointUserRole
     * @memberof IamApiupdateIamEndPointUserRole
     */
    iamEndPointUserRole: IamEndPointUserRole
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamEndPointUserRole
     */
    ifMatch?: string
}

export interface IamApiUpdateIamIdpRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamIdp
     */
    moid: string
    /**
     * The &#39;iam.Idp&#39; resource to update.
     * @type IamIdp
     * @memberof IamApiupdateIamIdp
     */
    iamIdp: IamIdp
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamIdp
     */
    ifMatch?: string
}

export interface IamApiUpdateIamIdpReferenceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamIdpReference
     */
    moid: string
    /**
     * The &#39;iam.IdpReference&#39; resource to update.
     * @type IamIdpReference
     * @memberof IamApiupdateIamIdpReference
     */
    iamIdpReference: IamIdpReference
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamIdpReference
     */
    ifMatch?: string
}

export interface IamApiUpdateIamLdapGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamLdapGroup
     */
    moid: string
    /**
     * The &#39;iam.LdapGroup&#39; resource to update.
     * @type IamLdapGroup
     * @memberof IamApiupdateIamLdapGroup
     */
    iamLdapGroup: IamLdapGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamLdapGroup
     */
    ifMatch?: string
}

export interface IamApiUpdateIamLdapPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamLdapPolicy
     */
    moid: string
    /**
     * The &#39;iam.LdapPolicy&#39; resource to update.
     * @type IamLdapPolicy
     * @memberof IamApiupdateIamLdapPolicy
     */
    iamLdapPolicy: IamLdapPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamLdapPolicy
     */
    ifMatch?: string
}

export interface IamApiUpdateIamLdapProviderRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamLdapProvider
     */
    moid: string
    /**
     * The &#39;iam.LdapProvider&#39; resource to update.
     * @type IamLdapProvider
     * @memberof IamApiupdateIamLdapProvider
     */
    iamLdapProvider: IamLdapProvider
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamLdapProvider
     */
    ifMatch?: string
}

export interface IamApiUpdateIamLocalUserPasswordRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamLocalUserPassword
     */
    moid: string
    /**
     * The &#39;iam.LocalUserPassword&#39; resource to update.
     * @type IamLocalUserPassword
     * @memberof IamApiupdateIamLocalUserPassword
     */
    iamLocalUserPassword: IamLocalUserPassword
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamLocalUserPassword
     */
    ifMatch?: string
}

export interface IamApiUpdateIamPermissionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamPermission
     */
    moid: string
    /**
     * The &#39;iam.Permission&#39; resource to update.
     * @type IamPermission
     * @memberof IamApiupdateIamPermission
     */
    iamPermission: IamPermission
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamPermission
     */
    ifMatch?: string
}

export interface IamApiUpdateIamPrivateKeySpecRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamPrivateKeySpec
     */
    moid: string
    /**
     * The &#39;iam.PrivateKeySpec&#39; resource to update.
     * @type IamPrivateKeySpec
     * @memberof IamApiupdateIamPrivateKeySpec
     */
    iamPrivateKeySpec: IamPrivateKeySpec
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamPrivateKeySpec
     */
    ifMatch?: string
}

export interface IamApiUpdateIamQualifierRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamQualifier
     */
    moid: string
    /**
     * The &#39;iam.Qualifier&#39; resource to update.
     * @type IamQualifier
     * @memberof IamApiupdateIamQualifier
     */
    iamQualifier: IamQualifier
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamQualifier
     */
    ifMatch?: string
}

export interface IamApiUpdateIamResourceRolesRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamResourceRoles
     */
    moid: string
    /**
     * The &#39;iam.ResourceRoles&#39; resource to update.
     * @type IamResourceRoles
     * @memberof IamApiupdateIamResourceRoles
     */
    iamResourceRoles: IamResourceRoles
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamResourceRoles
     */
    ifMatch?: string
}

export interface IamApiUpdateIamSessionLimitsRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamSessionLimits
     */
    moid: string
    /**
     * The &#39;iam.SessionLimits&#39; resource to update.
     * @type IamSessionLimits
     * @memberof IamApiupdateIamSessionLimits
     */
    iamSessionLimits: IamSessionLimits
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamSessionLimits
     */
    ifMatch?: string
}

export interface IamApiUpdateIamUserRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamUser
     */
    moid: string
    /**
     * The &#39;iam.User&#39; resource to update.
     * @type IamUser
     * @memberof IamApiupdateIamUser
     */
    iamUser: IamUser
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamUser
     */
    ifMatch?: string
}

export interface IamApiUpdateIamUserGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamUserGroup
     */
    moid: string
    /**
     * The &#39;iam.UserGroup&#39; resource to update.
     * @type IamUserGroup
     * @memberof IamApiupdateIamUserGroup
     */
    iamUserGroup: IamUserGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamUserGroup
     */
    ifMatch?: string
}

export interface IamApiUpdateIamUserPreferenceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IamApiupdateIamUserPreference
     */
    moid: string
    /**
     * The &#39;iam.UserPreference&#39; resource to update.
     * @type IamUserPreference
     * @memberof IamApiupdateIamUserPreference
     */
    iamUserPreference: IamUserPreference
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IamApiupdateIamUserPreference
     */
    ifMatch?: string
}


export class ObjectIamApi {
    private api: ObservableIamApi

    public constructor(configuration: Configuration, requestFactory?: IamApiRequestFactory, responseProcessor?: IamApiResponseProcessor) {
        this.api = new ObservableIamApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'iam.Account' resource.
     * @param param the request object
     */
    public createIamAccount(param: IamApiCreateIamAccountRequest, options?: Configuration): Promise<IamAccount> {
        return this.api.createIamAccount(param.iamAccount, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.AccountExperience' resource.
     * @param param the request object
     */
    public createIamAccountExperience(param: IamApiCreateIamAccountExperienceRequest, options?: Configuration): Promise<IamAccountExperience> {
        return this.api.createIamAccountExperience(param.iamAccountExperience, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.ApiKey' resource.
     * @param param the request object
     */
    public createIamApiKey(param: IamApiCreateIamApiKeyRequest, options?: Configuration): Promise<IamApiKey> {
        return this.api.createIamApiKey(param.iamApiKey, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.AppRegistration' resource.
     * @param param the request object
     */
    public createIamAppRegistration(param: IamApiCreateIamAppRegistrationRequest, options?: Configuration): Promise<IamAppRegistration> {
        return this.api.createIamAppRegistration(param.iamAppRegistration, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.Certificate' resource.
     * @param param the request object
     */
    public createIamCertificate(param: IamApiCreateIamCertificateRequest, options?: Configuration): Promise<IamCertificate> {
        return this.api.createIamCertificate(param.iamCertificate, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.CertificateRequest' resource.
     * @param param the request object
     */
    public createIamCertificateRequest(param: IamApiCreateIamCertificateRequestRequest, options?: Configuration): Promise<IamCertificateRequest> {
        return this.api.createIamCertificateRequest(param.iamCertificateRequest, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.EndPointUser' resource.
     * @param param the request object
     */
    public createIamEndPointUser(param: IamApiCreateIamEndPointUserRequest, options?: Configuration): Promise<IamEndPointUser> {
        return this.api.createIamEndPointUser(param.iamEndPointUser, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.EndPointUserPolicy' resource.
     * @param param the request object
     */
    public createIamEndPointUserPolicy(param: IamApiCreateIamEndPointUserPolicyRequest, options?: Configuration): Promise<IamEndPointUserPolicy> {
        return this.api.createIamEndPointUserPolicy(param.iamEndPointUserPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.EndPointUserRole' resource.
     * @param param the request object
     */
    public createIamEndPointUserRole(param: IamApiCreateIamEndPointUserRoleRequest, options?: Configuration): Promise<IamEndPointUserRole> {
        return this.api.createIamEndPointUserRole(param.iamEndPointUserRole, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.Idp' resource.
     * @param param the request object
     */
    public createIamIdp(param: IamApiCreateIamIdpRequest, options?: Configuration): Promise<IamIdp> {
        return this.api.createIamIdp(param.iamIdp, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.LdapGroup' resource.
     * @param param the request object
     */
    public createIamLdapGroup(param: IamApiCreateIamLdapGroupRequest, options?: Configuration): Promise<IamLdapGroup> {
        return this.api.createIamLdapGroup(param.iamLdapGroup, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.LdapPolicy' resource.
     * @param param the request object
     */
    public createIamLdapPolicy(param: IamApiCreateIamLdapPolicyRequest, options?: Configuration): Promise<IamLdapPolicy> {
        return this.api.createIamLdapPolicy(param.iamLdapPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.LdapProvider' resource.
     * @param param the request object
     */
    public createIamLdapProvider(param: IamApiCreateIamLdapProviderRequest, options?: Configuration): Promise<IamLdapProvider> {
        return this.api.createIamLdapProvider(param.iamLdapProvider, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.Permission' resource.
     * @param param the request object
     */
    public createIamPermission(param: IamApiCreateIamPermissionRequest, options?: Configuration): Promise<IamPermission> {
        return this.api.createIamPermission(param.iamPermission, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.PrivateKeySpec' resource.
     * @param param the request object
     */
    public createIamPrivateKeySpec(param: IamApiCreateIamPrivateKeySpecRequest, options?: Configuration): Promise<IamPrivateKeySpec> {
        return this.api.createIamPrivateKeySpec(param.iamPrivateKeySpec, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.Qualifier' resource.
     * @param param the request object
     */
    public createIamQualifier(param: IamApiCreateIamQualifierRequest, options?: Configuration): Promise<IamQualifier> {
        return this.api.createIamQualifier(param.iamQualifier, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.ResourceRoles' resource.
     * @param param the request object
     */
    public createIamResourceRoles(param: IamApiCreateIamResourceRolesRequest, options?: Configuration): Promise<IamResourceRoles> {
        return this.api.createIamResourceRoles(param.iamResourceRoles, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.SessionLimits' resource.
     * @param param the request object
     */
    public createIamSessionLimits(param: IamApiCreateIamSessionLimitsRequest, options?: Configuration): Promise<IamSessionLimits> {
        return this.api.createIamSessionLimits(param.iamSessionLimits, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.TrustPoint' resource.
     * @param param the request object
     */
    public createIamTrustPoint(param: IamApiCreateIamTrustPointRequest, options?: Configuration): Promise<IamTrustPoint> {
        return this.api.createIamTrustPoint(param.iamTrustPoint, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.User' resource.
     * @param param the request object
     */
    public createIamUser(param: IamApiCreateIamUserRequest, options?: Configuration): Promise<IamUser> {
        return this.api.createIamUser(param.iamUser, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'iam.UserGroup' resource.
     * @param param the request object
     */
    public createIamUserGroup(param: IamApiCreateIamUserGroupRequest, options?: Configuration): Promise<IamUserGroup> {
        return this.api.createIamUserGroup(param.iamUserGroup, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.Account' resource.
     * @param param the request object
     */
    public deleteIamAccount(param: IamApiDeleteIamAccountRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamAccount(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.ApiKey' resource.
     * @param param the request object
     */
    public deleteIamApiKey(param: IamApiDeleteIamApiKeyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamApiKey(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.AppRegistration' resource.
     * @param param the request object
     */
    public deleteIamAppRegistration(param: IamApiDeleteIamAppRegistrationRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamAppRegistration(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.Certificate' resource.
     * @param param the request object
     */
    public deleteIamCertificate(param: IamApiDeleteIamCertificateRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamCertificate(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.CertificateRequest' resource.
     * @param param the request object
     */
    public deleteIamCertificateRequest(param: IamApiDeleteIamCertificateRequestRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamCertificateRequest(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.EndPointUser' resource.
     * @param param the request object
     */
    public deleteIamEndPointUser(param: IamApiDeleteIamEndPointUserRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamEndPointUser(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.EndPointUserPolicy' resource.
     * @param param the request object
     */
    public deleteIamEndPointUserPolicy(param: IamApiDeleteIamEndPointUserPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamEndPointUserPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.EndPointUserRole' resource.
     * @param param the request object
     */
    public deleteIamEndPointUserRole(param: IamApiDeleteIamEndPointUserRoleRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamEndPointUserRole(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.Idp' resource.
     * @param param the request object
     */
    public deleteIamIdp(param: IamApiDeleteIamIdpRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamIdp(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.LdapGroup' resource.
     * @param param the request object
     */
    public deleteIamLdapGroup(param: IamApiDeleteIamLdapGroupRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamLdapGroup(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.LdapPolicy' resource.
     * @param param the request object
     */
    public deleteIamLdapPolicy(param: IamApiDeleteIamLdapPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamLdapPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.LdapProvider' resource.
     * @param param the request object
     */
    public deleteIamLdapProvider(param: IamApiDeleteIamLdapProviderRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamLdapProvider(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.OAuthToken' resource.
     * @param param the request object
     */
    public deleteIamOAuthToken(param: IamApiDeleteIamOAuthTokenRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamOAuthToken(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.Permission' resource.
     * @param param the request object
     */
    public deleteIamPermission(param: IamApiDeleteIamPermissionRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamPermission(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.PrivateKeySpec' resource.
     * @param param the request object
     */
    public deleteIamPrivateKeySpec(param: IamApiDeleteIamPrivateKeySpecRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamPrivateKeySpec(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.Qualifier' resource.
     * @param param the request object
     */
    public deleteIamQualifier(param: IamApiDeleteIamQualifierRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamQualifier(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.ResourceRoles' resource.
     * @param param the request object
     */
    public deleteIamResourceRoles(param: IamApiDeleteIamResourceRolesRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamResourceRoles(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.Session' resource.
     * @param param the request object
     */
    public deleteIamSession(param: IamApiDeleteIamSessionRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamSession(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.SessionLimits' resource.
     * @param param the request object
     */
    public deleteIamSessionLimits(param: IamApiDeleteIamSessionLimitsRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamSessionLimits(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.TrustPoint' resource.
     * @param param the request object
     */
    public deleteIamTrustPoint(param: IamApiDeleteIamTrustPointRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamTrustPoint(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.User' resource.
     * @param param the request object
     */
    public deleteIamUser(param: IamApiDeleteIamUserRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamUser(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'iam.UserGroup' resource.
     * @param param the request object
     */
    public deleteIamUserGroup(param: IamApiDeleteIamUserGroupRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIamUserGroup(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Account' resource.
     * @param param the request object
     */
    public getIamAccountByMoid(param: IamApiGetIamAccountByMoidRequest, options?: Configuration): Promise<IamAccount> {
        return this.api.getIamAccountByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.AccountExperience' resource.
     * @param param the request object
     */
    public getIamAccountExperienceByMoid(param: IamApiGetIamAccountExperienceByMoidRequest, options?: Configuration): Promise<IamAccountExperience> {
        return this.api.getIamAccountExperienceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.AccountExperience' resource.
     * @param param the request object
     */
    public getIamAccountExperienceList(param: IamApiGetIamAccountExperienceListRequest, options?: Configuration): Promise<IamAccountExperienceResponse> {
        return this.api.getIamAccountExperienceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Account' resource.
     * @param param the request object
     */
    public getIamAccountList(param: IamApiGetIamAccountListRequest, options?: Configuration): Promise<IamAccountResponse> {
        return this.api.getIamAccountList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ApiKey' resource.
     * @param param the request object
     */
    public getIamApiKeyByMoid(param: IamApiGetIamApiKeyByMoidRequest, options?: Configuration): Promise<IamApiKey> {
        return this.api.getIamApiKeyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ApiKey' resource.
     * @param param the request object
     */
    public getIamApiKeyList(param: IamApiGetIamApiKeyListRequest, options?: Configuration): Promise<IamApiKeyResponse> {
        return this.api.getIamApiKeyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.AppRegistration' resource.
     * @param param the request object
     */
    public getIamAppRegistrationByMoid(param: IamApiGetIamAppRegistrationByMoidRequest, options?: Configuration): Promise<IamAppRegistration> {
        return this.api.getIamAppRegistrationByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.AppRegistration' resource.
     * @param param the request object
     */
    public getIamAppRegistrationList(param: IamApiGetIamAppRegistrationListRequest, options?: Configuration): Promise<IamAppRegistrationResponse> {
        return this.api.getIamAppRegistrationList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Certificate' resource.
     * @param param the request object
     */
    public getIamCertificateByMoid(param: IamApiGetIamCertificateByMoidRequest, options?: Configuration): Promise<IamCertificate> {
        return this.api.getIamCertificateByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Certificate' resource.
     * @param param the request object
     */
    public getIamCertificateList(param: IamApiGetIamCertificateListRequest, options?: Configuration): Promise<IamCertificateResponse> {
        return this.api.getIamCertificateList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.CertificateRequest' resource.
     * @param param the request object
     */
    public getIamCertificateRequestByMoid(param: IamApiGetIamCertificateRequestByMoidRequest, options?: Configuration): Promise<IamCertificateRequest> {
        return this.api.getIamCertificateRequestByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.CertificateRequest' resource.
     * @param param the request object
     */
    public getIamCertificateRequestList(param: IamApiGetIamCertificateRequestListRequest, options?: Configuration): Promise<IamCertificateRequestResponse> {
        return this.api.getIamCertificateRequestList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.DomainGroup' resource.
     * @param param the request object
     */
    public getIamDomainGroupByMoid(param: IamApiGetIamDomainGroupByMoidRequest, options?: Configuration): Promise<IamDomainGroup> {
        return this.api.getIamDomainGroupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.DomainGroup' resource.
     * @param param the request object
     */
    public getIamDomainGroupList(param: IamApiGetIamDomainGroupListRequest, options?: Configuration): Promise<IamDomainGroupResponse> {
        return this.api.getIamDomainGroupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointPrivilege' resource.
     * @param param the request object
     */
    public getIamEndPointPrivilegeByMoid(param: IamApiGetIamEndPointPrivilegeByMoidRequest, options?: Configuration): Promise<IamEndPointPrivilege> {
        return this.api.getIamEndPointPrivilegeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointPrivilege' resource.
     * @param param the request object
     */
    public getIamEndPointPrivilegeList(param: IamApiGetIamEndPointPrivilegeListRequest, options?: Configuration): Promise<IamEndPointPrivilegeResponse> {
        return this.api.getIamEndPointPrivilegeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointRole' resource.
     * @param param the request object
     */
    public getIamEndPointRoleByMoid(param: IamApiGetIamEndPointRoleByMoidRequest, options?: Configuration): Promise<IamEndPointRole> {
        return this.api.getIamEndPointRoleByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointRole' resource.
     * @param param the request object
     */
    public getIamEndPointRoleList(param: IamApiGetIamEndPointRoleListRequest, options?: Configuration): Promise<IamEndPointRoleResponse> {
        return this.api.getIamEndPointRoleList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointUser' resource.
     * @param param the request object
     */
    public getIamEndPointUserByMoid(param: IamApiGetIamEndPointUserByMoidRequest, options?: Configuration): Promise<IamEndPointUser> {
        return this.api.getIamEndPointUserByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointUser' resource.
     * @param param the request object
     */
    public getIamEndPointUserList(param: IamApiGetIamEndPointUserListRequest, options?: Configuration): Promise<IamEndPointUserResponse> {
        return this.api.getIamEndPointUserList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointUserPolicy' resource.
     * @param param the request object
     */
    public getIamEndPointUserPolicyByMoid(param: IamApiGetIamEndPointUserPolicyByMoidRequest, options?: Configuration): Promise<IamEndPointUserPolicy> {
        return this.api.getIamEndPointUserPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointUserPolicy' resource.
     * @param param the request object
     */
    public getIamEndPointUserPolicyList(param: IamApiGetIamEndPointUserPolicyListRequest, options?: Configuration): Promise<IamEndPointUserPolicyResponse> {
        return this.api.getIamEndPointUserPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointUserRole' resource.
     * @param param the request object
     */
    public getIamEndPointUserRoleByMoid(param: IamApiGetIamEndPointUserRoleByMoidRequest, options?: Configuration): Promise<IamEndPointUserRole> {
        return this.api.getIamEndPointUserRoleByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.EndPointUserRole' resource.
     * @param param the request object
     */
    public getIamEndPointUserRoleList(param: IamApiGetIamEndPointUserRoleListRequest, options?: Configuration): Promise<IamEndPointUserRoleResponse> {
        return this.api.getIamEndPointUserRoleList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Idp' resource.
     * @param param the request object
     */
    public getIamIdpByMoid(param: IamApiGetIamIdpByMoidRequest, options?: Configuration): Promise<IamIdp> {
        return this.api.getIamIdpByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Idp' resource.
     * @param param the request object
     */
    public getIamIdpList(param: IamApiGetIamIdpListRequest, options?: Configuration): Promise<IamIdpResponse> {
        return this.api.getIamIdpList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.IdpReference' resource.
     * @param param the request object
     */
    public getIamIdpReferenceByMoid(param: IamApiGetIamIdpReferenceByMoidRequest, options?: Configuration): Promise<IamIdpReference> {
        return this.api.getIamIdpReferenceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.IdpReference' resource.
     * @param param the request object
     */
    public getIamIdpReferenceList(param: IamApiGetIamIdpReferenceListRequest, options?: Configuration): Promise<IamIdpReferenceResponse> {
        return this.api.getIamIdpReferenceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.LdapGroup' resource.
     * @param param the request object
     */
    public getIamLdapGroupByMoid(param: IamApiGetIamLdapGroupByMoidRequest, options?: Configuration): Promise<IamLdapGroup> {
        return this.api.getIamLdapGroupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.LdapGroup' resource.
     * @param param the request object
     */
    public getIamLdapGroupList(param: IamApiGetIamLdapGroupListRequest, options?: Configuration): Promise<IamLdapGroupResponse> {
        return this.api.getIamLdapGroupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.LdapPolicy' resource.
     * @param param the request object
     */
    public getIamLdapPolicyByMoid(param: IamApiGetIamLdapPolicyByMoidRequest, options?: Configuration): Promise<IamLdapPolicy> {
        return this.api.getIamLdapPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.LdapPolicy' resource.
     * @param param the request object
     */
    public getIamLdapPolicyList(param: IamApiGetIamLdapPolicyListRequest, options?: Configuration): Promise<IamLdapPolicyResponse> {
        return this.api.getIamLdapPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.LdapProvider' resource.
     * @param param the request object
     */
    public getIamLdapProviderByMoid(param: IamApiGetIamLdapProviderByMoidRequest, options?: Configuration): Promise<IamLdapProvider> {
        return this.api.getIamLdapProviderByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.LdapProvider' resource.
     * @param param the request object
     */
    public getIamLdapProviderList(param: IamApiGetIamLdapProviderListRequest, options?: Configuration): Promise<IamLdapProviderResponse> {
        return this.api.getIamLdapProviderList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.OAuthToken' resource.
     * @param param the request object
     */
    public getIamOAuthTokenByMoid(param: IamApiGetIamOAuthTokenByMoidRequest, options?: Configuration): Promise<IamOAuthToken> {
        return this.api.getIamOAuthTokenByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.OAuthToken' resource.
     * @param param the request object
     */
    public getIamOAuthTokenList(param: IamApiGetIamOAuthTokenListRequest, options?: Configuration): Promise<IamOAuthTokenResponse> {
        return this.api.getIamOAuthTokenList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Permission' resource.
     * @param param the request object
     */
    public getIamPermissionByMoid(param: IamApiGetIamPermissionByMoidRequest, options?: Configuration): Promise<IamPermission> {
        return this.api.getIamPermissionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Permission' resource.
     * @param param the request object
     */
    public getIamPermissionList(param: IamApiGetIamPermissionListRequest, options?: Configuration): Promise<IamPermissionResponse> {
        return this.api.getIamPermissionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.PrivateKeySpec' resource.
     * @param param the request object
     */
    public getIamPrivateKeySpecByMoid(param: IamApiGetIamPrivateKeySpecByMoidRequest, options?: Configuration): Promise<IamPrivateKeySpec> {
        return this.api.getIamPrivateKeySpecByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.PrivateKeySpec' resource.
     * @param param the request object
     */
    public getIamPrivateKeySpecList(param: IamApiGetIamPrivateKeySpecListRequest, options?: Configuration): Promise<IamPrivateKeySpecResponse> {
        return this.api.getIamPrivateKeySpecList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Privilege' resource.
     * @param param the request object
     */
    public getIamPrivilegeByMoid(param: IamApiGetIamPrivilegeByMoidRequest, options?: Configuration): Promise<IamPrivilege> {
        return this.api.getIamPrivilegeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Privilege' resource.
     * @param param the request object
     */
    public getIamPrivilegeList(param: IamApiGetIamPrivilegeListRequest, options?: Configuration): Promise<IamPrivilegeResponse> {
        return this.api.getIamPrivilegeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.PrivilegeSet' resource.
     * @param param the request object
     */
    public getIamPrivilegeSetByMoid(param: IamApiGetIamPrivilegeSetByMoidRequest, options?: Configuration): Promise<IamPrivilegeSet> {
        return this.api.getIamPrivilegeSetByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.PrivilegeSet' resource.
     * @param param the request object
     */
    public getIamPrivilegeSetList(param: IamApiGetIamPrivilegeSetListRequest, options?: Configuration): Promise<IamPrivilegeSetResponse> {
        return this.api.getIamPrivilegeSetList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Qualifier' resource.
     * @param param the request object
     */
    public getIamQualifierByMoid(param: IamApiGetIamQualifierByMoidRequest, options?: Configuration): Promise<IamQualifier> {
        return this.api.getIamQualifierByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Qualifier' resource.
     * @param param the request object
     */
    public getIamQualifierList(param: IamApiGetIamQualifierListRequest, options?: Configuration): Promise<IamQualifierResponse> {
        return this.api.getIamQualifierList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ResourceLimits' resource.
     * @param param the request object
     */
    public getIamResourceLimitsByMoid(param: IamApiGetIamResourceLimitsByMoidRequest, options?: Configuration): Promise<IamResourceLimits> {
        return this.api.getIamResourceLimitsByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ResourceLimits' resource.
     * @param param the request object
     */
    public getIamResourceLimitsList(param: IamApiGetIamResourceLimitsListRequest, options?: Configuration): Promise<IamResourceLimitsResponse> {
        return this.api.getIamResourceLimitsList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ResourcePermission' resource.
     * @param param the request object
     */
    public getIamResourcePermissionByMoid(param: IamApiGetIamResourcePermissionByMoidRequest, options?: Configuration): Promise<IamResourcePermission> {
        return this.api.getIamResourcePermissionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ResourcePermission' resource.
     * @param param the request object
     */
    public getIamResourcePermissionList(param: IamApiGetIamResourcePermissionListRequest, options?: Configuration): Promise<IamResourcePermissionResponse> {
        return this.api.getIamResourcePermissionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ResourceRoles' resource.
     * @param param the request object
     */
    public getIamResourceRolesByMoid(param: IamApiGetIamResourceRolesByMoidRequest, options?: Configuration): Promise<IamResourceRoles> {
        return this.api.getIamResourceRolesByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ResourceRoles' resource.
     * @param param the request object
     */
    public getIamResourceRolesList(param: IamApiGetIamResourceRolesListRequest, options?: Configuration): Promise<IamResourceRolesResponse> {
        return this.api.getIamResourceRolesList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Role' resource.
     * @param param the request object
     */
    public getIamRoleByMoid(param: IamApiGetIamRoleByMoidRequest, options?: Configuration): Promise<IamRole> {
        return this.api.getIamRoleByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Role' resource.
     * @param param the request object
     */
    public getIamRoleList(param: IamApiGetIamRoleListRequest, options?: Configuration): Promise<IamRoleResponse> {
        return this.api.getIamRoleList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.SecurityHolder' resource.
     * @param param the request object
     */
    public getIamSecurityHolderByMoid(param: IamApiGetIamSecurityHolderByMoidRequest, options?: Configuration): Promise<IamSecurityHolder> {
        return this.api.getIamSecurityHolderByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.SecurityHolder' resource.
     * @param param the request object
     */
    public getIamSecurityHolderList(param: IamApiGetIamSecurityHolderListRequest, options?: Configuration): Promise<IamSecurityHolderResponse> {
        return this.api.getIamSecurityHolderList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ServiceProvider' resource.
     * @param param the request object
     */
    public getIamServiceProviderByMoid(param: IamApiGetIamServiceProviderByMoidRequest, options?: Configuration): Promise<IamServiceProvider> {
        return this.api.getIamServiceProviderByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.ServiceProvider' resource.
     * @param param the request object
     */
    public getIamServiceProviderList(param: IamApiGetIamServiceProviderListRequest, options?: Configuration): Promise<IamServiceProviderResponse> {
        return this.api.getIamServiceProviderList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Session' resource.
     * @param param the request object
     */
    public getIamSessionByMoid(param: IamApiGetIamSessionByMoidRequest, options?: Configuration): Promise<IamSession> {
        return this.api.getIamSessionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.SessionLimits' resource.
     * @param param the request object
     */
    public getIamSessionLimitsByMoid(param: IamApiGetIamSessionLimitsByMoidRequest, options?: Configuration): Promise<IamSessionLimits> {
        return this.api.getIamSessionLimitsByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.SessionLimits' resource.
     * @param param the request object
     */
    public getIamSessionLimitsList(param: IamApiGetIamSessionLimitsListRequest, options?: Configuration): Promise<IamSessionLimitsResponse> {
        return this.api.getIamSessionLimitsList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.Session' resource.
     * @param param the request object
     */
    public getIamSessionList(param: IamApiGetIamSessionListRequest, options?: Configuration): Promise<IamSessionResponse> {
        return this.api.getIamSessionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.System' resource.
     * @param param the request object
     */
    public getIamSystemByMoid(param: IamApiGetIamSystemByMoidRequest, options?: Configuration): Promise<IamSystem> {
        return this.api.getIamSystemByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.System' resource.
     * @param param the request object
     */
    public getIamSystemList(param: IamApiGetIamSystemListRequest, options?: Configuration): Promise<IamSystemResponse> {
        return this.api.getIamSystemList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.TrustPoint' resource.
     * @param param the request object
     */
    public getIamTrustPointByMoid(param: IamApiGetIamTrustPointByMoidRequest, options?: Configuration): Promise<IamTrustPoint> {
        return this.api.getIamTrustPointByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.TrustPoint' resource.
     * @param param the request object
     */
    public getIamTrustPointList(param: IamApiGetIamTrustPointListRequest, options?: Configuration): Promise<IamTrustPointResponse> {
        return this.api.getIamTrustPointList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.User' resource.
     * @param param the request object
     */
    public getIamUserByMoid(param: IamApiGetIamUserByMoidRequest, options?: Configuration): Promise<IamUser> {
        return this.api.getIamUserByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.UserGroup' resource.
     * @param param the request object
     */
    public getIamUserGroupByMoid(param: IamApiGetIamUserGroupByMoidRequest, options?: Configuration): Promise<IamUserGroup> {
        return this.api.getIamUserGroupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.UserGroup' resource.
     * @param param the request object
     */
    public getIamUserGroupList(param: IamApiGetIamUserGroupListRequest, options?: Configuration): Promise<IamUserGroupResponse> {
        return this.api.getIamUserGroupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.User' resource.
     * @param param the request object
     */
    public getIamUserList(param: IamApiGetIamUserListRequest, options?: Configuration): Promise<IamUserResponse> {
        return this.api.getIamUserList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'iam.UserPreference' resource.
     * @param param the request object
     */
    public getIamUserPreferenceByMoid(param: IamApiGetIamUserPreferenceByMoidRequest, options?: Configuration): Promise<IamUserPreference> {
        return this.api.getIamUserPreferenceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'iam.UserPreference' resource.
     * @param param the request object
     */
    public getIamUserPreferenceList(param: IamApiGetIamUserPreferenceListRequest, options?: Configuration): Promise<IamUserPreferenceResponse> {
        return this.api.getIamUserPreferenceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Account' resource.
     * @param param the request object
     */
    public patchIamAccount(param: IamApiPatchIamAccountRequest, options?: Configuration): Promise<IamAccount> {
        return this.api.patchIamAccount(param.moid, param.iamAccount, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.ApiKey' resource.
     * @param param the request object
     */
    public patchIamApiKey(param: IamApiPatchIamApiKeyRequest, options?: Configuration): Promise<IamApiKey> {
        return this.api.patchIamApiKey(param.moid, param.iamApiKey, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.AppRegistration' resource.
     * @param param the request object
     */
    public patchIamAppRegistration(param: IamApiPatchIamAppRegistrationRequest, options?: Configuration): Promise<IamAppRegistration> {
        return this.api.patchIamAppRegistration(param.moid, param.iamAppRegistration, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Certificate' resource.
     * @param param the request object
     */
    public patchIamCertificate(param: IamApiPatchIamCertificateRequest, options?: Configuration): Promise<IamCertificate> {
        return this.api.patchIamCertificate(param.moid, param.iamCertificate, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.CertificateRequest' resource.
     * @param param the request object
     */
    public patchIamCertificateRequest(param: IamApiPatchIamCertificateRequestRequest, options?: Configuration): Promise<IamCertificateRequest> {
        return this.api.patchIamCertificateRequest(param.moid, param.iamCertificateRequest, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.EndPointUser' resource.
     * @param param the request object
     */
    public patchIamEndPointUser(param: IamApiPatchIamEndPointUserRequest, options?: Configuration): Promise<IamEndPointUser> {
        return this.api.patchIamEndPointUser(param.moid, param.iamEndPointUser, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.EndPointUserPolicy' resource.
     * @param param the request object
     */
    public patchIamEndPointUserPolicy(param: IamApiPatchIamEndPointUserPolicyRequest, options?: Configuration): Promise<IamEndPointUserPolicy> {
        return this.api.patchIamEndPointUserPolicy(param.moid, param.iamEndPointUserPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.EndPointUserRole' resource.
     * @param param the request object
     */
    public patchIamEndPointUserRole(param: IamApiPatchIamEndPointUserRoleRequest, options?: Configuration): Promise<IamEndPointUserRole> {
        return this.api.patchIamEndPointUserRole(param.moid, param.iamEndPointUserRole, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Idp' resource.
     * @param param the request object
     */
    public patchIamIdp(param: IamApiPatchIamIdpRequest, options?: Configuration): Promise<IamIdp> {
        return this.api.patchIamIdp(param.moid, param.iamIdp, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.IdpReference' resource.
     * @param param the request object
     */
    public patchIamIdpReference(param: IamApiPatchIamIdpReferenceRequest, options?: Configuration): Promise<IamIdpReference> {
        return this.api.patchIamIdpReference(param.moid, param.iamIdpReference, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.LdapGroup' resource.
     * @param param the request object
     */
    public patchIamLdapGroup(param: IamApiPatchIamLdapGroupRequest, options?: Configuration): Promise<IamLdapGroup> {
        return this.api.patchIamLdapGroup(param.moid, param.iamLdapGroup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.LdapPolicy' resource.
     * @param param the request object
     */
    public patchIamLdapPolicy(param: IamApiPatchIamLdapPolicyRequest, options?: Configuration): Promise<IamLdapPolicy> {
        return this.api.patchIamLdapPolicy(param.moid, param.iamLdapPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.LdapProvider' resource.
     * @param param the request object
     */
    public patchIamLdapProvider(param: IamApiPatchIamLdapProviderRequest, options?: Configuration): Promise<IamLdapProvider> {
        return this.api.patchIamLdapProvider(param.moid, param.iamLdapProvider, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.LocalUserPassword' resource.
     * @param param the request object
     */
    public patchIamLocalUserPassword(param: IamApiPatchIamLocalUserPasswordRequest, options?: Configuration): Promise<IamLocalUserPassword> {
        return this.api.patchIamLocalUserPassword(param.moid, param.iamLocalUserPassword, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Permission' resource.
     * @param param the request object
     */
    public patchIamPermission(param: IamApiPatchIamPermissionRequest, options?: Configuration): Promise<IamPermission> {
        return this.api.patchIamPermission(param.moid, param.iamPermission, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.PrivateKeySpec' resource.
     * @param param the request object
     */
    public patchIamPrivateKeySpec(param: IamApiPatchIamPrivateKeySpecRequest, options?: Configuration): Promise<IamPrivateKeySpec> {
        return this.api.patchIamPrivateKeySpec(param.moid, param.iamPrivateKeySpec, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Qualifier' resource.
     * @param param the request object
     */
    public patchIamQualifier(param: IamApiPatchIamQualifierRequest, options?: Configuration): Promise<IamQualifier> {
        return this.api.patchIamQualifier(param.moid, param.iamQualifier, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.ResourceRoles' resource.
     * @param param the request object
     */
    public patchIamResourceRoles(param: IamApiPatchIamResourceRolesRequest, options?: Configuration): Promise<IamResourceRoles> {
        return this.api.patchIamResourceRoles(param.moid, param.iamResourceRoles, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.SessionLimits' resource.
     * @param param the request object
     */
    public patchIamSessionLimits(param: IamApiPatchIamSessionLimitsRequest, options?: Configuration): Promise<IamSessionLimits> {
        return this.api.patchIamSessionLimits(param.moid, param.iamSessionLimits, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.User' resource.
     * @param param the request object
     */
    public patchIamUser(param: IamApiPatchIamUserRequest, options?: Configuration): Promise<IamUser> {
        return this.api.patchIamUser(param.moid, param.iamUser, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.UserGroup' resource.
     * @param param the request object
     */
    public patchIamUserGroup(param: IamApiPatchIamUserGroupRequest, options?: Configuration): Promise<IamUserGroup> {
        return this.api.patchIamUserGroup(param.moid, param.iamUserGroup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.UserPreference' resource.
     * @param param the request object
     */
    public patchIamUserPreference(param: IamApiPatchIamUserPreferenceRequest, options?: Configuration): Promise<IamUserPreference> {
        return this.api.patchIamUserPreference(param.moid, param.iamUserPreference, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Account' resource.
     * @param param the request object
     */
    public updateIamAccount(param: IamApiUpdateIamAccountRequest, options?: Configuration): Promise<IamAccount> {
        return this.api.updateIamAccount(param.moid, param.iamAccount, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.ApiKey' resource.
     * @param param the request object
     */
    public updateIamApiKey(param: IamApiUpdateIamApiKeyRequest, options?: Configuration): Promise<IamApiKey> {
        return this.api.updateIamApiKey(param.moid, param.iamApiKey, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.AppRegistration' resource.
     * @param param the request object
     */
    public updateIamAppRegistration(param: IamApiUpdateIamAppRegistrationRequest, options?: Configuration): Promise<IamAppRegistration> {
        return this.api.updateIamAppRegistration(param.moid, param.iamAppRegistration, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Certificate' resource.
     * @param param the request object
     */
    public updateIamCertificate(param: IamApiUpdateIamCertificateRequest, options?: Configuration): Promise<IamCertificate> {
        return this.api.updateIamCertificate(param.moid, param.iamCertificate, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.CertificateRequest' resource.
     * @param param the request object
     */
    public updateIamCertificateRequest(param: IamApiUpdateIamCertificateRequestRequest, options?: Configuration): Promise<IamCertificateRequest> {
        return this.api.updateIamCertificateRequest(param.moid, param.iamCertificateRequest, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.EndPointUser' resource.
     * @param param the request object
     */
    public updateIamEndPointUser(param: IamApiUpdateIamEndPointUserRequest, options?: Configuration): Promise<IamEndPointUser> {
        return this.api.updateIamEndPointUser(param.moid, param.iamEndPointUser, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.EndPointUserPolicy' resource.
     * @param param the request object
     */
    public updateIamEndPointUserPolicy(param: IamApiUpdateIamEndPointUserPolicyRequest, options?: Configuration): Promise<IamEndPointUserPolicy> {
        return this.api.updateIamEndPointUserPolicy(param.moid, param.iamEndPointUserPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.EndPointUserRole' resource.
     * @param param the request object
     */
    public updateIamEndPointUserRole(param: IamApiUpdateIamEndPointUserRoleRequest, options?: Configuration): Promise<IamEndPointUserRole> {
        return this.api.updateIamEndPointUserRole(param.moid, param.iamEndPointUserRole, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Idp' resource.
     * @param param the request object
     */
    public updateIamIdp(param: IamApiUpdateIamIdpRequest, options?: Configuration): Promise<IamIdp> {
        return this.api.updateIamIdp(param.moid, param.iamIdp, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.IdpReference' resource.
     * @param param the request object
     */
    public updateIamIdpReference(param: IamApiUpdateIamIdpReferenceRequest, options?: Configuration): Promise<IamIdpReference> {
        return this.api.updateIamIdpReference(param.moid, param.iamIdpReference, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.LdapGroup' resource.
     * @param param the request object
     */
    public updateIamLdapGroup(param: IamApiUpdateIamLdapGroupRequest, options?: Configuration): Promise<IamLdapGroup> {
        return this.api.updateIamLdapGroup(param.moid, param.iamLdapGroup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.LdapPolicy' resource.
     * @param param the request object
     */
    public updateIamLdapPolicy(param: IamApiUpdateIamLdapPolicyRequest, options?: Configuration): Promise<IamLdapPolicy> {
        return this.api.updateIamLdapPolicy(param.moid, param.iamLdapPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.LdapProvider' resource.
     * @param param the request object
     */
    public updateIamLdapProvider(param: IamApiUpdateIamLdapProviderRequest, options?: Configuration): Promise<IamLdapProvider> {
        return this.api.updateIamLdapProvider(param.moid, param.iamLdapProvider, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.LocalUserPassword' resource.
     * @param param the request object
     */
    public updateIamLocalUserPassword(param: IamApiUpdateIamLocalUserPasswordRequest, options?: Configuration): Promise<IamLocalUserPassword> {
        return this.api.updateIamLocalUserPassword(param.moid, param.iamLocalUserPassword, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Permission' resource.
     * @param param the request object
     */
    public updateIamPermission(param: IamApiUpdateIamPermissionRequest, options?: Configuration): Promise<IamPermission> {
        return this.api.updateIamPermission(param.moid, param.iamPermission, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.PrivateKeySpec' resource.
     * @param param the request object
     */
    public updateIamPrivateKeySpec(param: IamApiUpdateIamPrivateKeySpecRequest, options?: Configuration): Promise<IamPrivateKeySpec> {
        return this.api.updateIamPrivateKeySpec(param.moid, param.iamPrivateKeySpec, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.Qualifier' resource.
     * @param param the request object
     */
    public updateIamQualifier(param: IamApiUpdateIamQualifierRequest, options?: Configuration): Promise<IamQualifier> {
        return this.api.updateIamQualifier(param.moid, param.iamQualifier, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.ResourceRoles' resource.
     * @param param the request object
     */
    public updateIamResourceRoles(param: IamApiUpdateIamResourceRolesRequest, options?: Configuration): Promise<IamResourceRoles> {
        return this.api.updateIamResourceRoles(param.moid, param.iamResourceRoles, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.SessionLimits' resource.
     * @param param the request object
     */
    public updateIamSessionLimits(param: IamApiUpdateIamSessionLimitsRequest, options?: Configuration): Promise<IamSessionLimits> {
        return this.api.updateIamSessionLimits(param.moid, param.iamSessionLimits, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.User' resource.
     * @param param the request object
     */
    public updateIamUser(param: IamApiUpdateIamUserRequest, options?: Configuration): Promise<IamUser> {
        return this.api.updateIamUser(param.moid, param.iamUser, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.UserGroup' resource.
     * @param param the request object
     */
    public updateIamUserGroup(param: IamApiUpdateIamUserGroupRequest, options?: Configuration): Promise<IamUserGroup> {
        return this.api.updateIamUserGroup(param.moid, param.iamUserGroup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'iam.UserPreference' resource.
     * @param param the request object
     */
    public updateIamUserPreference(param: IamApiUpdateIamUserPreferenceRequest, options?: Configuration): Promise<IamUserPreference> {
        return this.api.updateIamUserPreference(param.moid, param.iamUserPreference, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableInventoryApi } from "./ObservableAPI";
import { InventoryApiRequestFactory, InventoryApiResponseProcessor} from "../apis/InventoryApi";

export interface InventoryApiCreateInventoryRequestRequest {
    /**
     * The &#39;inventory.Request&#39; resource to create.
     * @type InventoryRequest
     * @memberof InventoryApicreateInventoryRequest
     */
    inventoryRequest: InventoryRequest
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof InventoryApicreateInventoryRequest
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof InventoryApicreateInventoryRequest
     */
    ifNoneMatch?: string
}

export interface InventoryApiGetInventoryDeviceInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof InventoryApigetInventoryDeviceInfoByMoid
     */
    moid: string
}

export interface InventoryApiGetInventoryDeviceInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof InventoryApigetInventoryDeviceInfoList
     */
    tags?: string
}

export interface InventoryApiGetInventoryDnMoBindingByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof InventoryApigetInventoryDnMoBindingByMoid
     */
    moid: string
}

export interface InventoryApiGetInventoryDnMoBindingListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof InventoryApigetInventoryDnMoBindingList
     */
    tags?: string
}

export interface InventoryApiGetInventoryGenericInventoryByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryByMoid
     */
    moid: string
}

export interface InventoryApiGetInventoryGenericInventoryHolderByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryHolderByMoid
     */
    moid: string
}

export interface InventoryApiGetInventoryGenericInventoryHolderListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryHolderList
     */
    tags?: string
}

export interface InventoryApiGetInventoryGenericInventoryListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof InventoryApigetInventoryGenericInventoryList
     */
    tags?: string
}

export interface InventoryApiPatchInventoryGenericInventoryRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof InventoryApipatchInventoryGenericInventory
     */
    moid: string
    /**
     * The &#39;inventory.GenericInventory&#39; resource to update.
     * @type InventoryGenericInventory
     * @memberof InventoryApipatchInventoryGenericInventory
     */
    inventoryGenericInventory: InventoryGenericInventory
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof InventoryApipatchInventoryGenericInventory
     */
    ifMatch?: string
}

export interface InventoryApiPatchInventoryGenericInventoryHolderRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof InventoryApipatchInventoryGenericInventoryHolder
     */
    moid: string
    /**
     * The &#39;inventory.GenericInventoryHolder&#39; resource to update.
     * @type InventoryGenericInventoryHolder
     * @memberof InventoryApipatchInventoryGenericInventoryHolder
     */
    inventoryGenericInventoryHolder: InventoryGenericInventoryHolder
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof InventoryApipatchInventoryGenericInventoryHolder
     */
    ifMatch?: string
}

export interface InventoryApiUpdateInventoryGenericInventoryRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof InventoryApiupdateInventoryGenericInventory
     */
    moid: string
    /**
     * The &#39;inventory.GenericInventory&#39; resource to update.
     * @type InventoryGenericInventory
     * @memberof InventoryApiupdateInventoryGenericInventory
     */
    inventoryGenericInventory: InventoryGenericInventory
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof InventoryApiupdateInventoryGenericInventory
     */
    ifMatch?: string
}

export interface InventoryApiUpdateInventoryGenericInventoryHolderRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof InventoryApiupdateInventoryGenericInventoryHolder
     */
    moid: string
    /**
     * The &#39;inventory.GenericInventoryHolder&#39; resource to update.
     * @type InventoryGenericInventoryHolder
     * @memberof InventoryApiupdateInventoryGenericInventoryHolder
     */
    inventoryGenericInventoryHolder: InventoryGenericInventoryHolder
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof InventoryApiupdateInventoryGenericInventoryHolder
     */
    ifMatch?: string
}


export class ObjectInventoryApi {
    private api: ObservableInventoryApi

    public constructor(configuration: Configuration, requestFactory?: InventoryApiRequestFactory, responseProcessor?: InventoryApiResponseProcessor) {
        this.api = new ObservableInventoryApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'inventory.Request' resource.
     * @param param the request object
     */
    public createInventoryRequest(param: InventoryApiCreateInventoryRequestRequest, options?: Configuration): Promise<InventoryRequest> {
        return this.api.createInventoryRequest(param.inventoryRequest, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Read a 'inventory.DeviceInfo' resource.
     * @param param the request object
     */
    public getInventoryDeviceInfoByMoid(param: InventoryApiGetInventoryDeviceInfoByMoidRequest, options?: Configuration): Promise<InventoryDeviceInfo> {
        return this.api.getInventoryDeviceInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'inventory.DeviceInfo' resource.
     * @param param the request object
     */
    public getInventoryDeviceInfoList(param: InventoryApiGetInventoryDeviceInfoListRequest, options?: Configuration): Promise<InventoryDeviceInfoResponse> {
        return this.api.getInventoryDeviceInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'inventory.DnMoBinding' resource.
     * @param param the request object
     */
    public getInventoryDnMoBindingByMoid(param: InventoryApiGetInventoryDnMoBindingByMoidRequest, options?: Configuration): Promise<InventoryDnMoBinding> {
        return this.api.getInventoryDnMoBindingByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'inventory.DnMoBinding' resource.
     * @param param the request object
     */
    public getInventoryDnMoBindingList(param: InventoryApiGetInventoryDnMoBindingListRequest, options?: Configuration): Promise<InventoryDnMoBindingResponse> {
        return this.api.getInventoryDnMoBindingList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'inventory.GenericInventory' resource.
     * @param param the request object
     */
    public getInventoryGenericInventoryByMoid(param: InventoryApiGetInventoryGenericInventoryByMoidRequest, options?: Configuration): Promise<InventoryGenericInventory> {
        return this.api.getInventoryGenericInventoryByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'inventory.GenericInventoryHolder' resource.
     * @param param the request object
     */
    public getInventoryGenericInventoryHolderByMoid(param: InventoryApiGetInventoryGenericInventoryHolderByMoidRequest, options?: Configuration): Promise<InventoryGenericInventoryHolder> {
        return this.api.getInventoryGenericInventoryHolderByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'inventory.GenericInventoryHolder' resource.
     * @param param the request object
     */
    public getInventoryGenericInventoryHolderList(param: InventoryApiGetInventoryGenericInventoryHolderListRequest, options?: Configuration): Promise<InventoryGenericInventoryHolderResponse> {
        return this.api.getInventoryGenericInventoryHolderList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'inventory.GenericInventory' resource.
     * @param param the request object
     */
    public getInventoryGenericInventoryList(param: InventoryApiGetInventoryGenericInventoryListRequest, options?: Configuration): Promise<InventoryGenericInventoryResponse> {
        return this.api.getInventoryGenericInventoryList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'inventory.GenericInventory' resource.
     * @param param the request object
     */
    public patchInventoryGenericInventory(param: InventoryApiPatchInventoryGenericInventoryRequest, options?: Configuration): Promise<InventoryGenericInventory> {
        return this.api.patchInventoryGenericInventory(param.moid, param.inventoryGenericInventory, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'inventory.GenericInventoryHolder' resource.
     * @param param the request object
     */
    public patchInventoryGenericInventoryHolder(param: InventoryApiPatchInventoryGenericInventoryHolderRequest, options?: Configuration): Promise<InventoryGenericInventoryHolder> {
        return this.api.patchInventoryGenericInventoryHolder(param.moid, param.inventoryGenericInventoryHolder, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'inventory.GenericInventory' resource.
     * @param param the request object
     */
    public updateInventoryGenericInventory(param: InventoryApiUpdateInventoryGenericInventoryRequest, options?: Configuration): Promise<InventoryGenericInventory> {
        return this.api.updateInventoryGenericInventory(param.moid, param.inventoryGenericInventory, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'inventory.GenericInventoryHolder' resource.
     * @param param the request object
     */
    public updateInventoryGenericInventoryHolder(param: InventoryApiUpdateInventoryGenericInventoryHolderRequest, options?: Configuration): Promise<InventoryGenericInventoryHolder> {
        return this.api.updateInventoryGenericInventoryHolder(param.moid, param.inventoryGenericInventoryHolder, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableIpmioverlanApi } from "./ObservableAPI";
import { IpmioverlanApiRequestFactory, IpmioverlanApiResponseProcessor} from "../apis/IpmioverlanApi";

export interface IpmioverlanApiCreateIpmioverlanPolicyRequest {
    /**
     * The &#39;ipmioverlan.Policy&#39; resource to create.
     * @type IpmioverlanPolicy
     * @memberof IpmioverlanApicreateIpmioverlanPolicy
     */
    ipmioverlanPolicy: IpmioverlanPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IpmioverlanApicreateIpmioverlanPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof IpmioverlanApicreateIpmioverlanPolicy
     */
    ifNoneMatch?: string
}

export interface IpmioverlanApiDeleteIpmioverlanPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IpmioverlanApideleteIpmioverlanPolicy
     */
    moid: string
}

export interface IpmioverlanApiGetIpmioverlanPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IpmioverlanApigetIpmioverlanPolicyByMoid
     */
    moid: string
}

export interface IpmioverlanApiGetIpmioverlanPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof IpmioverlanApigetIpmioverlanPolicyList
     */
    tags?: string
}

export interface IpmioverlanApiPatchIpmioverlanPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IpmioverlanApipatchIpmioverlanPolicy
     */
    moid: string
    /**
     * The &#39;ipmioverlan.Policy&#39; resource to update.
     * @type IpmioverlanPolicy
     * @memberof IpmioverlanApipatchIpmioverlanPolicy
     */
    ipmioverlanPolicy: IpmioverlanPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IpmioverlanApipatchIpmioverlanPolicy
     */
    ifMatch?: string
}

export interface IpmioverlanApiUpdateIpmioverlanPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof IpmioverlanApiupdateIpmioverlanPolicy
     */
    moid: string
    /**
     * The &#39;ipmioverlan.Policy&#39; resource to update.
     * @type IpmioverlanPolicy
     * @memberof IpmioverlanApiupdateIpmioverlanPolicy
     */
    ipmioverlanPolicy: IpmioverlanPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof IpmioverlanApiupdateIpmioverlanPolicy
     */
    ifMatch?: string
}


export class ObjectIpmioverlanApi {
    private api: ObservableIpmioverlanApi

    public constructor(configuration: Configuration, requestFactory?: IpmioverlanApiRequestFactory, responseProcessor?: IpmioverlanApiResponseProcessor) {
        this.api = new ObservableIpmioverlanApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'ipmioverlan.Policy' resource.
     * @param param the request object
     */
    public createIpmioverlanPolicy(param: IpmioverlanApiCreateIpmioverlanPolicyRequest, options?: Configuration): Promise<IpmioverlanPolicy> {
        return this.api.createIpmioverlanPolicy(param.ipmioverlanPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'ipmioverlan.Policy' resource.
     * @param param the request object
     */
    public deleteIpmioverlanPolicy(param: IpmioverlanApiDeleteIpmioverlanPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteIpmioverlanPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ipmioverlan.Policy' resource.
     * @param param the request object
     */
    public getIpmioverlanPolicyByMoid(param: IpmioverlanApiGetIpmioverlanPolicyByMoidRequest, options?: Configuration): Promise<IpmioverlanPolicy> {
        return this.api.getIpmioverlanPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ipmioverlan.Policy' resource.
     * @param param the request object
     */
    public getIpmioverlanPolicyList(param: IpmioverlanApiGetIpmioverlanPolicyListRequest, options?: Configuration): Promise<IpmioverlanPolicyResponse> {
        return this.api.getIpmioverlanPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'ipmioverlan.Policy' resource.
     * @param param the request object
     */
    public patchIpmioverlanPolicy(param: IpmioverlanApiPatchIpmioverlanPolicyRequest, options?: Configuration): Promise<IpmioverlanPolicy> {
        return this.api.patchIpmioverlanPolicy(param.moid, param.ipmioverlanPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'ipmioverlan.Policy' resource.
     * @param param the request object
     */
    public updateIpmioverlanPolicy(param: IpmioverlanApiUpdateIpmioverlanPolicyRequest, options?: Configuration): Promise<IpmioverlanPolicy> {
        return this.api.updateIpmioverlanPolicy(param.moid, param.ipmioverlanPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableKvmApi } from "./ObservableAPI";
import { KvmApiRequestFactory, KvmApiResponseProcessor} from "../apis/KvmApi";

export interface KvmApiCreateKvmPolicyRequest {
    /**
     * The &#39;kvm.Policy&#39; resource to create.
     * @type KvmPolicy
     * @memberof KvmApicreateKvmPolicy
     */
    kvmPolicy: KvmPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof KvmApicreateKvmPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof KvmApicreateKvmPolicy
     */
    ifNoneMatch?: string
}

export interface KvmApiDeleteKvmPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof KvmApideleteKvmPolicy
     */
    moid: string
}

export interface KvmApiGetKvmKvmSessionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof KvmApigetKvmKvmSessionByMoid
     */
    moid: string
}

export interface KvmApiGetKvmKvmSessionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof KvmApigetKvmKvmSessionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof KvmApigetKvmKvmSessionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof KvmApigetKvmKvmSessionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof KvmApigetKvmKvmSessionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof KvmApigetKvmKvmSessionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof KvmApigetKvmKvmSessionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof KvmApigetKvmKvmSessionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof KvmApigetKvmKvmSessionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof KvmApigetKvmKvmSessionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof KvmApigetKvmKvmSessionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof KvmApigetKvmKvmSessionList
     */
    tags?: string
}

export interface KvmApiGetKvmPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof KvmApigetKvmPolicyByMoid
     */
    moid: string
}

export interface KvmApiGetKvmPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof KvmApigetKvmPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof KvmApigetKvmPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof KvmApigetKvmPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof KvmApigetKvmPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof KvmApigetKvmPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof KvmApigetKvmPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof KvmApigetKvmPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof KvmApigetKvmPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof KvmApigetKvmPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof KvmApigetKvmPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof KvmApigetKvmPolicyList
     */
    tags?: string
}

export interface KvmApiPatchKvmPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof KvmApipatchKvmPolicy
     */
    moid: string
    /**
     * The &#39;kvm.Policy&#39; resource to update.
     * @type KvmPolicy
     * @memberof KvmApipatchKvmPolicy
     */
    kvmPolicy: KvmPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof KvmApipatchKvmPolicy
     */
    ifMatch?: string
}

export interface KvmApiUpdateKvmPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof KvmApiupdateKvmPolicy
     */
    moid: string
    /**
     * The &#39;kvm.Policy&#39; resource to update.
     * @type KvmPolicy
     * @memberof KvmApiupdateKvmPolicy
     */
    kvmPolicy: KvmPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof KvmApiupdateKvmPolicy
     */
    ifMatch?: string
}


export class ObjectKvmApi {
    private api: ObservableKvmApi

    public constructor(configuration: Configuration, requestFactory?: KvmApiRequestFactory, responseProcessor?: KvmApiResponseProcessor) {
        this.api = new ObservableKvmApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'kvm.Policy' resource.
     * @param param the request object
     */
    public createKvmPolicy(param: KvmApiCreateKvmPolicyRequest, options?: Configuration): Promise<KvmPolicy> {
        return this.api.createKvmPolicy(param.kvmPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'kvm.Policy' resource.
     * @param param the request object
     */
    public deleteKvmPolicy(param: KvmApiDeleteKvmPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteKvmPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'kvm.KvmSession' resource.
     * @param param the request object
     */
    public getKvmKvmSessionByMoid(param: KvmApiGetKvmKvmSessionByMoidRequest, options?: Configuration): Promise<KvmKvmSession> {
        return this.api.getKvmKvmSessionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'kvm.KvmSession' resource.
     * @param param the request object
     */
    public getKvmKvmSessionList(param: KvmApiGetKvmKvmSessionListRequest, options?: Configuration): Promise<KvmKvmSessionResponse> {
        return this.api.getKvmKvmSessionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'kvm.Policy' resource.
     * @param param the request object
     */
    public getKvmPolicyByMoid(param: KvmApiGetKvmPolicyByMoidRequest, options?: Configuration): Promise<KvmPolicy> {
        return this.api.getKvmPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'kvm.Policy' resource.
     * @param param the request object
     */
    public getKvmPolicyList(param: KvmApiGetKvmPolicyListRequest, options?: Configuration): Promise<KvmPolicyResponse> {
        return this.api.getKvmPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'kvm.Policy' resource.
     * @param param the request object
     */
    public patchKvmPolicy(param: KvmApiPatchKvmPolicyRequest, options?: Configuration): Promise<KvmPolicy> {
        return this.api.patchKvmPolicy(param.moid, param.kvmPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'kvm.Policy' resource.
     * @param param the request object
     */
    public updateKvmPolicy(param: KvmApiUpdateKvmPolicyRequest, options?: Configuration): Promise<KvmPolicy> {
        return this.api.updateKvmPolicy(param.moid, param.kvmPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableLicenseApi } from "./ObservableAPI";
import { LicenseApiRequestFactory, LicenseApiResponseProcessor} from "../apis/LicenseApi";

export interface LicenseApiCreateLicenseLicenseInfoRequest {
    /**
     * The &#39;license.LicenseInfo&#39; resource to create.
     * @type LicenseLicenseInfo
     * @memberof LicenseApicreateLicenseLicenseInfo
     */
    licenseLicenseInfo: LicenseLicenseInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LicenseApicreateLicenseLicenseInfo
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof LicenseApicreateLicenseLicenseInfo
     */
    ifNoneMatch?: string
}

export interface LicenseApiGetLicenseAccountLicenseDataByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApigetLicenseAccountLicenseDataByMoid
     */
    moid: string
}

export interface LicenseApiGetLicenseAccountLicenseDataListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof LicenseApigetLicenseAccountLicenseDataList
     */
    tags?: string
}

export interface LicenseApiGetLicenseCustomerOpByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApigetLicenseCustomerOpByMoid
     */
    moid: string
}

export interface LicenseApiGetLicenseCustomerOpListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof LicenseApigetLicenseCustomerOpList
     */
    tags?: string
}

export interface LicenseApiGetLicenseLicenseInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApigetLicenseLicenseInfoByMoid
     */
    moid: string
}

export interface LicenseApiGetLicenseLicenseInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof LicenseApigetLicenseLicenseInfoList
     */
    tags?: string
}

export interface LicenseApiGetLicenseSmartlicenseTokenByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApigetLicenseSmartlicenseTokenByMoid
     */
    moid: string
}

export interface LicenseApiGetLicenseSmartlicenseTokenListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof LicenseApigetLicenseSmartlicenseTokenList
     */
    tags?: string
}

export interface LicenseApiPatchLicenseAccountLicenseDataRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApipatchLicenseAccountLicenseData
     */
    moid: string
    /**
     * The &#39;license.AccountLicenseData&#39; resource to update.
     * @type LicenseAccountLicenseData
     * @memberof LicenseApipatchLicenseAccountLicenseData
     */
    licenseAccountLicenseData: LicenseAccountLicenseData
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LicenseApipatchLicenseAccountLicenseData
     */
    ifMatch?: string
}

export interface LicenseApiPatchLicenseCustomerOpRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApipatchLicenseCustomerOp
     */
    moid: string
    /**
     * The &#39;license.CustomerOp&#39; resource to update.
     * @type LicenseCustomerOp
     * @memberof LicenseApipatchLicenseCustomerOp
     */
    licenseCustomerOp: LicenseCustomerOp
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LicenseApipatchLicenseCustomerOp
     */
    ifMatch?: string
}

export interface LicenseApiPatchLicenseLicenseInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApipatchLicenseLicenseInfo
     */
    moid: string
    /**
     * The &#39;license.LicenseInfo&#39; resource to update.
     * @type LicenseLicenseInfo
     * @memberof LicenseApipatchLicenseLicenseInfo
     */
    licenseLicenseInfo: LicenseLicenseInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LicenseApipatchLicenseLicenseInfo
     */
    ifMatch?: string
}

export interface LicenseApiPatchLicenseSmartlicenseTokenRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApipatchLicenseSmartlicenseToken
     */
    moid: string
    /**
     * The &#39;license.SmartlicenseToken&#39; resource to update.
     * @type LicenseSmartlicenseToken
     * @memberof LicenseApipatchLicenseSmartlicenseToken
     */
    licenseSmartlicenseToken: LicenseSmartlicenseToken
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LicenseApipatchLicenseSmartlicenseToken
     */
    ifMatch?: string
}

export interface LicenseApiUpdateLicenseAccountLicenseDataRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApiupdateLicenseAccountLicenseData
     */
    moid: string
    /**
     * The &#39;license.AccountLicenseData&#39; resource to update.
     * @type LicenseAccountLicenseData
     * @memberof LicenseApiupdateLicenseAccountLicenseData
     */
    licenseAccountLicenseData: LicenseAccountLicenseData
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LicenseApiupdateLicenseAccountLicenseData
     */
    ifMatch?: string
}

export interface LicenseApiUpdateLicenseCustomerOpRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApiupdateLicenseCustomerOp
     */
    moid: string
    /**
     * The &#39;license.CustomerOp&#39; resource to update.
     * @type LicenseCustomerOp
     * @memberof LicenseApiupdateLicenseCustomerOp
     */
    licenseCustomerOp: LicenseCustomerOp
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LicenseApiupdateLicenseCustomerOp
     */
    ifMatch?: string
}

export interface LicenseApiUpdateLicenseLicenseInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApiupdateLicenseLicenseInfo
     */
    moid: string
    /**
     * The &#39;license.LicenseInfo&#39; resource to update.
     * @type LicenseLicenseInfo
     * @memberof LicenseApiupdateLicenseLicenseInfo
     */
    licenseLicenseInfo: LicenseLicenseInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LicenseApiupdateLicenseLicenseInfo
     */
    ifMatch?: string
}

export interface LicenseApiUpdateLicenseSmartlicenseTokenRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LicenseApiupdateLicenseSmartlicenseToken
     */
    moid: string
    /**
     * The &#39;license.SmartlicenseToken&#39; resource to update.
     * @type LicenseSmartlicenseToken
     * @memberof LicenseApiupdateLicenseSmartlicenseToken
     */
    licenseSmartlicenseToken: LicenseSmartlicenseToken
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LicenseApiupdateLicenseSmartlicenseToken
     */
    ifMatch?: string
}


export class ObjectLicenseApi {
    private api: ObservableLicenseApi

    public constructor(configuration: Configuration, requestFactory?: LicenseApiRequestFactory, responseProcessor?: LicenseApiResponseProcessor) {
        this.api = new ObservableLicenseApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'license.LicenseInfo' resource.
     * @param param the request object
     */
    public createLicenseLicenseInfo(param: LicenseApiCreateLicenseLicenseInfoRequest, options?: Configuration): Promise<LicenseLicenseInfo> {
        return this.api.createLicenseLicenseInfo(param.licenseLicenseInfo, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Read a 'license.AccountLicenseData' resource.
     * @param param the request object
     */
    public getLicenseAccountLicenseDataByMoid(param: LicenseApiGetLicenseAccountLicenseDataByMoidRequest, options?: Configuration): Promise<LicenseAccountLicenseData> {
        return this.api.getLicenseAccountLicenseDataByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'license.AccountLicenseData' resource.
     * @param param the request object
     */
    public getLicenseAccountLicenseDataList(param: LicenseApiGetLicenseAccountLicenseDataListRequest, options?: Configuration): Promise<LicenseAccountLicenseDataResponse> {
        return this.api.getLicenseAccountLicenseDataList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'license.CustomerOp' resource.
     * @param param the request object
     */
    public getLicenseCustomerOpByMoid(param: LicenseApiGetLicenseCustomerOpByMoidRequest, options?: Configuration): Promise<LicenseCustomerOp> {
        return this.api.getLicenseCustomerOpByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'license.CustomerOp' resource.
     * @param param the request object
     */
    public getLicenseCustomerOpList(param: LicenseApiGetLicenseCustomerOpListRequest, options?: Configuration): Promise<LicenseCustomerOpResponse> {
        return this.api.getLicenseCustomerOpList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'license.LicenseInfo' resource.
     * @param param the request object
     */
    public getLicenseLicenseInfoByMoid(param: LicenseApiGetLicenseLicenseInfoByMoidRequest, options?: Configuration): Promise<LicenseLicenseInfo> {
        return this.api.getLicenseLicenseInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'license.LicenseInfo' resource.
     * @param param the request object
     */
    public getLicenseLicenseInfoList(param: LicenseApiGetLicenseLicenseInfoListRequest, options?: Configuration): Promise<LicenseLicenseInfoResponse> {
        return this.api.getLicenseLicenseInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'license.SmartlicenseToken' resource.
     * @param param the request object
     */
    public getLicenseSmartlicenseTokenByMoid(param: LicenseApiGetLicenseSmartlicenseTokenByMoidRequest, options?: Configuration): Promise<LicenseSmartlicenseToken> {
        return this.api.getLicenseSmartlicenseTokenByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'license.SmartlicenseToken' resource.
     * @param param the request object
     */
    public getLicenseSmartlicenseTokenList(param: LicenseApiGetLicenseSmartlicenseTokenListRequest, options?: Configuration): Promise<LicenseSmartlicenseTokenResponse> {
        return this.api.getLicenseSmartlicenseTokenList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'license.AccountLicenseData' resource.
     * @param param the request object
     */
    public patchLicenseAccountLicenseData(param: LicenseApiPatchLicenseAccountLicenseDataRequest, options?: Configuration): Promise<LicenseAccountLicenseData> {
        return this.api.patchLicenseAccountLicenseData(param.moid, param.licenseAccountLicenseData, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'license.CustomerOp' resource.
     * @param param the request object
     */
    public patchLicenseCustomerOp(param: LicenseApiPatchLicenseCustomerOpRequest, options?: Configuration): Promise<LicenseCustomerOp> {
        return this.api.patchLicenseCustomerOp(param.moid, param.licenseCustomerOp, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'license.LicenseInfo' resource.
     * @param param the request object
     */
    public patchLicenseLicenseInfo(param: LicenseApiPatchLicenseLicenseInfoRequest, options?: Configuration): Promise<LicenseLicenseInfo> {
        return this.api.patchLicenseLicenseInfo(param.moid, param.licenseLicenseInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'license.SmartlicenseToken' resource.
     * @param param the request object
     */
    public patchLicenseSmartlicenseToken(param: LicenseApiPatchLicenseSmartlicenseTokenRequest, options?: Configuration): Promise<LicenseSmartlicenseToken> {
        return this.api.patchLicenseSmartlicenseToken(param.moid, param.licenseSmartlicenseToken, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'license.AccountLicenseData' resource.
     * @param param the request object
     */
    public updateLicenseAccountLicenseData(param: LicenseApiUpdateLicenseAccountLicenseDataRequest, options?: Configuration): Promise<LicenseAccountLicenseData> {
        return this.api.updateLicenseAccountLicenseData(param.moid, param.licenseAccountLicenseData, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'license.CustomerOp' resource.
     * @param param the request object
     */
    public updateLicenseCustomerOp(param: LicenseApiUpdateLicenseCustomerOpRequest, options?: Configuration): Promise<LicenseCustomerOp> {
        return this.api.updateLicenseCustomerOp(param.moid, param.licenseCustomerOp, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'license.LicenseInfo' resource.
     * @param param the request object
     */
    public updateLicenseLicenseInfo(param: LicenseApiUpdateLicenseLicenseInfoRequest, options?: Configuration): Promise<LicenseLicenseInfo> {
        return this.api.updateLicenseLicenseInfo(param.moid, param.licenseLicenseInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'license.SmartlicenseToken' resource.
     * @param param the request object
     */
    public updateLicenseSmartlicenseToken(param: LicenseApiUpdateLicenseSmartlicenseTokenRequest, options?: Configuration): Promise<LicenseSmartlicenseToken> {
        return this.api.updateLicenseSmartlicenseToken(param.moid, param.licenseSmartlicenseToken, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableLsApi } from "./ObservableAPI";
import { LsApiRequestFactory, LsApiResponseProcessor} from "../apis/LsApi";

export interface LsApiGetLsServiceProfileByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LsApigetLsServiceProfileByMoid
     */
    moid: string
}

export interface LsApiGetLsServiceProfileListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof LsApigetLsServiceProfileList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof LsApigetLsServiceProfileList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof LsApigetLsServiceProfileList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof LsApigetLsServiceProfileList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof LsApigetLsServiceProfileList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof LsApigetLsServiceProfileList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof LsApigetLsServiceProfileList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof LsApigetLsServiceProfileList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof LsApigetLsServiceProfileList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof LsApigetLsServiceProfileList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof LsApigetLsServiceProfileList
     */
    tags?: string
}

export interface LsApiPatchLsServiceProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LsApipatchLsServiceProfile
     */
    moid: string
    /**
     * The &#39;ls.ServiceProfile&#39; resource to update.
     * @type LsServiceProfile
     * @memberof LsApipatchLsServiceProfile
     */
    lsServiceProfile: LsServiceProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LsApipatchLsServiceProfile
     */
    ifMatch?: string
}

export interface LsApiUpdateLsServiceProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof LsApiupdateLsServiceProfile
     */
    moid: string
    /**
     * The &#39;ls.ServiceProfile&#39; resource to update.
     * @type LsServiceProfile
     * @memberof LsApiupdateLsServiceProfile
     */
    lsServiceProfile: LsServiceProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof LsApiupdateLsServiceProfile
     */
    ifMatch?: string
}


export class ObjectLsApi {
    private api: ObservableLsApi

    public constructor(configuration: Configuration, requestFactory?: LsApiRequestFactory, responseProcessor?: LsApiResponseProcessor) {
        this.api = new ObservableLsApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'ls.ServiceProfile' resource.
     * @param param the request object
     */
    public getLsServiceProfileByMoid(param: LsApiGetLsServiceProfileByMoidRequest, options?: Configuration): Promise<LsServiceProfile> {
        return this.api.getLsServiceProfileByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ls.ServiceProfile' resource.
     * @param param the request object
     */
    public getLsServiceProfileList(param: LsApiGetLsServiceProfileListRequest, options?: Configuration): Promise<LsServiceProfileResponse> {
        return this.api.getLsServiceProfileList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'ls.ServiceProfile' resource.
     * @param param the request object
     */
    public patchLsServiceProfile(param: LsApiPatchLsServiceProfileRequest, options?: Configuration): Promise<LsServiceProfile> {
        return this.api.patchLsServiceProfile(param.moid, param.lsServiceProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'ls.ServiceProfile' resource.
     * @param param the request object
     */
    public updateLsServiceProfile(param: LsApiUpdateLsServiceProfileRequest, options?: Configuration): Promise<LsServiceProfile> {
        return this.api.updateLsServiceProfile(param.moid, param.lsServiceProfile, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableManagementApi } from "./ObservableAPI";
import { ManagementApiRequestFactory, ManagementApiResponseProcessor} from "../apis/ManagementApi";

export interface ManagementApiGetManagementControllerByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ManagementApigetManagementControllerByMoid
     */
    moid: string
}

export interface ManagementApiGetManagementControllerListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ManagementApigetManagementControllerList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ManagementApigetManagementControllerList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ManagementApigetManagementControllerList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ManagementApigetManagementControllerList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ManagementApigetManagementControllerList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ManagementApigetManagementControllerList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ManagementApigetManagementControllerList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ManagementApigetManagementControllerList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ManagementApigetManagementControllerList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ManagementApigetManagementControllerList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ManagementApigetManagementControllerList
     */
    tags?: string
}

export interface ManagementApiGetManagementEntityByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ManagementApigetManagementEntityByMoid
     */
    moid: string
}

export interface ManagementApiGetManagementEntityListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ManagementApigetManagementEntityList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ManagementApigetManagementEntityList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ManagementApigetManagementEntityList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ManagementApigetManagementEntityList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ManagementApigetManagementEntityList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ManagementApigetManagementEntityList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ManagementApigetManagementEntityList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ManagementApigetManagementEntityList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ManagementApigetManagementEntityList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ManagementApigetManagementEntityList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ManagementApigetManagementEntityList
     */
    tags?: string
}

export interface ManagementApiGetManagementInterfaceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ManagementApigetManagementInterfaceByMoid
     */
    moid: string
}

export interface ManagementApiGetManagementInterfaceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ManagementApigetManagementInterfaceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ManagementApigetManagementInterfaceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ManagementApigetManagementInterfaceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ManagementApigetManagementInterfaceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ManagementApigetManagementInterfaceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ManagementApigetManagementInterfaceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ManagementApigetManagementInterfaceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ManagementApigetManagementInterfaceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ManagementApigetManagementInterfaceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ManagementApigetManagementInterfaceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ManagementApigetManagementInterfaceList
     */
    tags?: string
}

export interface ManagementApiPatchManagementControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ManagementApipatchManagementController
     */
    moid: string
    /**
     * The &#39;management.Controller&#39; resource to update.
     * @type ManagementController
     * @memberof ManagementApipatchManagementController
     */
    managementController: ManagementController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ManagementApipatchManagementController
     */
    ifMatch?: string
}

export interface ManagementApiPatchManagementEntityRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ManagementApipatchManagementEntity
     */
    moid: string
    /**
     * The &#39;management.Entity&#39; resource to update.
     * @type ManagementEntity
     * @memberof ManagementApipatchManagementEntity
     */
    managementEntity: ManagementEntity
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ManagementApipatchManagementEntity
     */
    ifMatch?: string
}

export interface ManagementApiPatchManagementInterfaceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ManagementApipatchManagementInterface
     */
    moid: string
    /**
     * The &#39;management.Interface&#39; resource to update.
     * @type ManagementInterface
     * @memberof ManagementApipatchManagementInterface
     */
    managementInterface: ManagementInterface
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ManagementApipatchManagementInterface
     */
    ifMatch?: string
}

export interface ManagementApiUpdateManagementControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ManagementApiupdateManagementController
     */
    moid: string
    /**
     * The &#39;management.Controller&#39; resource to update.
     * @type ManagementController
     * @memberof ManagementApiupdateManagementController
     */
    managementController: ManagementController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ManagementApiupdateManagementController
     */
    ifMatch?: string
}

export interface ManagementApiUpdateManagementEntityRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ManagementApiupdateManagementEntity
     */
    moid: string
    /**
     * The &#39;management.Entity&#39; resource to update.
     * @type ManagementEntity
     * @memberof ManagementApiupdateManagementEntity
     */
    managementEntity: ManagementEntity
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ManagementApiupdateManagementEntity
     */
    ifMatch?: string
}

export interface ManagementApiUpdateManagementInterfaceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ManagementApiupdateManagementInterface
     */
    moid: string
    /**
     * The &#39;management.Interface&#39; resource to update.
     * @type ManagementInterface
     * @memberof ManagementApiupdateManagementInterface
     */
    managementInterface: ManagementInterface
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ManagementApiupdateManagementInterface
     */
    ifMatch?: string
}


export class ObjectManagementApi {
    private api: ObservableManagementApi

    public constructor(configuration: Configuration, requestFactory?: ManagementApiRequestFactory, responseProcessor?: ManagementApiResponseProcessor) {
        this.api = new ObservableManagementApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'management.Controller' resource.
     * @param param the request object
     */
    public getManagementControllerByMoid(param: ManagementApiGetManagementControllerByMoidRequest, options?: Configuration): Promise<ManagementController> {
        return this.api.getManagementControllerByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'management.Controller' resource.
     * @param param the request object
     */
    public getManagementControllerList(param: ManagementApiGetManagementControllerListRequest, options?: Configuration): Promise<ManagementControllerResponse> {
        return this.api.getManagementControllerList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'management.Entity' resource.
     * @param param the request object
     */
    public getManagementEntityByMoid(param: ManagementApiGetManagementEntityByMoidRequest, options?: Configuration): Promise<ManagementEntity> {
        return this.api.getManagementEntityByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'management.Entity' resource.
     * @param param the request object
     */
    public getManagementEntityList(param: ManagementApiGetManagementEntityListRequest, options?: Configuration): Promise<ManagementEntityResponse> {
        return this.api.getManagementEntityList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'management.Interface' resource.
     * @param param the request object
     */
    public getManagementInterfaceByMoid(param: ManagementApiGetManagementInterfaceByMoidRequest, options?: Configuration): Promise<ManagementInterface> {
        return this.api.getManagementInterfaceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'management.Interface' resource.
     * @param param the request object
     */
    public getManagementInterfaceList(param: ManagementApiGetManagementInterfaceListRequest, options?: Configuration): Promise<ManagementInterfaceResponse> {
        return this.api.getManagementInterfaceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'management.Controller' resource.
     * @param param the request object
     */
    public patchManagementController(param: ManagementApiPatchManagementControllerRequest, options?: Configuration): Promise<ManagementController> {
        return this.api.patchManagementController(param.moid, param.managementController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'management.Entity' resource.
     * @param param the request object
     */
    public patchManagementEntity(param: ManagementApiPatchManagementEntityRequest, options?: Configuration): Promise<ManagementEntity> {
        return this.api.patchManagementEntity(param.moid, param.managementEntity, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'management.Interface' resource.
     * @param param the request object
     */
    public patchManagementInterface(param: ManagementApiPatchManagementInterfaceRequest, options?: Configuration): Promise<ManagementInterface> {
        return this.api.patchManagementInterface(param.moid, param.managementInterface, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'management.Controller' resource.
     * @param param the request object
     */
    public updateManagementController(param: ManagementApiUpdateManagementControllerRequest, options?: Configuration): Promise<ManagementController> {
        return this.api.updateManagementController(param.moid, param.managementController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'management.Entity' resource.
     * @param param the request object
     */
    public updateManagementEntity(param: ManagementApiUpdateManagementEntityRequest, options?: Configuration): Promise<ManagementEntity> {
        return this.api.updateManagementEntity(param.moid, param.managementEntity, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'management.Interface' resource.
     * @param param the request object
     */
    public updateManagementInterface(param: ManagementApiUpdateManagementInterfaceRequest, options?: Configuration): Promise<ManagementInterface> {
        return this.api.updateManagementInterface(param.moid, param.managementInterface, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableMemoryApi } from "./ObservableAPI";
import { MemoryApiRequestFactory, MemoryApiResponseProcessor} from "../apis/MemoryApi";

export interface MemoryApiCreateMemoryPersistentMemoryPolicyRequest {
    /**
     * The &#39;memory.PersistentMemoryPolicy&#39; resource to create.
     * @type MemoryPersistentMemoryPolicy
     * @memberof MemoryApicreateMemoryPersistentMemoryPolicy
     */
    memoryPersistentMemoryPolicy: MemoryPersistentMemoryPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApicreateMemoryPersistentMemoryPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof MemoryApicreateMemoryPersistentMemoryPolicy
     */
    ifNoneMatch?: string
}

export interface MemoryApiDeleteMemoryPersistentMemoryPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApideleteMemoryPersistentMemoryPolicy
     */
    moid: string
}

export interface MemoryApiGetMemoryArrayByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApigetMemoryArrayByMoid
     */
    moid: string
}

export interface MemoryApiGetMemoryArrayListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MemoryApigetMemoryArrayList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MemoryApigetMemoryArrayList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MemoryApigetMemoryArrayList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MemoryApigetMemoryArrayList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MemoryApigetMemoryArrayList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MemoryApigetMemoryArrayList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MemoryApigetMemoryArrayList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MemoryApigetMemoryArrayList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MemoryApigetMemoryArrayList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MemoryApigetMemoryArrayList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MemoryApigetMemoryArrayList
     */
    tags?: string
}

export interface MemoryApiGetMemoryPersistentMemoryConfigResultByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultByMoid
     */
    moid: string
}

export interface MemoryApiGetMemoryPersistentMemoryConfigResultListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigResultList
     */
    tags?: string
}

export interface MemoryApiGetMemoryPersistentMemoryConfigurationByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationByMoid
     */
    moid: string
}

export interface MemoryApiGetMemoryPersistentMemoryConfigurationListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryConfigurationList
     */
    tags?: string
}

export interface MemoryApiGetMemoryPersistentMemoryNamespaceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceByMoid
     */
    moid: string
}

export interface MemoryApiGetMemoryPersistentMemoryNamespaceConfigResultByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultByMoid
     */
    moid: string
}

export interface MemoryApiGetMemoryPersistentMemoryNamespaceConfigResultListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceConfigResultList
     */
    tags?: string
}

export interface MemoryApiGetMemoryPersistentMemoryNamespaceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryNamespaceList
     */
    tags?: string
}

export interface MemoryApiGetMemoryPersistentMemoryPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyByMoid
     */
    moid: string
}

export interface MemoryApiGetMemoryPersistentMemoryPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryPolicyList
     */
    tags?: string
}

export interface MemoryApiGetMemoryPersistentMemoryRegionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryRegionByMoid
     */
    moid: string
}

export interface MemoryApiGetMemoryPersistentMemoryRegionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryRegionList
     */
    tags?: string
}

export interface MemoryApiGetMemoryPersistentMemoryUnitByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryUnitByMoid
     */
    moid: string
}

export interface MemoryApiGetMemoryPersistentMemoryUnitListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MemoryApigetMemoryPersistentMemoryUnitList
     */
    tags?: string
}

export interface MemoryApiGetMemoryUnitByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApigetMemoryUnitByMoid
     */
    moid: string
}

export interface MemoryApiGetMemoryUnitListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MemoryApigetMemoryUnitList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MemoryApigetMemoryUnitList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MemoryApigetMemoryUnitList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MemoryApigetMemoryUnitList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MemoryApigetMemoryUnitList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MemoryApigetMemoryUnitList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MemoryApigetMemoryUnitList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MemoryApigetMemoryUnitList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MemoryApigetMemoryUnitList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MemoryApigetMemoryUnitList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MemoryApigetMemoryUnitList
     */
    tags?: string
}

export interface MemoryApiPatchMemoryArrayRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApipatchMemoryArray
     */
    moid: string
    /**
     * The &#39;memory.Array&#39; resource to update.
     * @type MemoryArray
     * @memberof MemoryApipatchMemoryArray
     */
    memoryArray: MemoryArray
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApipatchMemoryArray
     */
    ifMatch?: string
}

export interface MemoryApiPatchMemoryPersistentMemoryConfigResultRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryConfigResult
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryConfigResult&#39; resource to update.
     * @type MemoryPersistentMemoryConfigResult
     * @memberof MemoryApipatchMemoryPersistentMemoryConfigResult
     */
    memoryPersistentMemoryConfigResult: MemoryPersistentMemoryConfigResult
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryConfigResult
     */
    ifMatch?: string
}

export interface MemoryApiPatchMemoryPersistentMemoryConfigurationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryConfiguration
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryConfiguration&#39; resource to update.
     * @type MemoryPersistentMemoryConfiguration
     * @memberof MemoryApipatchMemoryPersistentMemoryConfiguration
     */
    memoryPersistentMemoryConfiguration: MemoryPersistentMemoryConfiguration
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryConfiguration
     */
    ifMatch?: string
}

export interface MemoryApiPatchMemoryPersistentMemoryNamespaceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryNamespace
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryNamespace&#39; resource to update.
     * @type MemoryPersistentMemoryNamespace
     * @memberof MemoryApipatchMemoryPersistentMemoryNamespace
     */
    memoryPersistentMemoryNamespace: MemoryPersistentMemoryNamespace
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryNamespace
     */
    ifMatch?: string
}

export interface MemoryApiPatchMemoryPersistentMemoryNamespaceConfigResultRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryNamespaceConfigResult
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryNamespaceConfigResult&#39; resource to update.
     * @type MemoryPersistentMemoryNamespaceConfigResult
     * @memberof MemoryApipatchMemoryPersistentMemoryNamespaceConfigResult
     */
    memoryPersistentMemoryNamespaceConfigResult: MemoryPersistentMemoryNamespaceConfigResult
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryNamespaceConfigResult
     */
    ifMatch?: string
}

export interface MemoryApiPatchMemoryPersistentMemoryPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryPolicy
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryPolicy&#39; resource to update.
     * @type MemoryPersistentMemoryPolicy
     * @memberof MemoryApipatchMemoryPersistentMemoryPolicy
     */
    memoryPersistentMemoryPolicy: MemoryPersistentMemoryPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryPolicy
     */
    ifMatch?: string
}

export interface MemoryApiPatchMemoryPersistentMemoryRegionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryRegion
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryRegion&#39; resource to update.
     * @type MemoryPersistentMemoryRegion
     * @memberof MemoryApipatchMemoryPersistentMemoryRegion
     */
    memoryPersistentMemoryRegion: MemoryPersistentMemoryRegion
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryRegion
     */
    ifMatch?: string
}

export interface MemoryApiPatchMemoryPersistentMemoryUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryUnit
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryUnit&#39; resource to update.
     * @type MemoryPersistentMemoryUnit
     * @memberof MemoryApipatchMemoryPersistentMemoryUnit
     */
    memoryPersistentMemoryUnit: MemoryPersistentMemoryUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApipatchMemoryPersistentMemoryUnit
     */
    ifMatch?: string
}

export interface MemoryApiPatchMemoryUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApipatchMemoryUnit
     */
    moid: string
    /**
     * The &#39;memory.Unit&#39; resource to update.
     * @type MemoryUnit
     * @memberof MemoryApipatchMemoryUnit
     */
    memoryUnit: MemoryUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApipatchMemoryUnit
     */
    ifMatch?: string
}

export interface MemoryApiUpdateMemoryArrayRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApiupdateMemoryArray
     */
    moid: string
    /**
     * The &#39;memory.Array&#39; resource to update.
     * @type MemoryArray
     * @memberof MemoryApiupdateMemoryArray
     */
    memoryArray: MemoryArray
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApiupdateMemoryArray
     */
    ifMatch?: string
}

export interface MemoryApiUpdateMemoryPersistentMemoryConfigResultRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryConfigResult
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryConfigResult&#39; resource to update.
     * @type MemoryPersistentMemoryConfigResult
     * @memberof MemoryApiupdateMemoryPersistentMemoryConfigResult
     */
    memoryPersistentMemoryConfigResult: MemoryPersistentMemoryConfigResult
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryConfigResult
     */
    ifMatch?: string
}

export interface MemoryApiUpdateMemoryPersistentMemoryConfigurationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryConfiguration
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryConfiguration&#39; resource to update.
     * @type MemoryPersistentMemoryConfiguration
     * @memberof MemoryApiupdateMemoryPersistentMemoryConfiguration
     */
    memoryPersistentMemoryConfiguration: MemoryPersistentMemoryConfiguration
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryConfiguration
     */
    ifMatch?: string
}

export interface MemoryApiUpdateMemoryPersistentMemoryNamespaceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryNamespace
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryNamespace&#39; resource to update.
     * @type MemoryPersistentMemoryNamespace
     * @memberof MemoryApiupdateMemoryPersistentMemoryNamespace
     */
    memoryPersistentMemoryNamespace: MemoryPersistentMemoryNamespace
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryNamespace
     */
    ifMatch?: string
}

export interface MemoryApiUpdateMemoryPersistentMemoryNamespaceConfigResultRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryNamespaceConfigResult
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryNamespaceConfigResult&#39; resource to update.
     * @type MemoryPersistentMemoryNamespaceConfigResult
     * @memberof MemoryApiupdateMemoryPersistentMemoryNamespaceConfigResult
     */
    memoryPersistentMemoryNamespaceConfigResult: MemoryPersistentMemoryNamespaceConfigResult
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryNamespaceConfigResult
     */
    ifMatch?: string
}

export interface MemoryApiUpdateMemoryPersistentMemoryPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryPolicy
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryPolicy&#39; resource to update.
     * @type MemoryPersistentMemoryPolicy
     * @memberof MemoryApiupdateMemoryPersistentMemoryPolicy
     */
    memoryPersistentMemoryPolicy: MemoryPersistentMemoryPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryPolicy
     */
    ifMatch?: string
}

export interface MemoryApiUpdateMemoryPersistentMemoryRegionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryRegion
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryRegion&#39; resource to update.
     * @type MemoryPersistentMemoryRegion
     * @memberof MemoryApiupdateMemoryPersistentMemoryRegion
     */
    memoryPersistentMemoryRegion: MemoryPersistentMemoryRegion
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryRegion
     */
    ifMatch?: string
}

export interface MemoryApiUpdateMemoryPersistentMemoryUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryUnit
     */
    moid: string
    /**
     * The &#39;memory.PersistentMemoryUnit&#39; resource to update.
     * @type MemoryPersistentMemoryUnit
     * @memberof MemoryApiupdateMemoryPersistentMemoryUnit
     */
    memoryPersistentMemoryUnit: MemoryPersistentMemoryUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApiupdateMemoryPersistentMemoryUnit
     */
    ifMatch?: string
}

export interface MemoryApiUpdateMemoryUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MemoryApiupdateMemoryUnit
     */
    moid: string
    /**
     * The &#39;memory.Unit&#39; resource to update.
     * @type MemoryUnit
     * @memberof MemoryApiupdateMemoryUnit
     */
    memoryUnit: MemoryUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof MemoryApiupdateMemoryUnit
     */
    ifMatch?: string
}


export class ObjectMemoryApi {
    private api: ObservableMemoryApi

    public constructor(configuration: Configuration, requestFactory?: MemoryApiRequestFactory, responseProcessor?: MemoryApiResponseProcessor) {
        this.api = new ObservableMemoryApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'memory.PersistentMemoryPolicy' resource.
     * @param param the request object
     */
    public createMemoryPersistentMemoryPolicy(param: MemoryApiCreateMemoryPersistentMemoryPolicyRequest, options?: Configuration): Promise<MemoryPersistentMemoryPolicy> {
        return this.api.createMemoryPersistentMemoryPolicy(param.memoryPersistentMemoryPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'memory.PersistentMemoryPolicy' resource.
     * @param param the request object
     */
    public deleteMemoryPersistentMemoryPolicy(param: MemoryApiDeleteMemoryPersistentMemoryPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteMemoryPersistentMemoryPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.Array' resource.
     * @param param the request object
     */
    public getMemoryArrayByMoid(param: MemoryApiGetMemoryArrayByMoidRequest, options?: Configuration): Promise<MemoryArray> {
        return this.api.getMemoryArrayByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.Array' resource.
     * @param param the request object
     */
    public getMemoryArrayList(param: MemoryApiGetMemoryArrayListRequest, options?: Configuration): Promise<MemoryArrayResponse> {
        return this.api.getMemoryArrayList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryConfigResult' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryConfigResultByMoid(param: MemoryApiGetMemoryPersistentMemoryConfigResultByMoidRequest, options?: Configuration): Promise<MemoryPersistentMemoryConfigResult> {
        return this.api.getMemoryPersistentMemoryConfigResultByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryConfigResult' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryConfigResultList(param: MemoryApiGetMemoryPersistentMemoryConfigResultListRequest, options?: Configuration): Promise<MemoryPersistentMemoryConfigResultResponse> {
        return this.api.getMemoryPersistentMemoryConfigResultList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryConfiguration' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryConfigurationByMoid(param: MemoryApiGetMemoryPersistentMemoryConfigurationByMoidRequest, options?: Configuration): Promise<MemoryPersistentMemoryConfiguration> {
        return this.api.getMemoryPersistentMemoryConfigurationByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryConfiguration' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryConfigurationList(param: MemoryApiGetMemoryPersistentMemoryConfigurationListRequest, options?: Configuration): Promise<MemoryPersistentMemoryConfigurationResponse> {
        return this.api.getMemoryPersistentMemoryConfigurationList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryNamespace' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryNamespaceByMoid(param: MemoryApiGetMemoryPersistentMemoryNamespaceByMoidRequest, options?: Configuration): Promise<MemoryPersistentMemoryNamespace> {
        return this.api.getMemoryPersistentMemoryNamespaceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryNamespaceConfigResult' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryNamespaceConfigResultByMoid(param: MemoryApiGetMemoryPersistentMemoryNamespaceConfigResultByMoidRequest, options?: Configuration): Promise<MemoryPersistentMemoryNamespaceConfigResult> {
        return this.api.getMemoryPersistentMemoryNamespaceConfigResultByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryNamespaceConfigResult' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryNamespaceConfigResultList(param: MemoryApiGetMemoryPersistentMemoryNamespaceConfigResultListRequest, options?: Configuration): Promise<MemoryPersistentMemoryNamespaceConfigResultResponse> {
        return this.api.getMemoryPersistentMemoryNamespaceConfigResultList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryNamespace' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryNamespaceList(param: MemoryApiGetMemoryPersistentMemoryNamespaceListRequest, options?: Configuration): Promise<MemoryPersistentMemoryNamespaceResponse> {
        return this.api.getMemoryPersistentMemoryNamespaceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryPolicy' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryPolicyByMoid(param: MemoryApiGetMemoryPersistentMemoryPolicyByMoidRequest, options?: Configuration): Promise<MemoryPersistentMemoryPolicy> {
        return this.api.getMemoryPersistentMemoryPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryPolicy' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryPolicyList(param: MemoryApiGetMemoryPersistentMemoryPolicyListRequest, options?: Configuration): Promise<MemoryPersistentMemoryPolicyResponse> {
        return this.api.getMemoryPersistentMemoryPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryRegion' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryRegionByMoid(param: MemoryApiGetMemoryPersistentMemoryRegionByMoidRequest, options?: Configuration): Promise<MemoryPersistentMemoryRegion> {
        return this.api.getMemoryPersistentMemoryRegionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryRegion' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryRegionList(param: MemoryApiGetMemoryPersistentMemoryRegionListRequest, options?: Configuration): Promise<MemoryPersistentMemoryRegionResponse> {
        return this.api.getMemoryPersistentMemoryRegionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryUnit' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryUnitByMoid(param: MemoryApiGetMemoryPersistentMemoryUnitByMoidRequest, options?: Configuration): Promise<MemoryPersistentMemoryUnit> {
        return this.api.getMemoryPersistentMemoryUnitByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.PersistentMemoryUnit' resource.
     * @param param the request object
     */
    public getMemoryPersistentMemoryUnitList(param: MemoryApiGetMemoryPersistentMemoryUnitListRequest, options?: Configuration): Promise<MemoryPersistentMemoryUnitResponse> {
        return this.api.getMemoryPersistentMemoryUnitList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'memory.Unit' resource.
     * @param param the request object
     */
    public getMemoryUnitByMoid(param: MemoryApiGetMemoryUnitByMoidRequest, options?: Configuration): Promise<MemoryUnit> {
        return this.api.getMemoryUnitByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'memory.Unit' resource.
     * @param param the request object
     */
    public getMemoryUnitList(param: MemoryApiGetMemoryUnitListRequest, options?: Configuration): Promise<MemoryUnitResponse> {
        return this.api.getMemoryUnitList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'memory.Array' resource.
     * @param param the request object
     */
    public patchMemoryArray(param: MemoryApiPatchMemoryArrayRequest, options?: Configuration): Promise<MemoryArray> {
        return this.api.patchMemoryArray(param.moid, param.memoryArray, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryConfigResult' resource.
     * @param param the request object
     */
    public patchMemoryPersistentMemoryConfigResult(param: MemoryApiPatchMemoryPersistentMemoryConfigResultRequest, options?: Configuration): Promise<MemoryPersistentMemoryConfigResult> {
        return this.api.patchMemoryPersistentMemoryConfigResult(param.moid, param.memoryPersistentMemoryConfigResult, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryConfiguration' resource.
     * @param param the request object
     */
    public patchMemoryPersistentMemoryConfiguration(param: MemoryApiPatchMemoryPersistentMemoryConfigurationRequest, options?: Configuration): Promise<MemoryPersistentMemoryConfiguration> {
        return this.api.patchMemoryPersistentMemoryConfiguration(param.moid, param.memoryPersistentMemoryConfiguration, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryNamespace' resource.
     * @param param the request object
     */
    public patchMemoryPersistentMemoryNamespace(param: MemoryApiPatchMemoryPersistentMemoryNamespaceRequest, options?: Configuration): Promise<MemoryPersistentMemoryNamespace> {
        return this.api.patchMemoryPersistentMemoryNamespace(param.moid, param.memoryPersistentMemoryNamespace, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryNamespaceConfigResult' resource.
     * @param param the request object
     */
    public patchMemoryPersistentMemoryNamespaceConfigResult(param: MemoryApiPatchMemoryPersistentMemoryNamespaceConfigResultRequest, options?: Configuration): Promise<MemoryPersistentMemoryNamespaceConfigResult> {
        return this.api.patchMemoryPersistentMemoryNamespaceConfigResult(param.moid, param.memoryPersistentMemoryNamespaceConfigResult, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryPolicy' resource.
     * @param param the request object
     */
    public patchMemoryPersistentMemoryPolicy(param: MemoryApiPatchMemoryPersistentMemoryPolicyRequest, options?: Configuration): Promise<MemoryPersistentMemoryPolicy> {
        return this.api.patchMemoryPersistentMemoryPolicy(param.moid, param.memoryPersistentMemoryPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryRegion' resource.
     * @param param the request object
     */
    public patchMemoryPersistentMemoryRegion(param: MemoryApiPatchMemoryPersistentMemoryRegionRequest, options?: Configuration): Promise<MemoryPersistentMemoryRegion> {
        return this.api.patchMemoryPersistentMemoryRegion(param.moid, param.memoryPersistentMemoryRegion, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryUnit' resource.
     * @param param the request object
     */
    public patchMemoryPersistentMemoryUnit(param: MemoryApiPatchMemoryPersistentMemoryUnitRequest, options?: Configuration): Promise<MemoryPersistentMemoryUnit> {
        return this.api.patchMemoryPersistentMemoryUnit(param.moid, param.memoryPersistentMemoryUnit, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.Unit' resource.
     * @param param the request object
     */
    public patchMemoryUnit(param: MemoryApiPatchMemoryUnitRequest, options?: Configuration): Promise<MemoryUnit> {
        return this.api.patchMemoryUnit(param.moid, param.memoryUnit, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.Array' resource.
     * @param param the request object
     */
    public updateMemoryArray(param: MemoryApiUpdateMemoryArrayRequest, options?: Configuration): Promise<MemoryArray> {
        return this.api.updateMemoryArray(param.moid, param.memoryArray, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryConfigResult' resource.
     * @param param the request object
     */
    public updateMemoryPersistentMemoryConfigResult(param: MemoryApiUpdateMemoryPersistentMemoryConfigResultRequest, options?: Configuration): Promise<MemoryPersistentMemoryConfigResult> {
        return this.api.updateMemoryPersistentMemoryConfigResult(param.moid, param.memoryPersistentMemoryConfigResult, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryConfiguration' resource.
     * @param param the request object
     */
    public updateMemoryPersistentMemoryConfiguration(param: MemoryApiUpdateMemoryPersistentMemoryConfigurationRequest, options?: Configuration): Promise<MemoryPersistentMemoryConfiguration> {
        return this.api.updateMemoryPersistentMemoryConfiguration(param.moid, param.memoryPersistentMemoryConfiguration, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryNamespace' resource.
     * @param param the request object
     */
    public updateMemoryPersistentMemoryNamespace(param: MemoryApiUpdateMemoryPersistentMemoryNamespaceRequest, options?: Configuration): Promise<MemoryPersistentMemoryNamespace> {
        return this.api.updateMemoryPersistentMemoryNamespace(param.moid, param.memoryPersistentMemoryNamespace, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryNamespaceConfigResult' resource.
     * @param param the request object
     */
    public updateMemoryPersistentMemoryNamespaceConfigResult(param: MemoryApiUpdateMemoryPersistentMemoryNamespaceConfigResultRequest, options?: Configuration): Promise<MemoryPersistentMemoryNamespaceConfigResult> {
        return this.api.updateMemoryPersistentMemoryNamespaceConfigResult(param.moid, param.memoryPersistentMemoryNamespaceConfigResult, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryPolicy' resource.
     * @param param the request object
     */
    public updateMemoryPersistentMemoryPolicy(param: MemoryApiUpdateMemoryPersistentMemoryPolicyRequest, options?: Configuration): Promise<MemoryPersistentMemoryPolicy> {
        return this.api.updateMemoryPersistentMemoryPolicy(param.moid, param.memoryPersistentMemoryPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryRegion' resource.
     * @param param the request object
     */
    public updateMemoryPersistentMemoryRegion(param: MemoryApiUpdateMemoryPersistentMemoryRegionRequest, options?: Configuration): Promise<MemoryPersistentMemoryRegion> {
        return this.api.updateMemoryPersistentMemoryRegion(param.moid, param.memoryPersistentMemoryRegion, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.PersistentMemoryUnit' resource.
     * @param param the request object
     */
    public updateMemoryPersistentMemoryUnit(param: MemoryApiUpdateMemoryPersistentMemoryUnitRequest, options?: Configuration): Promise<MemoryPersistentMemoryUnit> {
        return this.api.updateMemoryPersistentMemoryUnit(param.moid, param.memoryPersistentMemoryUnit, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'memory.Unit' resource.
     * @param param the request object
     */
    public updateMemoryUnit(param: MemoryApiUpdateMemoryUnitRequest, options?: Configuration): Promise<MemoryUnit> {
        return this.api.updateMemoryUnit(param.moid, param.memoryUnit, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableMetaApi } from "./ObservableAPI";
import { MetaApiRequestFactory, MetaApiResponseProcessor} from "../apis/MetaApi";

export interface MetaApiDeleteMetaDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MetaApideleteMetaDefinition
     */
    moid: string
}

export interface MetaApiGetMetaDefinitionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof MetaApigetMetaDefinitionByMoid
     */
    moid: string
}

export interface MetaApiGetMetaDefinitionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof MetaApigetMetaDefinitionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof MetaApigetMetaDefinitionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof MetaApigetMetaDefinitionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof MetaApigetMetaDefinitionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof MetaApigetMetaDefinitionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof MetaApigetMetaDefinitionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof MetaApigetMetaDefinitionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof MetaApigetMetaDefinitionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof MetaApigetMetaDefinitionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof MetaApigetMetaDefinitionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof MetaApigetMetaDefinitionList
     */
    tags?: string
}


export class ObjectMetaApi {
    private api: ObservableMetaApi

    public constructor(configuration: Configuration, requestFactory?: MetaApiRequestFactory, responseProcessor?: MetaApiResponseProcessor) {
        this.api = new ObservableMetaApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Delete a 'meta.Definition' resource.
     * @param param the request object
     */
    public deleteMetaDefinition(param: MetaApiDeleteMetaDefinitionRequest, options?: Configuration): Promise<void> {
        return this.api.deleteMetaDefinition(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'meta.Definition' resource.
     * @param param the request object
     */
    public getMetaDefinitionByMoid(param: MetaApiGetMetaDefinitionByMoidRequest, options?: Configuration): Promise<MetaDefinition> {
        return this.api.getMetaDefinitionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'meta.Definition' resource.
     * @param param the request object
     */
    public getMetaDefinitionList(param: MetaApiGetMetaDefinitionListRequest, options?: Configuration): Promise<MetaDefinitionResponse> {
        return this.api.getMetaDefinitionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableNetworkApi } from "./ObservableAPI";
import { NetworkApiRequestFactory, NetworkApiResponseProcessor} from "../apis/NetworkApi";

export interface NetworkApiGetNetworkElementByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NetworkApigetNetworkElementByMoid
     */
    moid: string
}

export interface NetworkApiGetNetworkElementListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NetworkApigetNetworkElementList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NetworkApigetNetworkElementList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NetworkApigetNetworkElementList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NetworkApigetNetworkElementList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NetworkApigetNetworkElementList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NetworkApigetNetworkElementList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NetworkApigetNetworkElementList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NetworkApigetNetworkElementList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NetworkApigetNetworkElementList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NetworkApigetNetworkElementList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NetworkApigetNetworkElementList
     */
    tags?: string
}

export interface NetworkApiGetNetworkElementSummaryByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NetworkApigetNetworkElementSummaryByMoid
     */
    moid: string
}

export interface NetworkApiGetNetworkElementSummaryListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NetworkApigetNetworkElementSummaryList
     */
    tags?: string
}

export interface NetworkApiPatchNetworkElementRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NetworkApipatchNetworkElement
     */
    moid: string
    /**
     * The &#39;network.Element&#39; resource to update.
     * @type NetworkElement
     * @memberof NetworkApipatchNetworkElement
     */
    networkElement: NetworkElement
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof NetworkApipatchNetworkElement
     */
    ifMatch?: string
}

export interface NetworkApiUpdateNetworkElementRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NetworkApiupdateNetworkElement
     */
    moid: string
    /**
     * The &#39;network.Element&#39; resource to update.
     * @type NetworkElement
     * @memberof NetworkApiupdateNetworkElement
     */
    networkElement: NetworkElement
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof NetworkApiupdateNetworkElement
     */
    ifMatch?: string
}


export class ObjectNetworkApi {
    private api: ObservableNetworkApi

    public constructor(configuration: Configuration, requestFactory?: NetworkApiRequestFactory, responseProcessor?: NetworkApiResponseProcessor) {
        this.api = new ObservableNetworkApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'network.Element' resource.
     * @param param the request object
     */
    public getNetworkElementByMoid(param: NetworkApiGetNetworkElementByMoidRequest, options?: Configuration): Promise<NetworkElement> {
        return this.api.getNetworkElementByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'network.Element' resource.
     * @param param the request object
     */
    public getNetworkElementList(param: NetworkApiGetNetworkElementListRequest, options?: Configuration): Promise<NetworkElementResponse> {
        return this.api.getNetworkElementList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'network.ElementSummary' resource.
     * @param param the request object
     */
    public getNetworkElementSummaryByMoid(param: NetworkApiGetNetworkElementSummaryByMoidRequest, options?: Configuration): Promise<NetworkElementSummary> {
        return this.api.getNetworkElementSummaryByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'network.ElementSummary' resource.
     * @param param the request object
     */
    public getNetworkElementSummaryList(param: NetworkApiGetNetworkElementSummaryListRequest, options?: Configuration): Promise<NetworkElementSummaryResponse> {
        return this.api.getNetworkElementSummaryList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'network.Element' resource.
     * @param param the request object
     */
    public patchNetworkElement(param: NetworkApiPatchNetworkElementRequest, options?: Configuration): Promise<NetworkElement> {
        return this.api.patchNetworkElement(param.moid, param.networkElement, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'network.Element' resource.
     * @param param the request object
     */
    public updateNetworkElement(param: NetworkApiUpdateNetworkElementRequest, options?: Configuration): Promise<NetworkElement> {
        return this.api.updateNetworkElement(param.moid, param.networkElement, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableNetworkconfigApi } from "./ObservableAPI";
import { NetworkconfigApiRequestFactory, NetworkconfigApiResponseProcessor} from "../apis/NetworkconfigApi";

export interface NetworkconfigApiCreateNetworkconfigPolicyRequest {
    /**
     * The &#39;networkconfig.Policy&#39; resource to create.
     * @type NetworkconfigPolicy
     * @memberof NetworkconfigApicreateNetworkconfigPolicy
     */
    networkconfigPolicy: NetworkconfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof NetworkconfigApicreateNetworkconfigPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof NetworkconfigApicreateNetworkconfigPolicy
     */
    ifNoneMatch?: string
}

export interface NetworkconfigApiDeleteNetworkconfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NetworkconfigApideleteNetworkconfigPolicy
     */
    moid: string
}

export interface NetworkconfigApiGetNetworkconfigPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NetworkconfigApigetNetworkconfigPolicyByMoid
     */
    moid: string
}

export interface NetworkconfigApiGetNetworkconfigPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NetworkconfigApigetNetworkconfigPolicyList
     */
    tags?: string
}

export interface NetworkconfigApiPatchNetworkconfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NetworkconfigApipatchNetworkconfigPolicy
     */
    moid: string
    /**
     * The &#39;networkconfig.Policy&#39; resource to update.
     * @type NetworkconfigPolicy
     * @memberof NetworkconfigApipatchNetworkconfigPolicy
     */
    networkconfigPolicy: NetworkconfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof NetworkconfigApipatchNetworkconfigPolicy
     */
    ifMatch?: string
}

export interface NetworkconfigApiUpdateNetworkconfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NetworkconfigApiupdateNetworkconfigPolicy
     */
    moid: string
    /**
     * The &#39;networkconfig.Policy&#39; resource to update.
     * @type NetworkconfigPolicy
     * @memberof NetworkconfigApiupdateNetworkconfigPolicy
     */
    networkconfigPolicy: NetworkconfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof NetworkconfigApiupdateNetworkconfigPolicy
     */
    ifMatch?: string
}


export class ObjectNetworkconfigApi {
    private api: ObservableNetworkconfigApi

    public constructor(configuration: Configuration, requestFactory?: NetworkconfigApiRequestFactory, responseProcessor?: NetworkconfigApiResponseProcessor) {
        this.api = new ObservableNetworkconfigApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'networkconfig.Policy' resource.
     * @param param the request object
     */
    public createNetworkconfigPolicy(param: NetworkconfigApiCreateNetworkconfigPolicyRequest, options?: Configuration): Promise<NetworkconfigPolicy> {
        return this.api.createNetworkconfigPolicy(param.networkconfigPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'networkconfig.Policy' resource.
     * @param param the request object
     */
    public deleteNetworkconfigPolicy(param: NetworkconfigApiDeleteNetworkconfigPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteNetworkconfigPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'networkconfig.Policy' resource.
     * @param param the request object
     */
    public getNetworkconfigPolicyByMoid(param: NetworkconfigApiGetNetworkconfigPolicyByMoidRequest, options?: Configuration): Promise<NetworkconfigPolicy> {
        return this.api.getNetworkconfigPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'networkconfig.Policy' resource.
     * @param param the request object
     */
    public getNetworkconfigPolicyList(param: NetworkconfigApiGetNetworkconfigPolicyListRequest, options?: Configuration): Promise<NetworkconfigPolicyResponse> {
        return this.api.getNetworkconfigPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'networkconfig.Policy' resource.
     * @param param the request object
     */
    public patchNetworkconfigPolicy(param: NetworkconfigApiPatchNetworkconfigPolicyRequest, options?: Configuration): Promise<NetworkconfigPolicy> {
        return this.api.patchNetworkconfigPolicy(param.moid, param.networkconfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'networkconfig.Policy' resource.
     * @param param the request object
     */
    public updateNetworkconfigPolicy(param: NetworkconfigApiUpdateNetworkconfigPolicyRequest, options?: Configuration): Promise<NetworkconfigPolicy> {
        return this.api.updateNetworkconfigPolicy(param.moid, param.networkconfigPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableNiaapiApi } from "./ObservableAPI";
import { NiaapiApiRequestFactory, NiaapiApiResponseProcessor} from "../apis/NiaapiApi";

export interface NiaapiApiGetNiaapiApicCcoPostByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiApicCcoPostByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiApicCcoPostListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiApicCcoPostList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiApicFieldNoticeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiApicFieldNoticeByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiApicFieldNoticeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiApicFieldNoticeList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiApicHweolByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiApicHweolByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiApicHweolListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiApicHweolList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiApicLatestMaintainedReleaseByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiApicLatestMaintainedReleaseListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiApicLatestMaintainedReleaseList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiApicReleaseRecommendByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiApicReleaseRecommendListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiApicReleaseRecommendList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiApicSweolByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiApicSweolByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiApicSweolListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiApicSweolList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiDcnmCcoPostByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmCcoPostByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiDcnmCcoPostListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmCcoPostList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiDcnmFieldNoticeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiDcnmFieldNoticeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmFieldNoticeList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiDcnmHweolByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmHweolByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiDcnmHweolListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmHweolList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiDcnmLatestMaintainedReleaseByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiDcnmLatestMaintainedReleaseListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmLatestMaintainedReleaseList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiDcnmReleaseRecommendByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiDcnmReleaseRecommendListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmReleaseRecommendList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiDcnmSweolByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmSweolByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiDcnmSweolListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiDcnmSweolList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiFileDownloaderByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiFileDownloaderByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiFileDownloaderListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiFileDownloaderList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiNiaMetadataByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiNiaMetadataByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiNiaMetadataListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiNiaMetadataList
     */
    tags?: string
}

export interface NiaapiApiGetNiaapiVersionRegexByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiaapiApigetNiaapiVersionRegexByMoid
     */
    moid: string
}

export interface NiaapiApiGetNiaapiVersionRegexListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiaapiApigetNiaapiVersionRegexList
     */
    tags?: string
}


export class ObjectNiaapiApi {
    private api: ObservableNiaapiApi

    public constructor(configuration: Configuration, requestFactory?: NiaapiApiRequestFactory, responseProcessor?: NiaapiApiResponseProcessor) {
        this.api = new ObservableNiaapiApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'niaapi.ApicCcoPost' resource.
     * @param param the request object
     */
    public getNiaapiApicCcoPostByMoid(param: NiaapiApiGetNiaapiApicCcoPostByMoidRequest, options?: Configuration): Promise<NiaapiApicCcoPost> {
        return this.api.getNiaapiApicCcoPostByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicCcoPost' resource.
     * @param param the request object
     */
    public getNiaapiApicCcoPostList(param: NiaapiApiGetNiaapiApicCcoPostListRequest, options?: Configuration): Promise<NiaapiApicCcoPostResponse> {
        return this.api.getNiaapiApicCcoPostList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicFieldNotice' resource.
     * @param param the request object
     */
    public getNiaapiApicFieldNoticeByMoid(param: NiaapiApiGetNiaapiApicFieldNoticeByMoidRequest, options?: Configuration): Promise<NiaapiApicFieldNotice> {
        return this.api.getNiaapiApicFieldNoticeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicFieldNotice' resource.
     * @param param the request object
     */
    public getNiaapiApicFieldNoticeList(param: NiaapiApiGetNiaapiApicFieldNoticeListRequest, options?: Configuration): Promise<NiaapiApicFieldNoticeResponse> {
        return this.api.getNiaapiApicFieldNoticeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicHweol' resource.
     * @param param the request object
     */
    public getNiaapiApicHweolByMoid(param: NiaapiApiGetNiaapiApicHweolByMoidRequest, options?: Configuration): Promise<NiaapiApicHweol> {
        return this.api.getNiaapiApicHweolByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicHweol' resource.
     * @param param the request object
     */
    public getNiaapiApicHweolList(param: NiaapiApiGetNiaapiApicHweolListRequest, options?: Configuration): Promise<NiaapiApicHweolResponse> {
        return this.api.getNiaapiApicHweolList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicLatestMaintainedRelease' resource.
     * @param param the request object
     */
    public getNiaapiApicLatestMaintainedReleaseByMoid(param: NiaapiApiGetNiaapiApicLatestMaintainedReleaseByMoidRequest, options?: Configuration): Promise<NiaapiApicLatestMaintainedRelease> {
        return this.api.getNiaapiApicLatestMaintainedReleaseByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicLatestMaintainedRelease' resource.
     * @param param the request object
     */
    public getNiaapiApicLatestMaintainedReleaseList(param: NiaapiApiGetNiaapiApicLatestMaintainedReleaseListRequest, options?: Configuration): Promise<NiaapiApicLatestMaintainedReleaseResponse> {
        return this.api.getNiaapiApicLatestMaintainedReleaseList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicReleaseRecommend' resource.
     * @param param the request object
     */
    public getNiaapiApicReleaseRecommendByMoid(param: NiaapiApiGetNiaapiApicReleaseRecommendByMoidRequest, options?: Configuration): Promise<NiaapiApicReleaseRecommend> {
        return this.api.getNiaapiApicReleaseRecommendByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicReleaseRecommend' resource.
     * @param param the request object
     */
    public getNiaapiApicReleaseRecommendList(param: NiaapiApiGetNiaapiApicReleaseRecommendListRequest, options?: Configuration): Promise<NiaapiApicReleaseRecommendResponse> {
        return this.api.getNiaapiApicReleaseRecommendList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicSweol' resource.
     * @param param the request object
     */
    public getNiaapiApicSweolByMoid(param: NiaapiApiGetNiaapiApicSweolByMoidRequest, options?: Configuration): Promise<NiaapiApicSweol> {
        return this.api.getNiaapiApicSweolByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.ApicSweol' resource.
     * @param param the request object
     */
    public getNiaapiApicSweolList(param: NiaapiApiGetNiaapiApicSweolListRequest, options?: Configuration): Promise<NiaapiApicSweolResponse> {
        return this.api.getNiaapiApicSweolList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmCcoPost' resource.
     * @param param the request object
     */
    public getNiaapiDcnmCcoPostByMoid(param: NiaapiApiGetNiaapiDcnmCcoPostByMoidRequest, options?: Configuration): Promise<NiaapiDcnmCcoPost> {
        return this.api.getNiaapiDcnmCcoPostByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmCcoPost' resource.
     * @param param the request object
     */
    public getNiaapiDcnmCcoPostList(param: NiaapiApiGetNiaapiDcnmCcoPostListRequest, options?: Configuration): Promise<NiaapiDcnmCcoPostResponse> {
        return this.api.getNiaapiDcnmCcoPostList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmFieldNotice' resource.
     * @param param the request object
     */
    public getNiaapiDcnmFieldNoticeByMoid(param: NiaapiApiGetNiaapiDcnmFieldNoticeByMoidRequest, options?: Configuration): Promise<NiaapiDcnmFieldNotice> {
        return this.api.getNiaapiDcnmFieldNoticeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmFieldNotice' resource.
     * @param param the request object
     */
    public getNiaapiDcnmFieldNoticeList(param: NiaapiApiGetNiaapiDcnmFieldNoticeListRequest, options?: Configuration): Promise<NiaapiDcnmFieldNoticeResponse> {
        return this.api.getNiaapiDcnmFieldNoticeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmHweol' resource.
     * @param param the request object
     */
    public getNiaapiDcnmHweolByMoid(param: NiaapiApiGetNiaapiDcnmHweolByMoidRequest, options?: Configuration): Promise<NiaapiDcnmHweol> {
        return this.api.getNiaapiDcnmHweolByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmHweol' resource.
     * @param param the request object
     */
    public getNiaapiDcnmHweolList(param: NiaapiApiGetNiaapiDcnmHweolListRequest, options?: Configuration): Promise<NiaapiDcnmHweolResponse> {
        return this.api.getNiaapiDcnmHweolList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmLatestMaintainedRelease' resource.
     * @param param the request object
     */
    public getNiaapiDcnmLatestMaintainedReleaseByMoid(param: NiaapiApiGetNiaapiDcnmLatestMaintainedReleaseByMoidRequest, options?: Configuration): Promise<NiaapiDcnmLatestMaintainedRelease> {
        return this.api.getNiaapiDcnmLatestMaintainedReleaseByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmLatestMaintainedRelease' resource.
     * @param param the request object
     */
    public getNiaapiDcnmLatestMaintainedReleaseList(param: NiaapiApiGetNiaapiDcnmLatestMaintainedReleaseListRequest, options?: Configuration): Promise<NiaapiDcnmLatestMaintainedReleaseResponse> {
        return this.api.getNiaapiDcnmLatestMaintainedReleaseList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmReleaseRecommend' resource.
     * @param param the request object
     */
    public getNiaapiDcnmReleaseRecommendByMoid(param: NiaapiApiGetNiaapiDcnmReleaseRecommendByMoidRequest, options?: Configuration): Promise<NiaapiDcnmReleaseRecommend> {
        return this.api.getNiaapiDcnmReleaseRecommendByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmReleaseRecommend' resource.
     * @param param the request object
     */
    public getNiaapiDcnmReleaseRecommendList(param: NiaapiApiGetNiaapiDcnmReleaseRecommendListRequest, options?: Configuration): Promise<NiaapiDcnmReleaseRecommendResponse> {
        return this.api.getNiaapiDcnmReleaseRecommendList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmSweol' resource.
     * @param param the request object
     */
    public getNiaapiDcnmSweolByMoid(param: NiaapiApiGetNiaapiDcnmSweolByMoidRequest, options?: Configuration): Promise<NiaapiDcnmSweol> {
        return this.api.getNiaapiDcnmSweolByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.DcnmSweol' resource.
     * @param param the request object
     */
    public getNiaapiDcnmSweolList(param: NiaapiApiGetNiaapiDcnmSweolListRequest, options?: Configuration): Promise<NiaapiDcnmSweolResponse> {
        return this.api.getNiaapiDcnmSweolList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.FileDownloader' resource.
     * @param param the request object
     */
    public getNiaapiFileDownloaderByMoid(param: NiaapiApiGetNiaapiFileDownloaderByMoidRequest, options?: Configuration): Promise<NiaapiFileDownloader> {
        return this.api.getNiaapiFileDownloaderByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.FileDownloader' resource.
     * @param param the request object
     */
    public getNiaapiFileDownloaderList(param: NiaapiApiGetNiaapiFileDownloaderListRequest, options?: Configuration): Promise<NiaapiFileDownloaderResponse> {
        return this.api.getNiaapiFileDownloaderList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.NiaMetadata' resource.
     * @param param the request object
     */
    public getNiaapiNiaMetadataByMoid(param: NiaapiApiGetNiaapiNiaMetadataByMoidRequest, options?: Configuration): Promise<NiaapiNiaMetadata> {
        return this.api.getNiaapiNiaMetadataByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.NiaMetadata' resource.
     * @param param the request object
     */
    public getNiaapiNiaMetadataList(param: NiaapiApiGetNiaapiNiaMetadataListRequest, options?: Configuration): Promise<NiaapiNiaMetadataResponse> {
        return this.api.getNiaapiNiaMetadataList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.VersionRegex' resource.
     * @param param the request object
     */
    public getNiaapiVersionRegexByMoid(param: NiaapiApiGetNiaapiVersionRegexByMoidRequest, options?: Configuration): Promise<NiaapiVersionRegex> {
        return this.api.getNiaapiVersionRegexByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niaapi.VersionRegex' resource.
     * @param param the request object
     */
    public getNiaapiVersionRegexList(param: NiaapiApiGetNiaapiVersionRegexListRequest, options?: Configuration): Promise<NiaapiVersionRegexResponse> {
        return this.api.getNiaapiVersionRegexList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableNiatelemetryApi } from "./ObservableAPI";
import { NiatelemetryApiRequestFactory, NiatelemetryApiResponseProcessor} from "../apis/NiatelemetryApi";

export interface NiatelemetryApiGetNiatelemetryNiaFeatureUsageByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageByMoid
     */
    moid: string
}

export interface NiatelemetryApiGetNiatelemetryNiaFeatureUsageListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaFeatureUsageList
     */
    tags?: string
}

export interface NiatelemetryApiGetNiatelemetryNiaInventoryByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryByMoid
     */
    moid: string
}

export interface NiatelemetryApiGetNiatelemetryNiaInventoryListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaInventoryList
     */
    tags?: string
}

export interface NiatelemetryApiGetNiatelemetryNiaLicenseStateByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateByMoid
     */
    moid: string
}

export interface NiatelemetryApiGetNiatelemetryNiaLicenseStateListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NiatelemetryApigetNiatelemetryNiaLicenseStateList
     */
    tags?: string
}


export class ObjectNiatelemetryApi {
    private api: ObservableNiatelemetryApi

    public constructor(configuration: Configuration, requestFactory?: NiatelemetryApiRequestFactory, responseProcessor?: NiatelemetryApiResponseProcessor) {
        this.api = new ObservableNiatelemetryApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'niatelemetry.NiaFeatureUsage' resource.
     * @param param the request object
     */
    public getNiatelemetryNiaFeatureUsageByMoid(param: NiatelemetryApiGetNiatelemetryNiaFeatureUsageByMoidRequest, options?: Configuration): Promise<NiatelemetryNiaFeatureUsage> {
        return this.api.getNiatelemetryNiaFeatureUsageByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niatelemetry.NiaFeatureUsage' resource.
     * @param param the request object
     */
    public getNiatelemetryNiaFeatureUsageList(param: NiatelemetryApiGetNiatelemetryNiaFeatureUsageListRequest, options?: Configuration): Promise<NiatelemetryNiaFeatureUsageResponse> {
        return this.api.getNiatelemetryNiaFeatureUsageList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niatelemetry.NiaInventory' resource.
     * @param param the request object
     */
    public getNiatelemetryNiaInventoryByMoid(param: NiatelemetryApiGetNiatelemetryNiaInventoryByMoidRequest, options?: Configuration): Promise<NiatelemetryNiaInventory> {
        return this.api.getNiatelemetryNiaInventoryByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niatelemetry.NiaInventory' resource.
     * @param param the request object
     */
    public getNiatelemetryNiaInventoryList(param: NiatelemetryApiGetNiatelemetryNiaInventoryListRequest, options?: Configuration): Promise<NiatelemetryNiaInventoryResponse> {
        return this.api.getNiatelemetryNiaInventoryList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'niatelemetry.NiaLicenseState' resource.
     * @param param the request object
     */
    public getNiatelemetryNiaLicenseStateByMoid(param: NiatelemetryApiGetNiatelemetryNiaLicenseStateByMoidRequest, options?: Configuration): Promise<NiatelemetryNiaLicenseState> {
        return this.api.getNiatelemetryNiaLicenseStateByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'niatelemetry.NiaLicenseState' resource.
     * @param param the request object
     */
    public getNiatelemetryNiaLicenseStateList(param: NiatelemetryApiGetNiatelemetryNiaLicenseStateListRequest, options?: Configuration): Promise<NiatelemetryNiaLicenseStateResponse> {
        return this.api.getNiatelemetryNiaLicenseStateList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableNtpApi } from "./ObservableAPI";
import { NtpApiRequestFactory, NtpApiResponseProcessor} from "../apis/NtpApi";

export interface NtpApiCreateNtpPolicyRequest {
    /**
     * The &#39;ntp.Policy&#39; resource to create.
     * @type NtpPolicy
     * @memberof NtpApicreateNtpPolicy
     */
    ntpPolicy: NtpPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof NtpApicreateNtpPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof NtpApicreateNtpPolicy
     */
    ifNoneMatch?: string
}

export interface NtpApiDeleteNtpPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NtpApideleteNtpPolicy
     */
    moid: string
}

export interface NtpApiGetNtpPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NtpApigetNtpPolicyByMoid
     */
    moid: string
}

export interface NtpApiGetNtpPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof NtpApigetNtpPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof NtpApigetNtpPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof NtpApigetNtpPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof NtpApigetNtpPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof NtpApigetNtpPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof NtpApigetNtpPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof NtpApigetNtpPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof NtpApigetNtpPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof NtpApigetNtpPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof NtpApigetNtpPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof NtpApigetNtpPolicyList
     */
    tags?: string
}

export interface NtpApiPatchNtpPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NtpApipatchNtpPolicy
     */
    moid: string
    /**
     * The &#39;ntp.Policy&#39; resource to update.
     * @type NtpPolicy
     * @memberof NtpApipatchNtpPolicy
     */
    ntpPolicy: NtpPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof NtpApipatchNtpPolicy
     */
    ifMatch?: string
}

export interface NtpApiUpdateNtpPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof NtpApiupdateNtpPolicy
     */
    moid: string
    /**
     * The &#39;ntp.Policy&#39; resource to update.
     * @type NtpPolicy
     * @memberof NtpApiupdateNtpPolicy
     */
    ntpPolicy: NtpPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof NtpApiupdateNtpPolicy
     */
    ifMatch?: string
}


export class ObjectNtpApi {
    private api: ObservableNtpApi

    public constructor(configuration: Configuration, requestFactory?: NtpApiRequestFactory, responseProcessor?: NtpApiResponseProcessor) {
        this.api = new ObservableNtpApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'ntp.Policy' resource.
     * @param param the request object
     */
    public createNtpPolicy(param: NtpApiCreateNtpPolicyRequest, options?: Configuration): Promise<NtpPolicy> {
        return this.api.createNtpPolicy(param.ntpPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'ntp.Policy' resource.
     * @param param the request object
     */
    public deleteNtpPolicy(param: NtpApiDeleteNtpPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteNtpPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ntp.Policy' resource.
     * @param param the request object
     */
    public getNtpPolicyByMoid(param: NtpApiGetNtpPolicyByMoidRequest, options?: Configuration): Promise<NtpPolicy> {
        return this.api.getNtpPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ntp.Policy' resource.
     * @param param the request object
     */
    public getNtpPolicyList(param: NtpApiGetNtpPolicyListRequest, options?: Configuration): Promise<NtpPolicyResponse> {
        return this.api.getNtpPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'ntp.Policy' resource.
     * @param param the request object
     */
    public patchNtpPolicy(param: NtpApiPatchNtpPolicyRequest, options?: Configuration): Promise<NtpPolicy> {
        return this.api.patchNtpPolicy(param.moid, param.ntpPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'ntp.Policy' resource.
     * @param param the request object
     */
    public updateNtpPolicy(param: NtpApiUpdateNtpPolicyRequest, options?: Configuration): Promise<NtpPolicy> {
        return this.api.updateNtpPolicy(param.moid, param.ntpPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableOrganizationApi } from "./ObservableAPI";
import { OrganizationApiRequestFactory, OrganizationApiResponseProcessor} from "../apis/OrganizationApi";

export interface OrganizationApiCreateOrganizationOrganizationRequest {
    /**
     * The &#39;organization.Organization&#39; resource to create.
     * @type OrganizationOrganization
     * @memberof OrganizationApicreateOrganizationOrganization
     */
    organizationOrganization: OrganizationOrganization
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof OrganizationApicreateOrganizationOrganization
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof OrganizationApicreateOrganizationOrganization
     */
    ifNoneMatch?: string
}

export interface OrganizationApiDeleteOrganizationOrganizationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof OrganizationApideleteOrganizationOrganization
     */
    moid: string
}

export interface OrganizationApiGetOrganizationOrganizationByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof OrganizationApigetOrganizationOrganizationByMoid
     */
    moid: string
}

export interface OrganizationApiGetOrganizationOrganizationListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof OrganizationApigetOrganizationOrganizationList
     */
    tags?: string
}

export interface OrganizationApiPatchOrganizationOrganizationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof OrganizationApipatchOrganizationOrganization
     */
    moid: string
    /**
     * The &#39;organization.Organization&#39; resource to update.
     * @type OrganizationOrganization
     * @memberof OrganizationApipatchOrganizationOrganization
     */
    organizationOrganization: OrganizationOrganization
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof OrganizationApipatchOrganizationOrganization
     */
    ifMatch?: string
}

export interface OrganizationApiUpdateOrganizationOrganizationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof OrganizationApiupdateOrganizationOrganization
     */
    moid: string
    /**
     * The &#39;organization.Organization&#39; resource to update.
     * @type OrganizationOrganization
     * @memberof OrganizationApiupdateOrganizationOrganization
     */
    organizationOrganization: OrganizationOrganization
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof OrganizationApiupdateOrganizationOrganization
     */
    ifMatch?: string
}


export class ObjectOrganizationApi {
    private api: ObservableOrganizationApi

    public constructor(configuration: Configuration, requestFactory?: OrganizationApiRequestFactory, responseProcessor?: OrganizationApiResponseProcessor) {
        this.api = new ObservableOrganizationApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'organization.Organization' resource.
     * @param param the request object
     */
    public createOrganizationOrganization(param: OrganizationApiCreateOrganizationOrganizationRequest, options?: Configuration): Promise<OrganizationOrganization> {
        return this.api.createOrganizationOrganization(param.organizationOrganization, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'organization.Organization' resource.
     * @param param the request object
     */
    public deleteOrganizationOrganization(param: OrganizationApiDeleteOrganizationOrganizationRequest, options?: Configuration): Promise<void> {
        return this.api.deleteOrganizationOrganization(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'organization.Organization' resource.
     * @param param the request object
     */
    public getOrganizationOrganizationByMoid(param: OrganizationApiGetOrganizationOrganizationByMoidRequest, options?: Configuration): Promise<OrganizationOrganization> {
        return this.api.getOrganizationOrganizationByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'organization.Organization' resource.
     * @param param the request object
     */
    public getOrganizationOrganizationList(param: OrganizationApiGetOrganizationOrganizationListRequest, options?: Configuration): Promise<OrganizationOrganizationResponse> {
        return this.api.getOrganizationOrganizationList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'organization.Organization' resource.
     * @param param the request object
     */
    public patchOrganizationOrganization(param: OrganizationApiPatchOrganizationOrganizationRequest, options?: Configuration): Promise<OrganizationOrganization> {
        return this.api.patchOrganizationOrganization(param.moid, param.organizationOrganization, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'organization.Organization' resource.
     * @param param the request object
     */
    public updateOrganizationOrganization(param: OrganizationApiUpdateOrganizationOrganizationRequest, options?: Configuration): Promise<OrganizationOrganization> {
        return this.api.updateOrganizationOrganization(param.moid, param.organizationOrganization, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableOsApi } from "./ObservableAPI";
import { OsApiRequestFactory, OsApiResponseProcessor} from "../apis/OsApi";

export interface OsApiCreateOsConfigurationFileRequest {
    /**
     * The &#39;os.ConfigurationFile&#39; resource to create.
     * @type OsConfigurationFile
     * @memberof OsApicreateOsConfigurationFile
     */
    osConfigurationFile: OsConfigurationFile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof OsApicreateOsConfigurationFile
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof OsApicreateOsConfigurationFile
     */
    ifNoneMatch?: string
}

export interface OsApiCreateOsInstallRequest {
    /**
     * The &#39;os.Install&#39; resource to create.
     * @type OsInstall
     * @memberof OsApicreateOsInstall
     */
    osInstall: OsInstall
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof OsApicreateOsInstall
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof OsApicreateOsInstall
     */
    ifNoneMatch?: string
}

export interface OsApiCreateOsOsSupportRequest {
    /**
     * The &#39;os.OsSupport&#39; resource to create.
     * @type OsOsSupport
     * @memberof OsApicreateOsOsSupport
     */
    osOsSupport: OsOsSupport
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof OsApicreateOsOsSupport
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof OsApicreateOsOsSupport
     */
    ifNoneMatch?: string
}

export interface OsApiCreateOsTemplateFileRequest {
    /**
     * The &#39;os.TemplateFile&#39; resource to create.
     * @type OsTemplateFile
     * @memberof OsApicreateOsTemplateFile
     */
    osTemplateFile: OsTemplateFile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof OsApicreateOsTemplateFile
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof OsApicreateOsTemplateFile
     */
    ifNoneMatch?: string
}

export interface OsApiDeleteOsConfigurationFileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof OsApideleteOsConfigurationFile
     */
    moid: string
}

export interface OsApiGetOsCatalogByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof OsApigetOsCatalogByMoid
     */
    moid: string
}

export interface OsApiGetOsCatalogListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof OsApigetOsCatalogList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof OsApigetOsCatalogList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof OsApigetOsCatalogList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof OsApigetOsCatalogList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof OsApigetOsCatalogList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof OsApigetOsCatalogList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof OsApigetOsCatalogList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof OsApigetOsCatalogList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof OsApigetOsCatalogList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof OsApigetOsCatalogList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof OsApigetOsCatalogList
     */
    tags?: string
}

export interface OsApiGetOsConfigurationFileByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof OsApigetOsConfigurationFileByMoid
     */
    moid: string
}

export interface OsApiGetOsConfigurationFileListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof OsApigetOsConfigurationFileList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof OsApigetOsConfigurationFileList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof OsApigetOsConfigurationFileList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof OsApigetOsConfigurationFileList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof OsApigetOsConfigurationFileList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof OsApigetOsConfigurationFileList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof OsApigetOsConfigurationFileList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof OsApigetOsConfigurationFileList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof OsApigetOsConfigurationFileList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof OsApigetOsConfigurationFileList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof OsApigetOsConfigurationFileList
     */
    tags?: string
}

export interface OsApiGetOsInstallByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof OsApigetOsInstallByMoid
     */
    moid: string
}

export interface OsApiGetOsInstallListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof OsApigetOsInstallList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof OsApigetOsInstallList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof OsApigetOsInstallList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof OsApigetOsInstallList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof OsApigetOsInstallList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof OsApigetOsInstallList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof OsApigetOsInstallList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof OsApigetOsInstallList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof OsApigetOsInstallList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof OsApigetOsInstallList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof OsApigetOsInstallList
     */
    tags?: string
}


export class ObjectOsApi {
    private api: ObservableOsApi

    public constructor(configuration: Configuration, requestFactory?: OsApiRequestFactory, responseProcessor?: OsApiResponseProcessor) {
        this.api = new ObservableOsApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'os.ConfigurationFile' resource.
     * @param param the request object
     */
    public createOsConfigurationFile(param: OsApiCreateOsConfigurationFileRequest, options?: Configuration): Promise<OsConfigurationFile> {
        return this.api.createOsConfigurationFile(param.osConfigurationFile, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'os.Install' resource.
     * @param param the request object
     */
    public createOsInstall(param: OsApiCreateOsInstallRequest, options?: Configuration): Promise<OsInstall> {
        return this.api.createOsInstall(param.osInstall, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'os.OsSupport' resource.
     * @param param the request object
     */
    public createOsOsSupport(param: OsApiCreateOsOsSupportRequest, options?: Configuration): Promise<OsOsSupport> {
        return this.api.createOsOsSupport(param.osOsSupport, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'os.TemplateFile' resource.
     * @param param the request object
     */
    public createOsTemplateFile(param: OsApiCreateOsTemplateFileRequest, options?: Configuration): Promise<OsTemplateFile> {
        return this.api.createOsTemplateFile(param.osTemplateFile, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'os.ConfigurationFile' resource.
     * @param param the request object
     */
    public deleteOsConfigurationFile(param: OsApiDeleteOsConfigurationFileRequest, options?: Configuration): Promise<void> {
        return this.api.deleteOsConfigurationFile(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'os.Catalog' resource.
     * @param param the request object
     */
    public getOsCatalogByMoid(param: OsApiGetOsCatalogByMoidRequest, options?: Configuration): Promise<OsCatalog> {
        return this.api.getOsCatalogByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'os.Catalog' resource.
     * @param param the request object
     */
    public getOsCatalogList(param: OsApiGetOsCatalogListRequest, options?: Configuration): Promise<OsCatalogResponse> {
        return this.api.getOsCatalogList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'os.ConfigurationFile' resource.
     * @param param the request object
     */
    public getOsConfigurationFileByMoid(param: OsApiGetOsConfigurationFileByMoidRequest, options?: Configuration): Promise<OsConfigurationFile> {
        return this.api.getOsConfigurationFileByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'os.ConfigurationFile' resource.
     * @param param the request object
     */
    public getOsConfigurationFileList(param: OsApiGetOsConfigurationFileListRequest, options?: Configuration): Promise<OsConfigurationFileResponse> {
        return this.api.getOsConfigurationFileList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'os.Install' resource.
     * @param param the request object
     */
    public getOsInstallByMoid(param: OsApiGetOsInstallByMoidRequest, options?: Configuration): Promise<OsInstall> {
        return this.api.getOsInstallByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'os.Install' resource.
     * @param param the request object
     */
    public getOsInstallList(param: OsApiGetOsInstallListRequest, options?: Configuration): Promise<OsInstallResponse> {
        return this.api.getOsInstallList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservablePciApi } from "./ObservableAPI";
import { PciApiRequestFactory, PciApiResponseProcessor} from "../apis/PciApi";

export interface PciApiGetPciCoprocessorCardByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApigetPciCoprocessorCardByMoid
     */
    moid: string
}

export interface PciApiGetPciCoprocessorCardListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof PciApigetPciCoprocessorCardList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof PciApigetPciCoprocessorCardList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof PciApigetPciCoprocessorCardList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof PciApigetPciCoprocessorCardList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof PciApigetPciCoprocessorCardList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof PciApigetPciCoprocessorCardList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof PciApigetPciCoprocessorCardList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof PciApigetPciCoprocessorCardList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof PciApigetPciCoprocessorCardList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof PciApigetPciCoprocessorCardList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof PciApigetPciCoprocessorCardList
     */
    tags?: string
}

export interface PciApiGetPciDeviceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApigetPciDeviceByMoid
     */
    moid: string
}

export interface PciApiGetPciDeviceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof PciApigetPciDeviceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof PciApigetPciDeviceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof PciApigetPciDeviceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof PciApigetPciDeviceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof PciApigetPciDeviceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof PciApigetPciDeviceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof PciApigetPciDeviceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof PciApigetPciDeviceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof PciApigetPciDeviceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof PciApigetPciDeviceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof PciApigetPciDeviceList
     */
    tags?: string
}

export interface PciApiGetPciLinkByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApigetPciLinkByMoid
     */
    moid: string
}

export interface PciApiGetPciLinkListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof PciApigetPciLinkList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof PciApigetPciLinkList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof PciApigetPciLinkList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof PciApigetPciLinkList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof PciApigetPciLinkList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof PciApigetPciLinkList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof PciApigetPciLinkList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof PciApigetPciLinkList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof PciApigetPciLinkList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof PciApigetPciLinkList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof PciApigetPciLinkList
     */
    tags?: string
}

export interface PciApiGetPciSwitchByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApigetPciSwitchByMoid
     */
    moid: string
}

export interface PciApiGetPciSwitchListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof PciApigetPciSwitchList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof PciApigetPciSwitchList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof PciApigetPciSwitchList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof PciApigetPciSwitchList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof PciApigetPciSwitchList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof PciApigetPciSwitchList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof PciApigetPciSwitchList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof PciApigetPciSwitchList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof PciApigetPciSwitchList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof PciApigetPciSwitchList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof PciApigetPciSwitchList
     */
    tags?: string
}

export interface PciApiPatchPciDeviceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApipatchPciDevice
     */
    moid: string
    /**
     * The &#39;pci.Device&#39; resource to update.
     * @type PciDevice
     * @memberof PciApipatchPciDevice
     */
    pciDevice: PciDevice
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PciApipatchPciDevice
     */
    ifMatch?: string
}

export interface PciApiPatchPciLinkRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApipatchPciLink
     */
    moid: string
    /**
     * The &#39;pci.Link&#39; resource to update.
     * @type PciLink
     * @memberof PciApipatchPciLink
     */
    pciLink: PciLink
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PciApipatchPciLink
     */
    ifMatch?: string
}

export interface PciApiPatchPciSwitchRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApipatchPciSwitch
     */
    moid: string
    /**
     * The &#39;pci.Switch&#39; resource to update.
     * @type PciSwitch
     * @memberof PciApipatchPciSwitch
     */
    pciSwitch: PciSwitch
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PciApipatchPciSwitch
     */
    ifMatch?: string
}

export interface PciApiUpdatePciDeviceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApiupdatePciDevice
     */
    moid: string
    /**
     * The &#39;pci.Device&#39; resource to update.
     * @type PciDevice
     * @memberof PciApiupdatePciDevice
     */
    pciDevice: PciDevice
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PciApiupdatePciDevice
     */
    ifMatch?: string
}

export interface PciApiUpdatePciLinkRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApiupdatePciLink
     */
    moid: string
    /**
     * The &#39;pci.Link&#39; resource to update.
     * @type PciLink
     * @memberof PciApiupdatePciLink
     */
    pciLink: PciLink
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PciApiupdatePciLink
     */
    ifMatch?: string
}

export interface PciApiUpdatePciSwitchRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PciApiupdatePciSwitch
     */
    moid: string
    /**
     * The &#39;pci.Switch&#39; resource to update.
     * @type PciSwitch
     * @memberof PciApiupdatePciSwitch
     */
    pciSwitch: PciSwitch
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PciApiupdatePciSwitch
     */
    ifMatch?: string
}


export class ObjectPciApi {
    private api: ObservablePciApi

    public constructor(configuration: Configuration, requestFactory?: PciApiRequestFactory, responseProcessor?: PciApiResponseProcessor) {
        this.api = new ObservablePciApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'pci.CoprocessorCard' resource.
     * @param param the request object
     */
    public getPciCoprocessorCardByMoid(param: PciApiGetPciCoprocessorCardByMoidRequest, options?: Configuration): Promise<PciCoprocessorCard> {
        return this.api.getPciCoprocessorCardByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'pci.CoprocessorCard' resource.
     * @param param the request object
     */
    public getPciCoprocessorCardList(param: PciApiGetPciCoprocessorCardListRequest, options?: Configuration): Promise<PciCoprocessorCardResponse> {
        return this.api.getPciCoprocessorCardList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'pci.Device' resource.
     * @param param the request object
     */
    public getPciDeviceByMoid(param: PciApiGetPciDeviceByMoidRequest, options?: Configuration): Promise<PciDevice> {
        return this.api.getPciDeviceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'pci.Device' resource.
     * @param param the request object
     */
    public getPciDeviceList(param: PciApiGetPciDeviceListRequest, options?: Configuration): Promise<PciDeviceResponse> {
        return this.api.getPciDeviceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'pci.Link' resource.
     * @param param the request object
     */
    public getPciLinkByMoid(param: PciApiGetPciLinkByMoidRequest, options?: Configuration): Promise<PciLink> {
        return this.api.getPciLinkByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'pci.Link' resource.
     * @param param the request object
     */
    public getPciLinkList(param: PciApiGetPciLinkListRequest, options?: Configuration): Promise<PciLinkResponse> {
        return this.api.getPciLinkList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'pci.Switch' resource.
     * @param param the request object
     */
    public getPciSwitchByMoid(param: PciApiGetPciSwitchByMoidRequest, options?: Configuration): Promise<PciSwitch> {
        return this.api.getPciSwitchByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'pci.Switch' resource.
     * @param param the request object
     */
    public getPciSwitchList(param: PciApiGetPciSwitchListRequest, options?: Configuration): Promise<PciSwitchResponse> {
        return this.api.getPciSwitchList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'pci.Device' resource.
     * @param param the request object
     */
    public patchPciDevice(param: PciApiPatchPciDeviceRequest, options?: Configuration): Promise<PciDevice> {
        return this.api.patchPciDevice(param.moid, param.pciDevice, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'pci.Link' resource.
     * @param param the request object
     */
    public patchPciLink(param: PciApiPatchPciLinkRequest, options?: Configuration): Promise<PciLink> {
        return this.api.patchPciLink(param.moid, param.pciLink, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'pci.Switch' resource.
     * @param param the request object
     */
    public patchPciSwitch(param: PciApiPatchPciSwitchRequest, options?: Configuration): Promise<PciSwitch> {
        return this.api.patchPciSwitch(param.moid, param.pciSwitch, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'pci.Device' resource.
     * @param param the request object
     */
    public updatePciDevice(param: PciApiUpdatePciDeviceRequest, options?: Configuration): Promise<PciDevice> {
        return this.api.updatePciDevice(param.moid, param.pciDevice, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'pci.Link' resource.
     * @param param the request object
     */
    public updatePciLink(param: PciApiUpdatePciLinkRequest, options?: Configuration): Promise<PciLink> {
        return this.api.updatePciLink(param.moid, param.pciLink, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'pci.Switch' resource.
     * @param param the request object
     */
    public updatePciSwitch(param: PciApiUpdatePciSwitchRequest, options?: Configuration): Promise<PciSwitch> {
        return this.api.updatePciSwitch(param.moid, param.pciSwitch, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservablePortApi } from "./ObservableAPI";
import { PortApiRequestFactory, PortApiResponseProcessor} from "../apis/PortApi";

export interface PortApiGetPortGroupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PortApigetPortGroupByMoid
     */
    moid: string
}

export interface PortApiGetPortGroupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof PortApigetPortGroupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof PortApigetPortGroupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof PortApigetPortGroupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof PortApigetPortGroupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof PortApigetPortGroupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof PortApigetPortGroupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof PortApigetPortGroupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof PortApigetPortGroupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof PortApigetPortGroupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof PortApigetPortGroupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof PortApigetPortGroupList
     */
    tags?: string
}

export interface PortApiGetPortSubGroupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PortApigetPortSubGroupByMoid
     */
    moid: string
}

export interface PortApiGetPortSubGroupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof PortApigetPortSubGroupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof PortApigetPortSubGroupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof PortApigetPortSubGroupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof PortApigetPortSubGroupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof PortApigetPortSubGroupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof PortApigetPortSubGroupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof PortApigetPortSubGroupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof PortApigetPortSubGroupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof PortApigetPortSubGroupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof PortApigetPortSubGroupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof PortApigetPortSubGroupList
     */
    tags?: string
}

export interface PortApiPatchPortGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PortApipatchPortGroup
     */
    moid: string
    /**
     * The &#39;port.Group&#39; resource to update.
     * @type PortGroup
     * @memberof PortApipatchPortGroup
     */
    portGroup: PortGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PortApipatchPortGroup
     */
    ifMatch?: string
}

export interface PortApiPatchPortSubGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PortApipatchPortSubGroup
     */
    moid: string
    /**
     * The &#39;port.SubGroup&#39; resource to update.
     * @type PortSubGroup
     * @memberof PortApipatchPortSubGroup
     */
    portSubGroup: PortSubGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PortApipatchPortSubGroup
     */
    ifMatch?: string
}

export interface PortApiUpdatePortGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PortApiupdatePortGroup
     */
    moid: string
    /**
     * The &#39;port.Group&#39; resource to update.
     * @type PortGroup
     * @memberof PortApiupdatePortGroup
     */
    portGroup: PortGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PortApiupdatePortGroup
     */
    ifMatch?: string
}

export interface PortApiUpdatePortSubGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof PortApiupdatePortSubGroup
     */
    moid: string
    /**
     * The &#39;port.SubGroup&#39; resource to update.
     * @type PortSubGroup
     * @memberof PortApiupdatePortSubGroup
     */
    portSubGroup: PortSubGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof PortApiupdatePortSubGroup
     */
    ifMatch?: string
}


export class ObjectPortApi {
    private api: ObservablePortApi

    public constructor(configuration: Configuration, requestFactory?: PortApiRequestFactory, responseProcessor?: PortApiResponseProcessor) {
        this.api = new ObservablePortApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'port.Group' resource.
     * @param param the request object
     */
    public getPortGroupByMoid(param: PortApiGetPortGroupByMoidRequest, options?: Configuration): Promise<PortGroup> {
        return this.api.getPortGroupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'port.Group' resource.
     * @param param the request object
     */
    public getPortGroupList(param: PortApiGetPortGroupListRequest, options?: Configuration): Promise<PortGroupResponse> {
        return this.api.getPortGroupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'port.SubGroup' resource.
     * @param param the request object
     */
    public getPortSubGroupByMoid(param: PortApiGetPortSubGroupByMoidRequest, options?: Configuration): Promise<PortSubGroup> {
        return this.api.getPortSubGroupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'port.SubGroup' resource.
     * @param param the request object
     */
    public getPortSubGroupList(param: PortApiGetPortSubGroupListRequest, options?: Configuration): Promise<PortSubGroupResponse> {
        return this.api.getPortSubGroupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'port.Group' resource.
     * @param param the request object
     */
    public patchPortGroup(param: PortApiPatchPortGroupRequest, options?: Configuration): Promise<PortGroup> {
        return this.api.patchPortGroup(param.moid, param.portGroup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'port.SubGroup' resource.
     * @param param the request object
     */
    public patchPortSubGroup(param: PortApiPatchPortSubGroupRequest, options?: Configuration): Promise<PortSubGroup> {
        return this.api.patchPortSubGroup(param.moid, param.portSubGroup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'port.Group' resource.
     * @param param the request object
     */
    public updatePortGroup(param: PortApiUpdatePortGroupRequest, options?: Configuration): Promise<PortGroup> {
        return this.api.updatePortGroup(param.moid, param.portGroup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'port.SubGroup' resource.
     * @param param the request object
     */
    public updatePortSubGroup(param: PortApiUpdatePortSubGroupRequest, options?: Configuration): Promise<PortSubGroup> {
        return this.api.updatePortSubGroup(param.moid, param.portSubGroup, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableProcessorApi } from "./ObservableAPI";
import { ProcessorApiRequestFactory, ProcessorApiResponseProcessor} from "../apis/ProcessorApi";

export interface ProcessorApiGetProcessorUnitByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ProcessorApigetProcessorUnitByMoid
     */
    moid: string
}

export interface ProcessorApiGetProcessorUnitListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ProcessorApigetProcessorUnitList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ProcessorApigetProcessorUnitList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ProcessorApigetProcessorUnitList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ProcessorApigetProcessorUnitList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ProcessorApigetProcessorUnitList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ProcessorApigetProcessorUnitList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ProcessorApigetProcessorUnitList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ProcessorApigetProcessorUnitList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ProcessorApigetProcessorUnitList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ProcessorApigetProcessorUnitList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ProcessorApigetProcessorUnitList
     */
    tags?: string
}

export interface ProcessorApiPatchProcessorUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ProcessorApipatchProcessorUnit
     */
    moid: string
    /**
     * The &#39;processor.Unit&#39; resource to update.
     * @type ProcessorUnit
     * @memberof ProcessorApipatchProcessorUnit
     */
    processorUnit: ProcessorUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ProcessorApipatchProcessorUnit
     */
    ifMatch?: string
}

export interface ProcessorApiUpdateProcessorUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ProcessorApiupdateProcessorUnit
     */
    moid: string
    /**
     * The &#39;processor.Unit&#39; resource to update.
     * @type ProcessorUnit
     * @memberof ProcessorApiupdateProcessorUnit
     */
    processorUnit: ProcessorUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ProcessorApiupdateProcessorUnit
     */
    ifMatch?: string
}


export class ObjectProcessorApi {
    private api: ObservableProcessorApi

    public constructor(configuration: Configuration, requestFactory?: ProcessorApiRequestFactory, responseProcessor?: ProcessorApiResponseProcessor) {
        this.api = new ObservableProcessorApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'processor.Unit' resource.
     * @param param the request object
     */
    public getProcessorUnitByMoid(param: ProcessorApiGetProcessorUnitByMoidRequest, options?: Configuration): Promise<ProcessorUnit> {
        return this.api.getProcessorUnitByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'processor.Unit' resource.
     * @param param the request object
     */
    public getProcessorUnitList(param: ProcessorApiGetProcessorUnitListRequest, options?: Configuration): Promise<ProcessorUnitResponse> {
        return this.api.getProcessorUnitList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'processor.Unit' resource.
     * @param param the request object
     */
    public patchProcessorUnit(param: ProcessorApiPatchProcessorUnitRequest, options?: Configuration): Promise<ProcessorUnit> {
        return this.api.patchProcessorUnit(param.moid, param.processorUnit, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'processor.Unit' resource.
     * @param param the request object
     */
    public updateProcessorUnit(param: ProcessorApiUpdateProcessorUnitRequest, options?: Configuration): Promise<ProcessorUnit> {
        return this.api.updateProcessorUnit(param.moid, param.processorUnit, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableRecoveryApi } from "./ObservableAPI";
import { RecoveryApiRequestFactory, RecoveryApiResponseProcessor} from "../apis/RecoveryApi";

export interface RecoveryApiCreateRecoveryBackupConfigPolicyRequest {
    /**
     * The &#39;recovery.BackupConfigPolicy&#39; resource to create.
     * @type RecoveryBackupConfigPolicy
     * @memberof RecoveryApicreateRecoveryBackupConfigPolicy
     */
    recoveryBackupConfigPolicy: RecoveryBackupConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApicreateRecoveryBackupConfigPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof RecoveryApicreateRecoveryBackupConfigPolicy
     */
    ifNoneMatch?: string
}

export interface RecoveryApiCreateRecoveryBackupProfileRequest {
    /**
     * The &#39;recovery.BackupProfile&#39; resource to create.
     * @type RecoveryBackupProfile
     * @memberof RecoveryApicreateRecoveryBackupProfile
     */
    recoveryBackupProfile: RecoveryBackupProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApicreateRecoveryBackupProfile
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof RecoveryApicreateRecoveryBackupProfile
     */
    ifNoneMatch?: string
}

export interface RecoveryApiCreateRecoveryOnDemandBackupRequest {
    /**
     * The &#39;recovery.OnDemandBackup&#39; resource to create.
     * @type RecoveryOnDemandBackup
     * @memberof RecoveryApicreateRecoveryOnDemandBackup
     */
    recoveryOnDemandBackup: RecoveryOnDemandBackup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApicreateRecoveryOnDemandBackup
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof RecoveryApicreateRecoveryOnDemandBackup
     */
    ifNoneMatch?: string
}

export interface RecoveryApiCreateRecoveryRestoreRequest {
    /**
     * The &#39;recovery.Restore&#39; resource to create.
     * @type RecoveryRestore
     * @memberof RecoveryApicreateRecoveryRestore
     */
    recoveryRestore: RecoveryRestore
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApicreateRecoveryRestore
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof RecoveryApicreateRecoveryRestore
     */
    ifNoneMatch?: string
}

export interface RecoveryApiCreateRecoveryScheduleConfigPolicyRequest {
    /**
     * The &#39;recovery.ScheduleConfigPolicy&#39; resource to create.
     * @type RecoveryScheduleConfigPolicy
     * @memberof RecoveryApicreateRecoveryScheduleConfigPolicy
     */
    recoveryScheduleConfigPolicy: RecoveryScheduleConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApicreateRecoveryScheduleConfigPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof RecoveryApicreateRecoveryScheduleConfigPolicy
     */
    ifNoneMatch?: string
}

export interface RecoveryApiDeleteRecoveryBackupConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApideleteRecoveryBackupConfigPolicy
     */
    moid: string
}

export interface RecoveryApiDeleteRecoveryBackupProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApideleteRecoveryBackupProfile
     */
    moid: string
}

export interface RecoveryApiDeleteRecoveryOnDemandBackupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApideleteRecoveryOnDemandBackup
     */
    moid: string
}

export interface RecoveryApiDeleteRecoveryRestoreRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApideleteRecoveryRestore
     */
    moid: string
}

export interface RecoveryApiDeleteRecoveryScheduleConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApideleteRecoveryScheduleConfigPolicy
     */
    moid: string
}

export interface RecoveryApiGetRecoveryBackupConfigPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyByMoid
     */
    moid: string
}

export interface RecoveryApiGetRecoveryBackupConfigPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupConfigPolicyList
     */
    tags?: string
}

export interface RecoveryApiGetRecoveryBackupProfileByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupProfileByMoid
     */
    moid: string
}

export interface RecoveryApiGetRecoveryBackupProfileListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof RecoveryApigetRecoveryBackupProfileList
     */
    tags?: string
}

export interface RecoveryApiGetRecoveryConfigResultByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultByMoid
     */
    moid: string
}

export interface RecoveryApiGetRecoveryConfigResultEntryByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultEntryByMoid
     */
    moid: string
}

export interface RecoveryApiGetRecoveryConfigResultEntryListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultEntryList
     */
    tags?: string
}

export interface RecoveryApiGetRecoveryConfigResultListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof RecoveryApigetRecoveryConfigResultList
     */
    tags?: string
}

export interface RecoveryApiGetRecoveryOnDemandBackupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApigetRecoveryOnDemandBackupByMoid
     */
    moid: string
}

export interface RecoveryApiGetRecoveryOnDemandBackupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof RecoveryApigetRecoveryOnDemandBackupList
     */
    tags?: string
}

export interface RecoveryApiGetRecoveryRestoreByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApigetRecoveryRestoreByMoid
     */
    moid: string
}

export interface RecoveryApiGetRecoveryRestoreListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof RecoveryApigetRecoveryRestoreList
     */
    tags?: string
}

export interface RecoveryApiGetRecoveryScheduleConfigPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyByMoid
     */
    moid: string
}

export interface RecoveryApiGetRecoveryScheduleConfigPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof RecoveryApigetRecoveryScheduleConfigPolicyList
     */
    tags?: string
}

export interface RecoveryApiPatchRecoveryBackupConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApipatchRecoveryBackupConfigPolicy
     */
    moid: string
    /**
     * The &#39;recovery.BackupConfigPolicy&#39; resource to update.
     * @type RecoveryBackupConfigPolicy
     * @memberof RecoveryApipatchRecoveryBackupConfigPolicy
     */
    recoveryBackupConfigPolicy: RecoveryBackupConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApipatchRecoveryBackupConfigPolicy
     */
    ifMatch?: string
}

export interface RecoveryApiPatchRecoveryBackupProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApipatchRecoveryBackupProfile
     */
    moid: string
    /**
     * The &#39;recovery.BackupProfile&#39; resource to update.
     * @type RecoveryBackupProfile
     * @memberof RecoveryApipatchRecoveryBackupProfile
     */
    recoveryBackupProfile: RecoveryBackupProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApipatchRecoveryBackupProfile
     */
    ifMatch?: string
}

export interface RecoveryApiPatchRecoveryOnDemandBackupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApipatchRecoveryOnDemandBackup
     */
    moid: string
    /**
     * The &#39;recovery.OnDemandBackup&#39; resource to update.
     * @type RecoveryOnDemandBackup
     * @memberof RecoveryApipatchRecoveryOnDemandBackup
     */
    recoveryOnDemandBackup: RecoveryOnDemandBackup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApipatchRecoveryOnDemandBackup
     */
    ifMatch?: string
}

export interface RecoveryApiPatchRecoveryScheduleConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApipatchRecoveryScheduleConfigPolicy
     */
    moid: string
    /**
     * The &#39;recovery.ScheduleConfigPolicy&#39; resource to update.
     * @type RecoveryScheduleConfigPolicy
     * @memberof RecoveryApipatchRecoveryScheduleConfigPolicy
     */
    recoveryScheduleConfigPolicy: RecoveryScheduleConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApipatchRecoveryScheduleConfigPolicy
     */
    ifMatch?: string
}

export interface RecoveryApiUpdateRecoveryBackupConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApiupdateRecoveryBackupConfigPolicy
     */
    moid: string
    /**
     * The &#39;recovery.BackupConfigPolicy&#39; resource to update.
     * @type RecoveryBackupConfigPolicy
     * @memberof RecoveryApiupdateRecoveryBackupConfigPolicy
     */
    recoveryBackupConfigPolicy: RecoveryBackupConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApiupdateRecoveryBackupConfigPolicy
     */
    ifMatch?: string
}

export interface RecoveryApiUpdateRecoveryBackupProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApiupdateRecoveryBackupProfile
     */
    moid: string
    /**
     * The &#39;recovery.BackupProfile&#39; resource to update.
     * @type RecoveryBackupProfile
     * @memberof RecoveryApiupdateRecoveryBackupProfile
     */
    recoveryBackupProfile: RecoveryBackupProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApiupdateRecoveryBackupProfile
     */
    ifMatch?: string
}

export interface RecoveryApiUpdateRecoveryOnDemandBackupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApiupdateRecoveryOnDemandBackup
     */
    moid: string
    /**
     * The &#39;recovery.OnDemandBackup&#39; resource to update.
     * @type RecoveryOnDemandBackup
     * @memberof RecoveryApiupdateRecoveryOnDemandBackup
     */
    recoveryOnDemandBackup: RecoveryOnDemandBackup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApiupdateRecoveryOnDemandBackup
     */
    ifMatch?: string
}

export interface RecoveryApiUpdateRecoveryScheduleConfigPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof RecoveryApiupdateRecoveryScheduleConfigPolicy
     */
    moid: string
    /**
     * The &#39;recovery.ScheduleConfigPolicy&#39; resource to update.
     * @type RecoveryScheduleConfigPolicy
     * @memberof RecoveryApiupdateRecoveryScheduleConfigPolicy
     */
    recoveryScheduleConfigPolicy: RecoveryScheduleConfigPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof RecoveryApiupdateRecoveryScheduleConfigPolicy
     */
    ifMatch?: string
}


export class ObjectRecoveryApi {
    private api: ObservableRecoveryApi

    public constructor(configuration: Configuration, requestFactory?: RecoveryApiRequestFactory, responseProcessor?: RecoveryApiResponseProcessor) {
        this.api = new ObservableRecoveryApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'recovery.BackupConfigPolicy' resource.
     * @param param the request object
     */
    public createRecoveryBackupConfigPolicy(param: RecoveryApiCreateRecoveryBackupConfigPolicyRequest, options?: Configuration): Promise<RecoveryBackupConfigPolicy> {
        return this.api.createRecoveryBackupConfigPolicy(param.recoveryBackupConfigPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'recovery.BackupProfile' resource.
     * @param param the request object
     */
    public createRecoveryBackupProfile(param: RecoveryApiCreateRecoveryBackupProfileRequest, options?: Configuration): Promise<RecoveryBackupProfile> {
        return this.api.createRecoveryBackupProfile(param.recoveryBackupProfile, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'recovery.OnDemandBackup' resource.
     * @param param the request object
     */
    public createRecoveryOnDemandBackup(param: RecoveryApiCreateRecoveryOnDemandBackupRequest, options?: Configuration): Promise<RecoveryOnDemandBackup> {
        return this.api.createRecoveryOnDemandBackup(param.recoveryOnDemandBackup, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'recovery.Restore' resource.
     * @param param the request object
     */
    public createRecoveryRestore(param: RecoveryApiCreateRecoveryRestoreRequest, options?: Configuration): Promise<RecoveryRestore> {
        return this.api.createRecoveryRestore(param.recoveryRestore, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'recovery.ScheduleConfigPolicy' resource.
     * @param param the request object
     */
    public createRecoveryScheduleConfigPolicy(param: RecoveryApiCreateRecoveryScheduleConfigPolicyRequest, options?: Configuration): Promise<RecoveryScheduleConfigPolicy> {
        return this.api.createRecoveryScheduleConfigPolicy(param.recoveryScheduleConfigPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'recovery.BackupConfigPolicy' resource.
     * @param param the request object
     */
    public deleteRecoveryBackupConfigPolicy(param: RecoveryApiDeleteRecoveryBackupConfigPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteRecoveryBackupConfigPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'recovery.BackupProfile' resource.
     * @param param the request object
     */
    public deleteRecoveryBackupProfile(param: RecoveryApiDeleteRecoveryBackupProfileRequest, options?: Configuration): Promise<void> {
        return this.api.deleteRecoveryBackupProfile(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'recovery.OnDemandBackup' resource.
     * @param param the request object
     */
    public deleteRecoveryOnDemandBackup(param: RecoveryApiDeleteRecoveryOnDemandBackupRequest, options?: Configuration): Promise<void> {
        return this.api.deleteRecoveryOnDemandBackup(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'recovery.Restore' resource.
     * @param param the request object
     */
    public deleteRecoveryRestore(param: RecoveryApiDeleteRecoveryRestoreRequest, options?: Configuration): Promise<void> {
        return this.api.deleteRecoveryRestore(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'recovery.ScheduleConfigPolicy' resource.
     * @param param the request object
     */
    public deleteRecoveryScheduleConfigPolicy(param: RecoveryApiDeleteRecoveryScheduleConfigPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteRecoveryScheduleConfigPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.BackupConfigPolicy' resource.
     * @param param the request object
     */
    public getRecoveryBackupConfigPolicyByMoid(param: RecoveryApiGetRecoveryBackupConfigPolicyByMoidRequest, options?: Configuration): Promise<RecoveryBackupConfigPolicy> {
        return this.api.getRecoveryBackupConfigPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.BackupConfigPolicy' resource.
     * @param param the request object
     */
    public getRecoveryBackupConfigPolicyList(param: RecoveryApiGetRecoveryBackupConfigPolicyListRequest, options?: Configuration): Promise<RecoveryBackupConfigPolicyResponse> {
        return this.api.getRecoveryBackupConfigPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.BackupProfile' resource.
     * @param param the request object
     */
    public getRecoveryBackupProfileByMoid(param: RecoveryApiGetRecoveryBackupProfileByMoidRequest, options?: Configuration): Promise<RecoveryBackupProfile> {
        return this.api.getRecoveryBackupProfileByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.BackupProfile' resource.
     * @param param the request object
     */
    public getRecoveryBackupProfileList(param: RecoveryApiGetRecoveryBackupProfileListRequest, options?: Configuration): Promise<RecoveryBackupProfileResponse> {
        return this.api.getRecoveryBackupProfileList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.ConfigResult' resource.
     * @param param the request object
     */
    public getRecoveryConfigResultByMoid(param: RecoveryApiGetRecoveryConfigResultByMoidRequest, options?: Configuration): Promise<RecoveryConfigResult> {
        return this.api.getRecoveryConfigResultByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.ConfigResultEntry' resource.
     * @param param the request object
     */
    public getRecoveryConfigResultEntryByMoid(param: RecoveryApiGetRecoveryConfigResultEntryByMoidRequest, options?: Configuration): Promise<RecoveryConfigResultEntry> {
        return this.api.getRecoveryConfigResultEntryByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.ConfigResultEntry' resource.
     * @param param the request object
     */
    public getRecoveryConfigResultEntryList(param: RecoveryApiGetRecoveryConfigResultEntryListRequest, options?: Configuration): Promise<RecoveryConfigResultEntryResponse> {
        return this.api.getRecoveryConfigResultEntryList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.ConfigResult' resource.
     * @param param the request object
     */
    public getRecoveryConfigResultList(param: RecoveryApiGetRecoveryConfigResultListRequest, options?: Configuration): Promise<RecoveryConfigResultResponse> {
        return this.api.getRecoveryConfigResultList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.OnDemandBackup' resource.
     * @param param the request object
     */
    public getRecoveryOnDemandBackupByMoid(param: RecoveryApiGetRecoveryOnDemandBackupByMoidRequest, options?: Configuration): Promise<RecoveryOnDemandBackup> {
        return this.api.getRecoveryOnDemandBackupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.OnDemandBackup' resource.
     * @param param the request object
     */
    public getRecoveryOnDemandBackupList(param: RecoveryApiGetRecoveryOnDemandBackupListRequest, options?: Configuration): Promise<RecoveryOnDemandBackupResponse> {
        return this.api.getRecoveryOnDemandBackupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.Restore' resource.
     * @param param the request object
     */
    public getRecoveryRestoreByMoid(param: RecoveryApiGetRecoveryRestoreByMoidRequest, options?: Configuration): Promise<RecoveryRestore> {
        return this.api.getRecoveryRestoreByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.Restore' resource.
     * @param param the request object
     */
    public getRecoveryRestoreList(param: RecoveryApiGetRecoveryRestoreListRequest, options?: Configuration): Promise<RecoveryRestoreResponse> {
        return this.api.getRecoveryRestoreList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.ScheduleConfigPolicy' resource.
     * @param param the request object
     */
    public getRecoveryScheduleConfigPolicyByMoid(param: RecoveryApiGetRecoveryScheduleConfigPolicyByMoidRequest, options?: Configuration): Promise<RecoveryScheduleConfigPolicy> {
        return this.api.getRecoveryScheduleConfigPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'recovery.ScheduleConfigPolicy' resource.
     * @param param the request object
     */
    public getRecoveryScheduleConfigPolicyList(param: RecoveryApiGetRecoveryScheduleConfigPolicyListRequest, options?: Configuration): Promise<RecoveryScheduleConfigPolicyResponse> {
        return this.api.getRecoveryScheduleConfigPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'recovery.BackupConfigPolicy' resource.
     * @param param the request object
     */
    public patchRecoveryBackupConfigPolicy(param: RecoveryApiPatchRecoveryBackupConfigPolicyRequest, options?: Configuration): Promise<RecoveryBackupConfigPolicy> {
        return this.api.patchRecoveryBackupConfigPolicy(param.moid, param.recoveryBackupConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'recovery.BackupProfile' resource.
     * @param param the request object
     */
    public patchRecoveryBackupProfile(param: RecoveryApiPatchRecoveryBackupProfileRequest, options?: Configuration): Promise<RecoveryBackupProfile> {
        return this.api.patchRecoveryBackupProfile(param.moid, param.recoveryBackupProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'recovery.OnDemandBackup' resource.
     * @param param the request object
     */
    public patchRecoveryOnDemandBackup(param: RecoveryApiPatchRecoveryOnDemandBackupRequest, options?: Configuration): Promise<RecoveryOnDemandBackup> {
        return this.api.patchRecoveryOnDemandBackup(param.moid, param.recoveryOnDemandBackup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'recovery.ScheduleConfigPolicy' resource.
     * @param param the request object
     */
    public patchRecoveryScheduleConfigPolicy(param: RecoveryApiPatchRecoveryScheduleConfigPolicyRequest, options?: Configuration): Promise<RecoveryScheduleConfigPolicy> {
        return this.api.patchRecoveryScheduleConfigPolicy(param.moid, param.recoveryScheduleConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'recovery.BackupConfigPolicy' resource.
     * @param param the request object
     */
    public updateRecoveryBackupConfigPolicy(param: RecoveryApiUpdateRecoveryBackupConfigPolicyRequest, options?: Configuration): Promise<RecoveryBackupConfigPolicy> {
        return this.api.updateRecoveryBackupConfigPolicy(param.moid, param.recoveryBackupConfigPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'recovery.BackupProfile' resource.
     * @param param the request object
     */
    public updateRecoveryBackupProfile(param: RecoveryApiUpdateRecoveryBackupProfileRequest, options?: Configuration): Promise<RecoveryBackupProfile> {
        return this.api.updateRecoveryBackupProfile(param.moid, param.recoveryBackupProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'recovery.OnDemandBackup' resource.
     * @param param the request object
     */
    public updateRecoveryOnDemandBackup(param: RecoveryApiUpdateRecoveryOnDemandBackupRequest, options?: Configuration): Promise<RecoveryOnDemandBackup> {
        return this.api.updateRecoveryOnDemandBackup(param.moid, param.recoveryOnDemandBackup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'recovery.ScheduleConfigPolicy' resource.
     * @param param the request object
     */
    public updateRecoveryScheduleConfigPolicy(param: RecoveryApiUpdateRecoveryScheduleConfigPolicyRequest, options?: Configuration): Promise<RecoveryScheduleConfigPolicy> {
        return this.api.updateRecoveryScheduleConfigPolicy(param.moid, param.recoveryScheduleConfigPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableResourceApi } from "./ObservableAPI";
import { ResourceApiRequestFactory, ResourceApiResponseProcessor} from "../apis/ResourceApi";

export interface ResourceApiCreateResourceGroupRequest {
    /**
     * The &#39;resource.Group&#39; resource to create.
     * @type ResourceGroup
     * @memberof ResourceApicreateResourceGroup
     */
    resourceGroup: ResourceGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ResourceApicreateResourceGroup
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ResourceApicreateResourceGroup
     */
    ifNoneMatch?: string
}

export interface ResourceApiDeleteResourceGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ResourceApideleteResourceGroup
     */
    moid: string
}

export interface ResourceApiGetResourceGroupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ResourceApigetResourceGroupByMoid
     */
    moid: string
}

export interface ResourceApiGetResourceGroupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ResourceApigetResourceGroupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ResourceApigetResourceGroupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ResourceApigetResourceGroupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ResourceApigetResourceGroupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ResourceApigetResourceGroupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ResourceApigetResourceGroupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ResourceApigetResourceGroupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ResourceApigetResourceGroupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ResourceApigetResourceGroupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ResourceApigetResourceGroupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ResourceApigetResourceGroupList
     */
    tags?: string
}

export interface ResourceApiGetResourceGroupMemberByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ResourceApigetResourceGroupMemberByMoid
     */
    moid: string
}

export interface ResourceApiGetResourceGroupMemberListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ResourceApigetResourceGroupMemberList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ResourceApigetResourceGroupMemberList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ResourceApigetResourceGroupMemberList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ResourceApigetResourceGroupMemberList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ResourceApigetResourceGroupMemberList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ResourceApigetResourceGroupMemberList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ResourceApigetResourceGroupMemberList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ResourceApigetResourceGroupMemberList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ResourceApigetResourceGroupMemberList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ResourceApigetResourceGroupMemberList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ResourceApigetResourceGroupMemberList
     */
    tags?: string
}

export interface ResourceApiGetResourceLicenseResourceCountByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ResourceApigetResourceLicenseResourceCountByMoid
     */
    moid: string
}

export interface ResourceApiGetResourceLicenseResourceCountListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ResourceApigetResourceLicenseResourceCountList
     */
    tags?: string
}

export interface ResourceApiGetResourceMembershipByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ResourceApigetResourceMembershipByMoid
     */
    moid: string
}

export interface ResourceApiGetResourceMembershipHolderByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ResourceApigetResourceMembershipHolderByMoid
     */
    moid: string
}

export interface ResourceApiGetResourceMembershipHolderListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ResourceApigetResourceMembershipHolderList
     */
    tags?: string
}

export interface ResourceApiGetResourceMembershipListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ResourceApigetResourceMembershipList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ResourceApigetResourceMembershipList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ResourceApigetResourceMembershipList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ResourceApigetResourceMembershipList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ResourceApigetResourceMembershipList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ResourceApigetResourceMembershipList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ResourceApigetResourceMembershipList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ResourceApigetResourceMembershipList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ResourceApigetResourceMembershipList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ResourceApigetResourceMembershipList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ResourceApigetResourceMembershipList
     */
    tags?: string
}

export interface ResourceApiPatchResourceGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ResourceApipatchResourceGroup
     */
    moid: string
    /**
     * The &#39;resource.Group&#39; resource to update.
     * @type ResourceGroup
     * @memberof ResourceApipatchResourceGroup
     */
    resourceGroup: ResourceGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ResourceApipatchResourceGroup
     */
    ifMatch?: string
}

export interface ResourceApiUpdateResourceGroupRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ResourceApiupdateResourceGroup
     */
    moid: string
    /**
     * The &#39;resource.Group&#39; resource to update.
     * @type ResourceGroup
     * @memberof ResourceApiupdateResourceGroup
     */
    resourceGroup: ResourceGroup
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ResourceApiupdateResourceGroup
     */
    ifMatch?: string
}


export class ObjectResourceApi {
    private api: ObservableResourceApi

    public constructor(configuration: Configuration, requestFactory?: ResourceApiRequestFactory, responseProcessor?: ResourceApiResponseProcessor) {
        this.api = new ObservableResourceApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'resource.Group' resource.
     * @param param the request object
     */
    public createResourceGroup(param: ResourceApiCreateResourceGroupRequest, options?: Configuration): Promise<ResourceGroup> {
        return this.api.createResourceGroup(param.resourceGroup, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'resource.Group' resource.
     * @param param the request object
     */
    public deleteResourceGroup(param: ResourceApiDeleteResourceGroupRequest, options?: Configuration): Promise<void> {
        return this.api.deleteResourceGroup(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'resource.Group' resource.
     * @param param the request object
     */
    public getResourceGroupByMoid(param: ResourceApiGetResourceGroupByMoidRequest, options?: Configuration): Promise<ResourceGroup> {
        return this.api.getResourceGroupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'resource.Group' resource.
     * @param param the request object
     */
    public getResourceGroupList(param: ResourceApiGetResourceGroupListRequest, options?: Configuration): Promise<ResourceGroupResponse> {
        return this.api.getResourceGroupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'resource.GroupMember' resource.
     * @param param the request object
     */
    public getResourceGroupMemberByMoid(param: ResourceApiGetResourceGroupMemberByMoidRequest, options?: Configuration): Promise<ResourceGroupMember> {
        return this.api.getResourceGroupMemberByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'resource.GroupMember' resource.
     * @param param the request object
     */
    public getResourceGroupMemberList(param: ResourceApiGetResourceGroupMemberListRequest, options?: Configuration): Promise<ResourceGroupMemberResponse> {
        return this.api.getResourceGroupMemberList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'resource.LicenseResourceCount' resource.
     * @param param the request object
     */
    public getResourceLicenseResourceCountByMoid(param: ResourceApiGetResourceLicenseResourceCountByMoidRequest, options?: Configuration): Promise<ResourceLicenseResourceCount> {
        return this.api.getResourceLicenseResourceCountByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'resource.LicenseResourceCount' resource.
     * @param param the request object
     */
    public getResourceLicenseResourceCountList(param: ResourceApiGetResourceLicenseResourceCountListRequest, options?: Configuration): Promise<ResourceLicenseResourceCountResponse> {
        return this.api.getResourceLicenseResourceCountList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'resource.Membership' resource.
     * @param param the request object
     */
    public getResourceMembershipByMoid(param: ResourceApiGetResourceMembershipByMoidRequest, options?: Configuration): Promise<ResourceMembership> {
        return this.api.getResourceMembershipByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'resource.MembershipHolder' resource.
     * @param param the request object
     */
    public getResourceMembershipHolderByMoid(param: ResourceApiGetResourceMembershipHolderByMoidRequest, options?: Configuration): Promise<ResourceMembershipHolder> {
        return this.api.getResourceMembershipHolderByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'resource.MembershipHolder' resource.
     * @param param the request object
     */
    public getResourceMembershipHolderList(param: ResourceApiGetResourceMembershipHolderListRequest, options?: Configuration): Promise<ResourceMembershipHolderResponse> {
        return this.api.getResourceMembershipHolderList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'resource.Membership' resource.
     * @param param the request object
     */
    public getResourceMembershipList(param: ResourceApiGetResourceMembershipListRequest, options?: Configuration): Promise<ResourceMembershipResponse> {
        return this.api.getResourceMembershipList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'resource.Group' resource.
     * @param param the request object
     */
    public patchResourceGroup(param: ResourceApiPatchResourceGroupRequest, options?: Configuration): Promise<ResourceGroup> {
        return this.api.patchResourceGroup(param.moid, param.resourceGroup, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'resource.Group' resource.
     * @param param the request object
     */
    public updateResourceGroup(param: ResourceApiUpdateResourceGroupRequest, options?: Configuration): Promise<ResourceGroup> {
        return this.api.updateResourceGroup(param.moid, param.resourceGroup, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSdcardApi } from "./ObservableAPI";
import { SdcardApiRequestFactory, SdcardApiResponseProcessor} from "../apis/SdcardApi";

export interface SdcardApiCreateSdcardPolicyRequest {
    /**
     * The &#39;sdcard.Policy&#39; resource to create.
     * @type SdcardPolicy
     * @memberof SdcardApicreateSdcardPolicy
     */
    sdcardPolicy: SdcardPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdcardApicreateSdcardPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SdcardApicreateSdcardPolicy
     */
    ifNoneMatch?: string
}

export interface SdcardApiDeleteSdcardPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdcardApideleteSdcardPolicy
     */
    moid: string
}

export interface SdcardApiGetSdcardPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdcardApigetSdcardPolicyByMoid
     */
    moid: string
}

export interface SdcardApiGetSdcardPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SdcardApigetSdcardPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SdcardApigetSdcardPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SdcardApigetSdcardPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SdcardApigetSdcardPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SdcardApigetSdcardPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SdcardApigetSdcardPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SdcardApigetSdcardPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SdcardApigetSdcardPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SdcardApigetSdcardPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SdcardApigetSdcardPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SdcardApigetSdcardPolicyList
     */
    tags?: string
}

export interface SdcardApiPatchSdcardPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdcardApipatchSdcardPolicy
     */
    moid: string
    /**
     * The &#39;sdcard.Policy&#39; resource to update.
     * @type SdcardPolicy
     * @memberof SdcardApipatchSdcardPolicy
     */
    sdcardPolicy: SdcardPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdcardApipatchSdcardPolicy
     */
    ifMatch?: string
}

export interface SdcardApiUpdateSdcardPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdcardApiupdateSdcardPolicy
     */
    moid: string
    /**
     * The &#39;sdcard.Policy&#39; resource to update.
     * @type SdcardPolicy
     * @memberof SdcardApiupdateSdcardPolicy
     */
    sdcardPolicy: SdcardPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdcardApiupdateSdcardPolicy
     */
    ifMatch?: string
}


export class ObjectSdcardApi {
    private api: ObservableSdcardApi

    public constructor(configuration: Configuration, requestFactory?: SdcardApiRequestFactory, responseProcessor?: SdcardApiResponseProcessor) {
        this.api = new ObservableSdcardApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'sdcard.Policy' resource.
     * @param param the request object
     */
    public createSdcardPolicy(param: SdcardApiCreateSdcardPolicyRequest, options?: Configuration): Promise<SdcardPolicy> {
        return this.api.createSdcardPolicy(param.sdcardPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'sdcard.Policy' resource.
     * @param param the request object
     */
    public deleteSdcardPolicy(param: SdcardApiDeleteSdcardPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSdcardPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'sdcard.Policy' resource.
     * @param param the request object
     */
    public getSdcardPolicyByMoid(param: SdcardApiGetSdcardPolicyByMoidRequest, options?: Configuration): Promise<SdcardPolicy> {
        return this.api.getSdcardPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'sdcard.Policy' resource.
     * @param param the request object
     */
    public getSdcardPolicyList(param: SdcardApiGetSdcardPolicyListRequest, options?: Configuration): Promise<SdcardPolicyResponse> {
        return this.api.getSdcardPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'sdcard.Policy' resource.
     * @param param the request object
     */
    public patchSdcardPolicy(param: SdcardApiPatchSdcardPolicyRequest, options?: Configuration): Promise<SdcardPolicy> {
        return this.api.patchSdcardPolicy(param.moid, param.sdcardPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'sdcard.Policy' resource.
     * @param param the request object
     */
    public updateSdcardPolicy(param: SdcardApiUpdateSdcardPolicyRequest, options?: Configuration): Promise<SdcardPolicy> {
        return this.api.updateSdcardPolicy(param.moid, param.sdcardPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSdwanApi } from "./ObservableAPI";
import { SdwanApiRequestFactory, SdwanApiResponseProcessor} from "../apis/SdwanApi";

export interface SdwanApiCreateSdwanProfileRequest {
    /**
     * The &#39;sdwan.Profile&#39; resource to create.
     * @type SdwanProfile
     * @memberof SdwanApicreateSdwanProfile
     */
    sdwanProfile: SdwanProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApicreateSdwanProfile
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SdwanApicreateSdwanProfile
     */
    ifNoneMatch?: string
}

export interface SdwanApiCreateSdwanRouterNodeRequest {
    /**
     * The &#39;sdwan.RouterNode&#39; resource to create.
     * @type SdwanRouterNode
     * @memberof SdwanApicreateSdwanRouterNode
     */
    sdwanRouterNode: SdwanRouterNode
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApicreateSdwanRouterNode
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SdwanApicreateSdwanRouterNode
     */
    ifNoneMatch?: string
}

export interface SdwanApiCreateSdwanRouterPolicyRequest {
    /**
     * The &#39;sdwan.RouterPolicy&#39; resource to create.
     * @type SdwanRouterPolicy
     * @memberof SdwanApicreateSdwanRouterPolicy
     */
    sdwanRouterPolicy: SdwanRouterPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApicreateSdwanRouterPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SdwanApicreateSdwanRouterPolicy
     */
    ifNoneMatch?: string
}

export interface SdwanApiCreateSdwanVmanageAccountPolicyRequest {
    /**
     * The &#39;sdwan.VmanageAccountPolicy&#39; resource to create.
     * @type SdwanVmanageAccountPolicy
     * @memberof SdwanApicreateSdwanVmanageAccountPolicy
     */
    sdwanVmanageAccountPolicy: SdwanVmanageAccountPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApicreateSdwanVmanageAccountPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SdwanApicreateSdwanVmanageAccountPolicy
     */
    ifNoneMatch?: string
}

export interface SdwanApiDeleteSdwanProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApideleteSdwanProfile
     */
    moid: string
}

export interface SdwanApiDeleteSdwanRouterNodeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApideleteSdwanRouterNode
     */
    moid: string
}

export interface SdwanApiDeleteSdwanRouterPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApideleteSdwanRouterPolicy
     */
    moid: string
}

export interface SdwanApiDeleteSdwanVmanageAccountPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApideleteSdwanVmanageAccountPolicy
     */
    moid: string
}

export interface SdwanApiGetSdwanProfileByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApigetSdwanProfileByMoid
     */
    moid: string
}

export interface SdwanApiGetSdwanProfileListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SdwanApigetSdwanProfileList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SdwanApigetSdwanProfileList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SdwanApigetSdwanProfileList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SdwanApigetSdwanProfileList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SdwanApigetSdwanProfileList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SdwanApigetSdwanProfileList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SdwanApigetSdwanProfileList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SdwanApigetSdwanProfileList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SdwanApigetSdwanProfileList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SdwanApigetSdwanProfileList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SdwanApigetSdwanProfileList
     */
    tags?: string
}

export interface SdwanApiGetSdwanRouterNodeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApigetSdwanRouterNodeByMoid
     */
    moid: string
}

export interface SdwanApiGetSdwanRouterNodeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SdwanApigetSdwanRouterNodeList
     */
    tags?: string
}

export interface SdwanApiGetSdwanRouterPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApigetSdwanRouterPolicyByMoid
     */
    moid: string
}

export interface SdwanApiGetSdwanRouterPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SdwanApigetSdwanRouterPolicyList
     */
    tags?: string
}

export interface SdwanApiGetSdwanVmanageAccountPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApigetSdwanVmanageAccountPolicyByMoid
     */
    moid: string
}

export interface SdwanApiGetSdwanVmanageAccountPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SdwanApigetSdwanVmanageAccountPolicyList
     */
    tags?: string
}

export interface SdwanApiPatchSdwanProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApipatchSdwanProfile
     */
    moid: string
    /**
     * The &#39;sdwan.Profile&#39; resource to update.
     * @type SdwanProfile
     * @memberof SdwanApipatchSdwanProfile
     */
    sdwanProfile: SdwanProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApipatchSdwanProfile
     */
    ifMatch?: string
}

export interface SdwanApiPatchSdwanRouterNodeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApipatchSdwanRouterNode
     */
    moid: string
    /**
     * The &#39;sdwan.RouterNode&#39; resource to update.
     * @type SdwanRouterNode
     * @memberof SdwanApipatchSdwanRouterNode
     */
    sdwanRouterNode: SdwanRouterNode
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApipatchSdwanRouterNode
     */
    ifMatch?: string
}

export interface SdwanApiPatchSdwanRouterPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApipatchSdwanRouterPolicy
     */
    moid: string
    /**
     * The &#39;sdwan.RouterPolicy&#39; resource to update.
     * @type SdwanRouterPolicy
     * @memberof SdwanApipatchSdwanRouterPolicy
     */
    sdwanRouterPolicy: SdwanRouterPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApipatchSdwanRouterPolicy
     */
    ifMatch?: string
}

export interface SdwanApiPatchSdwanVmanageAccountPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApipatchSdwanVmanageAccountPolicy
     */
    moid: string
    /**
     * The &#39;sdwan.VmanageAccountPolicy&#39; resource to update.
     * @type SdwanVmanageAccountPolicy
     * @memberof SdwanApipatchSdwanVmanageAccountPolicy
     */
    sdwanVmanageAccountPolicy: SdwanVmanageAccountPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApipatchSdwanVmanageAccountPolicy
     */
    ifMatch?: string
}

export interface SdwanApiUpdateSdwanProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApiupdateSdwanProfile
     */
    moid: string
    /**
     * The &#39;sdwan.Profile&#39; resource to update.
     * @type SdwanProfile
     * @memberof SdwanApiupdateSdwanProfile
     */
    sdwanProfile: SdwanProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApiupdateSdwanProfile
     */
    ifMatch?: string
}

export interface SdwanApiUpdateSdwanRouterNodeRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApiupdateSdwanRouterNode
     */
    moid: string
    /**
     * The &#39;sdwan.RouterNode&#39; resource to update.
     * @type SdwanRouterNode
     * @memberof SdwanApiupdateSdwanRouterNode
     */
    sdwanRouterNode: SdwanRouterNode
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApiupdateSdwanRouterNode
     */
    ifMatch?: string
}

export interface SdwanApiUpdateSdwanRouterPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApiupdateSdwanRouterPolicy
     */
    moid: string
    /**
     * The &#39;sdwan.RouterPolicy&#39; resource to update.
     * @type SdwanRouterPolicy
     * @memberof SdwanApiupdateSdwanRouterPolicy
     */
    sdwanRouterPolicy: SdwanRouterPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApiupdateSdwanRouterPolicy
     */
    ifMatch?: string
}

export interface SdwanApiUpdateSdwanVmanageAccountPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SdwanApiupdateSdwanVmanageAccountPolicy
     */
    moid: string
    /**
     * The &#39;sdwan.VmanageAccountPolicy&#39; resource to update.
     * @type SdwanVmanageAccountPolicy
     * @memberof SdwanApiupdateSdwanVmanageAccountPolicy
     */
    sdwanVmanageAccountPolicy: SdwanVmanageAccountPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SdwanApiupdateSdwanVmanageAccountPolicy
     */
    ifMatch?: string
}


export class ObjectSdwanApi {
    private api: ObservableSdwanApi

    public constructor(configuration: Configuration, requestFactory?: SdwanApiRequestFactory, responseProcessor?: SdwanApiResponseProcessor) {
        this.api = new ObservableSdwanApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'sdwan.Profile' resource.
     * @param param the request object
     */
    public createSdwanProfile(param: SdwanApiCreateSdwanProfileRequest, options?: Configuration): Promise<SdwanProfile> {
        return this.api.createSdwanProfile(param.sdwanProfile, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'sdwan.RouterNode' resource.
     * @param param the request object
     */
    public createSdwanRouterNode(param: SdwanApiCreateSdwanRouterNodeRequest, options?: Configuration): Promise<SdwanRouterNode> {
        return this.api.createSdwanRouterNode(param.sdwanRouterNode, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'sdwan.RouterPolicy' resource.
     * @param param the request object
     */
    public createSdwanRouterPolicy(param: SdwanApiCreateSdwanRouterPolicyRequest, options?: Configuration): Promise<SdwanRouterPolicy> {
        return this.api.createSdwanRouterPolicy(param.sdwanRouterPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'sdwan.VmanageAccountPolicy' resource.
     * @param param the request object
     */
    public createSdwanVmanageAccountPolicy(param: SdwanApiCreateSdwanVmanageAccountPolicyRequest, options?: Configuration): Promise<SdwanVmanageAccountPolicy> {
        return this.api.createSdwanVmanageAccountPolicy(param.sdwanVmanageAccountPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'sdwan.Profile' resource.
     * @param param the request object
     */
    public deleteSdwanProfile(param: SdwanApiDeleteSdwanProfileRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSdwanProfile(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'sdwan.RouterNode' resource.
     * @param param the request object
     */
    public deleteSdwanRouterNode(param: SdwanApiDeleteSdwanRouterNodeRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSdwanRouterNode(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'sdwan.RouterPolicy' resource.
     * @param param the request object
     */
    public deleteSdwanRouterPolicy(param: SdwanApiDeleteSdwanRouterPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSdwanRouterPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'sdwan.VmanageAccountPolicy' resource.
     * @param param the request object
     */
    public deleteSdwanVmanageAccountPolicy(param: SdwanApiDeleteSdwanVmanageAccountPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSdwanVmanageAccountPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'sdwan.Profile' resource.
     * @param param the request object
     */
    public getSdwanProfileByMoid(param: SdwanApiGetSdwanProfileByMoidRequest, options?: Configuration): Promise<SdwanProfile> {
        return this.api.getSdwanProfileByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'sdwan.Profile' resource.
     * @param param the request object
     */
    public getSdwanProfileList(param: SdwanApiGetSdwanProfileListRequest, options?: Configuration): Promise<SdwanProfileResponse> {
        return this.api.getSdwanProfileList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'sdwan.RouterNode' resource.
     * @param param the request object
     */
    public getSdwanRouterNodeByMoid(param: SdwanApiGetSdwanRouterNodeByMoidRequest, options?: Configuration): Promise<SdwanRouterNode> {
        return this.api.getSdwanRouterNodeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'sdwan.RouterNode' resource.
     * @param param the request object
     */
    public getSdwanRouterNodeList(param: SdwanApiGetSdwanRouterNodeListRequest, options?: Configuration): Promise<SdwanRouterNodeResponse> {
        return this.api.getSdwanRouterNodeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'sdwan.RouterPolicy' resource.
     * @param param the request object
     */
    public getSdwanRouterPolicyByMoid(param: SdwanApiGetSdwanRouterPolicyByMoidRequest, options?: Configuration): Promise<SdwanRouterPolicy> {
        return this.api.getSdwanRouterPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'sdwan.RouterPolicy' resource.
     * @param param the request object
     */
    public getSdwanRouterPolicyList(param: SdwanApiGetSdwanRouterPolicyListRequest, options?: Configuration): Promise<SdwanRouterPolicyResponse> {
        return this.api.getSdwanRouterPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'sdwan.VmanageAccountPolicy' resource.
     * @param param the request object
     */
    public getSdwanVmanageAccountPolicyByMoid(param: SdwanApiGetSdwanVmanageAccountPolicyByMoidRequest, options?: Configuration): Promise<SdwanVmanageAccountPolicy> {
        return this.api.getSdwanVmanageAccountPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'sdwan.VmanageAccountPolicy' resource.
     * @param param the request object
     */
    public getSdwanVmanageAccountPolicyList(param: SdwanApiGetSdwanVmanageAccountPolicyListRequest, options?: Configuration): Promise<SdwanVmanageAccountPolicyResponse> {
        return this.api.getSdwanVmanageAccountPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'sdwan.Profile' resource.
     * @param param the request object
     */
    public patchSdwanProfile(param: SdwanApiPatchSdwanProfileRequest, options?: Configuration): Promise<SdwanProfile> {
        return this.api.patchSdwanProfile(param.moid, param.sdwanProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'sdwan.RouterNode' resource.
     * @param param the request object
     */
    public patchSdwanRouterNode(param: SdwanApiPatchSdwanRouterNodeRequest, options?: Configuration): Promise<SdwanRouterNode> {
        return this.api.patchSdwanRouterNode(param.moid, param.sdwanRouterNode, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'sdwan.RouterPolicy' resource.
     * @param param the request object
     */
    public patchSdwanRouterPolicy(param: SdwanApiPatchSdwanRouterPolicyRequest, options?: Configuration): Promise<SdwanRouterPolicy> {
        return this.api.patchSdwanRouterPolicy(param.moid, param.sdwanRouterPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'sdwan.VmanageAccountPolicy' resource.
     * @param param the request object
     */
    public patchSdwanVmanageAccountPolicy(param: SdwanApiPatchSdwanVmanageAccountPolicyRequest, options?: Configuration): Promise<SdwanVmanageAccountPolicy> {
        return this.api.patchSdwanVmanageAccountPolicy(param.moid, param.sdwanVmanageAccountPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'sdwan.Profile' resource.
     * @param param the request object
     */
    public updateSdwanProfile(param: SdwanApiUpdateSdwanProfileRequest, options?: Configuration): Promise<SdwanProfile> {
        return this.api.updateSdwanProfile(param.moid, param.sdwanProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'sdwan.RouterNode' resource.
     * @param param the request object
     */
    public updateSdwanRouterNode(param: SdwanApiUpdateSdwanRouterNodeRequest, options?: Configuration): Promise<SdwanRouterNode> {
        return this.api.updateSdwanRouterNode(param.moid, param.sdwanRouterNode, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'sdwan.RouterPolicy' resource.
     * @param param the request object
     */
    public updateSdwanRouterPolicy(param: SdwanApiUpdateSdwanRouterPolicyRequest, options?: Configuration): Promise<SdwanRouterPolicy> {
        return this.api.updateSdwanRouterPolicy(param.moid, param.sdwanRouterPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'sdwan.VmanageAccountPolicy' resource.
     * @param param the request object
     */
    public updateSdwanVmanageAccountPolicy(param: SdwanApiUpdateSdwanVmanageAccountPolicyRequest, options?: Configuration): Promise<SdwanVmanageAccountPolicy> {
        return this.api.updateSdwanVmanageAccountPolicy(param.moid, param.sdwanVmanageAccountPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSearchApi } from "./ObservableAPI";
import { SearchApiRequestFactory, SearchApiResponseProcessor} from "../apis/SearchApi";

export interface SearchApiCreateSearchSuggestItemRequest {
    /**
     * The &#39;search.SuggestItem&#39; resource to create.
     * @type SearchSuggestItem
     * @memberof SearchApicreateSearchSuggestItem
     */
    searchSuggestItem: SearchSuggestItem
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SearchApicreateSearchSuggestItem
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SearchApicreateSearchSuggestItem
     */
    ifNoneMatch?: string
}

export interface SearchApiGetSearchSearchItemByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SearchApigetSearchSearchItemByMoid
     */
    moid: string
}

export interface SearchApiGetSearchSearchItemListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SearchApigetSearchSearchItemList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SearchApigetSearchSearchItemList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SearchApigetSearchSearchItemList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SearchApigetSearchSearchItemList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SearchApigetSearchSearchItemList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SearchApigetSearchSearchItemList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SearchApigetSearchSearchItemList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SearchApigetSearchSearchItemList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SearchApigetSearchSearchItemList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SearchApigetSearchSearchItemList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SearchApigetSearchSearchItemList
     */
    tags?: string
}

export interface SearchApiGetSearchTagItemByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SearchApigetSearchTagItemByMoid
     */
    moid: string
}

export interface SearchApiGetSearchTagItemListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SearchApigetSearchTagItemList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SearchApigetSearchTagItemList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SearchApigetSearchTagItemList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SearchApigetSearchTagItemList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SearchApigetSearchTagItemList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SearchApigetSearchTagItemList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SearchApigetSearchTagItemList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SearchApigetSearchTagItemList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SearchApigetSearchTagItemList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SearchApigetSearchTagItemList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SearchApigetSearchTagItemList
     */
    tags?: string
}


export class ObjectSearchApi {
    private api: ObservableSearchApi

    public constructor(configuration: Configuration, requestFactory?: SearchApiRequestFactory, responseProcessor?: SearchApiResponseProcessor) {
        this.api = new ObservableSearchApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'search.SuggestItem' resource.
     * @param param the request object
     */
    public createSearchSuggestItem(param: SearchApiCreateSearchSuggestItemRequest, options?: Configuration): Promise<SearchSuggestItem> {
        return this.api.createSearchSuggestItem(param.searchSuggestItem, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Read a 'search.SearchItem' resource.
     * @param param the request object
     */
    public getSearchSearchItemByMoid(param: SearchApiGetSearchSearchItemByMoidRequest, options?: Configuration): Promise<SearchSearchItem> {
        return this.api.getSearchSearchItemByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'search.SearchItem' resource.
     * @param param the request object
     */
    public getSearchSearchItemList(param: SearchApiGetSearchSearchItemListRequest, options?: Configuration): Promise<SearchSearchItemResponse> {
        return this.api.getSearchSearchItemList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'search.TagItem' resource.
     * @param param the request object
     */
    public getSearchTagItemByMoid(param: SearchApiGetSearchTagItemByMoidRequest, options?: Configuration): Promise<SearchTagItem> {
        return this.api.getSearchTagItemByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'search.TagItem' resource.
     * @param param the request object
     */
    public getSearchTagItemList(param: SearchApiGetSearchTagItemListRequest, options?: Configuration): Promise<SearchTagItemResponse> {
        return this.api.getSearchTagItemList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableSecurityApi } from "./ObservableAPI";
import { SecurityApiRequestFactory, SecurityApiResponseProcessor} from "../apis/SecurityApi";

export interface SecurityApiGetSecurityUnitByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SecurityApigetSecurityUnitByMoid
     */
    moid: string
}

export interface SecurityApiGetSecurityUnitListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SecurityApigetSecurityUnitList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SecurityApigetSecurityUnitList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SecurityApigetSecurityUnitList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SecurityApigetSecurityUnitList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SecurityApigetSecurityUnitList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SecurityApigetSecurityUnitList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SecurityApigetSecurityUnitList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SecurityApigetSecurityUnitList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SecurityApigetSecurityUnitList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SecurityApigetSecurityUnitList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SecurityApigetSecurityUnitList
     */
    tags?: string
}

export interface SecurityApiPatchSecurityUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SecurityApipatchSecurityUnit
     */
    moid: string
    /**
     * The &#39;security.Unit&#39; resource to update.
     * @type SecurityUnit
     * @memberof SecurityApipatchSecurityUnit
     */
    securityUnit: SecurityUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SecurityApipatchSecurityUnit
     */
    ifMatch?: string
}

export interface SecurityApiUpdateSecurityUnitRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SecurityApiupdateSecurityUnit
     */
    moid: string
    /**
     * The &#39;security.Unit&#39; resource to update.
     * @type SecurityUnit
     * @memberof SecurityApiupdateSecurityUnit
     */
    securityUnit: SecurityUnit
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SecurityApiupdateSecurityUnit
     */
    ifMatch?: string
}


export class ObjectSecurityApi {
    private api: ObservableSecurityApi

    public constructor(configuration: Configuration, requestFactory?: SecurityApiRequestFactory, responseProcessor?: SecurityApiResponseProcessor) {
        this.api = new ObservableSecurityApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'security.Unit' resource.
     * @param param the request object
     */
    public getSecurityUnitByMoid(param: SecurityApiGetSecurityUnitByMoidRequest, options?: Configuration): Promise<SecurityUnit> {
        return this.api.getSecurityUnitByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'security.Unit' resource.
     * @param param the request object
     */
    public getSecurityUnitList(param: SecurityApiGetSecurityUnitListRequest, options?: Configuration): Promise<SecurityUnitResponse> {
        return this.api.getSecurityUnitList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'security.Unit' resource.
     * @param param the request object
     */
    public patchSecurityUnit(param: SecurityApiPatchSecurityUnitRequest, options?: Configuration): Promise<SecurityUnit> {
        return this.api.patchSecurityUnit(param.moid, param.securityUnit, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'security.Unit' resource.
     * @param param the request object
     */
    public updateSecurityUnit(param: SecurityApiUpdateSecurityUnitRequest, options?: Configuration): Promise<SecurityUnit> {
        return this.api.updateSecurityUnit(param.moid, param.securityUnit, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableServerApi } from "./ObservableAPI";
import { ServerApiRequestFactory, ServerApiResponseProcessor} from "../apis/ServerApi";

export interface ServerApiCreateServerConfigImportRequest {
    /**
     * The &#39;server.ConfigImport&#39; resource to create.
     * @type ServerConfigImport
     * @memberof ServerApicreateServerConfigImport
     */
    serverConfigImport: ServerConfigImport
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ServerApicreateServerConfigImport
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ServerApicreateServerConfigImport
     */
    ifNoneMatch?: string
}

export interface ServerApiCreateServerProfileRequest {
    /**
     * The &#39;server.Profile&#39; resource to create.
     * @type ServerProfile
     * @memberof ServerApicreateServerProfile
     */
    serverProfile: ServerProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ServerApicreateServerProfile
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof ServerApicreateServerProfile
     */
    ifNoneMatch?: string
}

export interface ServerApiDeleteServerProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ServerApideleteServerProfile
     */
    moid: string
}

export interface ServerApiGetServerConfigChangeDetailByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ServerApigetServerConfigChangeDetailByMoid
     */
    moid: string
}

export interface ServerApiGetServerConfigChangeDetailListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ServerApigetServerConfigChangeDetailList
     */
    tags?: string
}

export interface ServerApiGetServerConfigImportByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ServerApigetServerConfigImportByMoid
     */
    moid: string
}

export interface ServerApiGetServerConfigImportListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ServerApigetServerConfigImportList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ServerApigetServerConfigImportList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ServerApigetServerConfigImportList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ServerApigetServerConfigImportList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ServerApigetServerConfigImportList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ServerApigetServerConfigImportList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ServerApigetServerConfigImportList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ServerApigetServerConfigImportList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ServerApigetServerConfigImportList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ServerApigetServerConfigImportList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ServerApigetServerConfigImportList
     */
    tags?: string
}

export interface ServerApiGetServerConfigResultByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ServerApigetServerConfigResultByMoid
     */
    moid: string
}

export interface ServerApiGetServerConfigResultEntryByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ServerApigetServerConfigResultEntryByMoid
     */
    moid: string
}

export interface ServerApiGetServerConfigResultEntryListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ServerApigetServerConfigResultEntryList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ServerApigetServerConfigResultEntryList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ServerApigetServerConfigResultEntryList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ServerApigetServerConfigResultEntryList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ServerApigetServerConfigResultEntryList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ServerApigetServerConfigResultEntryList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ServerApigetServerConfigResultEntryList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ServerApigetServerConfigResultEntryList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ServerApigetServerConfigResultEntryList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ServerApigetServerConfigResultEntryList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ServerApigetServerConfigResultEntryList
     */
    tags?: string
}

export interface ServerApiGetServerConfigResultListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ServerApigetServerConfigResultList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ServerApigetServerConfigResultList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ServerApigetServerConfigResultList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ServerApigetServerConfigResultList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ServerApigetServerConfigResultList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ServerApigetServerConfigResultList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ServerApigetServerConfigResultList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ServerApigetServerConfigResultList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ServerApigetServerConfigResultList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ServerApigetServerConfigResultList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ServerApigetServerConfigResultList
     */
    tags?: string
}

export interface ServerApiGetServerProfileByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ServerApigetServerProfileByMoid
     */
    moid: string
}

export interface ServerApiGetServerProfileListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof ServerApigetServerProfileList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof ServerApigetServerProfileList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof ServerApigetServerProfileList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof ServerApigetServerProfileList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof ServerApigetServerProfileList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof ServerApigetServerProfileList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof ServerApigetServerProfileList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof ServerApigetServerProfileList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof ServerApigetServerProfileList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof ServerApigetServerProfileList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof ServerApigetServerProfileList
     */
    tags?: string
}

export interface ServerApiPatchServerProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ServerApipatchServerProfile
     */
    moid: string
    /**
     * The &#39;server.Profile&#39; resource to update.
     * @type ServerProfile
     * @memberof ServerApipatchServerProfile
     */
    serverProfile: ServerProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ServerApipatchServerProfile
     */
    ifMatch?: string
}

export interface ServerApiUpdateServerProfileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof ServerApiupdateServerProfile
     */
    moid: string
    /**
     * The &#39;server.Profile&#39; resource to update.
     * @type ServerProfile
     * @memberof ServerApiupdateServerProfile
     */
    serverProfile: ServerProfile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof ServerApiupdateServerProfile
     */
    ifMatch?: string
}


export class ObjectServerApi {
    private api: ObservableServerApi

    public constructor(configuration: Configuration, requestFactory?: ServerApiRequestFactory, responseProcessor?: ServerApiResponseProcessor) {
        this.api = new ObservableServerApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'server.ConfigImport' resource.
     * @param param the request object
     */
    public createServerConfigImport(param: ServerApiCreateServerConfigImportRequest, options?: Configuration): Promise<ServerConfigImport> {
        return this.api.createServerConfigImport(param.serverConfigImport, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'server.Profile' resource.
     * @param param the request object
     */
    public createServerProfile(param: ServerApiCreateServerProfileRequest, options?: Configuration): Promise<ServerProfile> {
        return this.api.createServerProfile(param.serverProfile, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'server.Profile' resource.
     * @param param the request object
     */
    public deleteServerProfile(param: ServerApiDeleteServerProfileRequest, options?: Configuration): Promise<void> {
        return this.api.deleteServerProfile(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'server.ConfigChangeDetail' resource.
     * @param param the request object
     */
    public getServerConfigChangeDetailByMoid(param: ServerApiGetServerConfigChangeDetailByMoidRequest, options?: Configuration): Promise<ServerConfigChangeDetail> {
        return this.api.getServerConfigChangeDetailByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'server.ConfigChangeDetail' resource.
     * @param param the request object
     */
    public getServerConfigChangeDetailList(param: ServerApiGetServerConfigChangeDetailListRequest, options?: Configuration): Promise<ServerConfigChangeDetailResponse> {
        return this.api.getServerConfigChangeDetailList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'server.ConfigImport' resource.
     * @param param the request object
     */
    public getServerConfigImportByMoid(param: ServerApiGetServerConfigImportByMoidRequest, options?: Configuration): Promise<ServerConfigImport> {
        return this.api.getServerConfigImportByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'server.ConfigImport' resource.
     * @param param the request object
     */
    public getServerConfigImportList(param: ServerApiGetServerConfigImportListRequest, options?: Configuration): Promise<ServerConfigImportResponse> {
        return this.api.getServerConfigImportList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'server.ConfigResult' resource.
     * @param param the request object
     */
    public getServerConfigResultByMoid(param: ServerApiGetServerConfigResultByMoidRequest, options?: Configuration): Promise<ServerConfigResult> {
        return this.api.getServerConfigResultByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'server.ConfigResultEntry' resource.
     * @param param the request object
     */
    public getServerConfigResultEntryByMoid(param: ServerApiGetServerConfigResultEntryByMoidRequest, options?: Configuration): Promise<ServerConfigResultEntry> {
        return this.api.getServerConfigResultEntryByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'server.ConfigResultEntry' resource.
     * @param param the request object
     */
    public getServerConfigResultEntryList(param: ServerApiGetServerConfigResultEntryListRequest, options?: Configuration): Promise<ServerConfigResultEntryResponse> {
        return this.api.getServerConfigResultEntryList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'server.ConfigResult' resource.
     * @param param the request object
     */
    public getServerConfigResultList(param: ServerApiGetServerConfigResultListRequest, options?: Configuration): Promise<ServerConfigResultResponse> {
        return this.api.getServerConfigResultList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'server.Profile' resource.
     * @param param the request object
     */
    public getServerProfileByMoid(param: ServerApiGetServerProfileByMoidRequest, options?: Configuration): Promise<ServerProfile> {
        return this.api.getServerProfileByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'server.Profile' resource.
     * @param param the request object
     */
    public getServerProfileList(param: ServerApiGetServerProfileListRequest, options?: Configuration): Promise<ServerProfileResponse> {
        return this.api.getServerProfileList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'server.Profile' resource.
     * @param param the request object
     */
    public patchServerProfile(param: ServerApiPatchServerProfileRequest, options?: Configuration): Promise<ServerProfile> {
        return this.api.patchServerProfile(param.moid, param.serverProfile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'server.Profile' resource.
     * @param param the request object
     */
    public updateServerProfile(param: ServerApiUpdateServerProfileRequest, options?: Configuration): Promise<ServerProfile> {
        return this.api.updateServerProfile(param.moid, param.serverProfile, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSmtpApi } from "./ObservableAPI";
import { SmtpApiRequestFactory, SmtpApiResponseProcessor} from "../apis/SmtpApi";

export interface SmtpApiCreateSmtpPolicyRequest {
    /**
     * The &#39;smtp.Policy&#39; resource to create.
     * @type SmtpPolicy
     * @memberof SmtpApicreateSmtpPolicy
     */
    smtpPolicy: SmtpPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SmtpApicreateSmtpPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SmtpApicreateSmtpPolicy
     */
    ifNoneMatch?: string
}

export interface SmtpApiDeleteSmtpPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SmtpApideleteSmtpPolicy
     */
    moid: string
}

export interface SmtpApiGetSmtpPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SmtpApigetSmtpPolicyByMoid
     */
    moid: string
}

export interface SmtpApiGetSmtpPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SmtpApigetSmtpPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SmtpApigetSmtpPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SmtpApigetSmtpPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SmtpApigetSmtpPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SmtpApigetSmtpPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SmtpApigetSmtpPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SmtpApigetSmtpPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SmtpApigetSmtpPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SmtpApigetSmtpPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SmtpApigetSmtpPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SmtpApigetSmtpPolicyList
     */
    tags?: string
}

export interface SmtpApiPatchSmtpPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SmtpApipatchSmtpPolicy
     */
    moid: string
    /**
     * The &#39;smtp.Policy&#39; resource to update.
     * @type SmtpPolicy
     * @memberof SmtpApipatchSmtpPolicy
     */
    smtpPolicy: SmtpPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SmtpApipatchSmtpPolicy
     */
    ifMatch?: string
}

export interface SmtpApiUpdateSmtpPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SmtpApiupdateSmtpPolicy
     */
    moid: string
    /**
     * The &#39;smtp.Policy&#39; resource to update.
     * @type SmtpPolicy
     * @memberof SmtpApiupdateSmtpPolicy
     */
    smtpPolicy: SmtpPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SmtpApiupdateSmtpPolicy
     */
    ifMatch?: string
}


export class ObjectSmtpApi {
    private api: ObservableSmtpApi

    public constructor(configuration: Configuration, requestFactory?: SmtpApiRequestFactory, responseProcessor?: SmtpApiResponseProcessor) {
        this.api = new ObservableSmtpApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'smtp.Policy' resource.
     * @param param the request object
     */
    public createSmtpPolicy(param: SmtpApiCreateSmtpPolicyRequest, options?: Configuration): Promise<SmtpPolicy> {
        return this.api.createSmtpPolicy(param.smtpPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'smtp.Policy' resource.
     * @param param the request object
     */
    public deleteSmtpPolicy(param: SmtpApiDeleteSmtpPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSmtpPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'smtp.Policy' resource.
     * @param param the request object
     */
    public getSmtpPolicyByMoid(param: SmtpApiGetSmtpPolicyByMoidRequest, options?: Configuration): Promise<SmtpPolicy> {
        return this.api.getSmtpPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'smtp.Policy' resource.
     * @param param the request object
     */
    public getSmtpPolicyList(param: SmtpApiGetSmtpPolicyListRequest, options?: Configuration): Promise<SmtpPolicyResponse> {
        return this.api.getSmtpPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'smtp.Policy' resource.
     * @param param the request object
     */
    public patchSmtpPolicy(param: SmtpApiPatchSmtpPolicyRequest, options?: Configuration): Promise<SmtpPolicy> {
        return this.api.patchSmtpPolicy(param.moid, param.smtpPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'smtp.Policy' resource.
     * @param param the request object
     */
    public updateSmtpPolicy(param: SmtpApiUpdateSmtpPolicyRequest, options?: Configuration): Promise<SmtpPolicy> {
        return this.api.updateSmtpPolicy(param.moid, param.smtpPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSnmpApi } from "./ObservableAPI";
import { SnmpApiRequestFactory, SnmpApiResponseProcessor} from "../apis/SnmpApi";

export interface SnmpApiCreateSnmpPolicyRequest {
    /**
     * The &#39;snmp.Policy&#39; resource to create.
     * @type SnmpPolicy
     * @memberof SnmpApicreateSnmpPolicy
     */
    snmpPolicy: SnmpPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SnmpApicreateSnmpPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SnmpApicreateSnmpPolicy
     */
    ifNoneMatch?: string
}

export interface SnmpApiDeleteSnmpPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SnmpApideleteSnmpPolicy
     */
    moid: string
}

export interface SnmpApiGetSnmpPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SnmpApigetSnmpPolicyByMoid
     */
    moid: string
}

export interface SnmpApiGetSnmpPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SnmpApigetSnmpPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SnmpApigetSnmpPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SnmpApigetSnmpPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SnmpApigetSnmpPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SnmpApigetSnmpPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SnmpApigetSnmpPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SnmpApigetSnmpPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SnmpApigetSnmpPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SnmpApigetSnmpPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SnmpApigetSnmpPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SnmpApigetSnmpPolicyList
     */
    tags?: string
}

export interface SnmpApiPatchSnmpPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SnmpApipatchSnmpPolicy
     */
    moid: string
    /**
     * The &#39;snmp.Policy&#39; resource to update.
     * @type SnmpPolicy
     * @memberof SnmpApipatchSnmpPolicy
     */
    snmpPolicy: SnmpPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SnmpApipatchSnmpPolicy
     */
    ifMatch?: string
}

export interface SnmpApiUpdateSnmpPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SnmpApiupdateSnmpPolicy
     */
    moid: string
    /**
     * The &#39;snmp.Policy&#39; resource to update.
     * @type SnmpPolicy
     * @memberof SnmpApiupdateSnmpPolicy
     */
    snmpPolicy: SnmpPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SnmpApiupdateSnmpPolicy
     */
    ifMatch?: string
}


export class ObjectSnmpApi {
    private api: ObservableSnmpApi

    public constructor(configuration: Configuration, requestFactory?: SnmpApiRequestFactory, responseProcessor?: SnmpApiResponseProcessor) {
        this.api = new ObservableSnmpApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'snmp.Policy' resource.
     * @param param the request object
     */
    public createSnmpPolicy(param: SnmpApiCreateSnmpPolicyRequest, options?: Configuration): Promise<SnmpPolicy> {
        return this.api.createSnmpPolicy(param.snmpPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'snmp.Policy' resource.
     * @param param the request object
     */
    public deleteSnmpPolicy(param: SnmpApiDeleteSnmpPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSnmpPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'snmp.Policy' resource.
     * @param param the request object
     */
    public getSnmpPolicyByMoid(param: SnmpApiGetSnmpPolicyByMoidRequest, options?: Configuration): Promise<SnmpPolicy> {
        return this.api.getSnmpPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'snmp.Policy' resource.
     * @param param the request object
     */
    public getSnmpPolicyList(param: SnmpApiGetSnmpPolicyListRequest, options?: Configuration): Promise<SnmpPolicyResponse> {
        return this.api.getSnmpPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'snmp.Policy' resource.
     * @param param the request object
     */
    public patchSnmpPolicy(param: SnmpApiPatchSnmpPolicyRequest, options?: Configuration): Promise<SnmpPolicy> {
        return this.api.patchSnmpPolicy(param.moid, param.snmpPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'snmp.Policy' resource.
     * @param param the request object
     */
    public updateSnmpPolicy(param: SnmpApiUpdateSnmpPolicyRequest, options?: Configuration): Promise<SnmpPolicy> {
        return this.api.updateSnmpPolicy(param.moid, param.snmpPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSoftwareApi } from "./ObservableAPI";
import { SoftwareApiRequestFactory, SoftwareApiResponseProcessor} from "../apis/SoftwareApi";

export interface SoftwareApiCreateSoftwareHclMetaRequest {
    /**
     * The &#39;software.HclMeta&#39; resource to create.
     * @type SoftwareHclMeta
     * @memberof SoftwareApicreateSoftwareHclMeta
     */
    softwareHclMeta: SoftwareHclMeta
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwareApicreateSoftwareHclMeta
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SoftwareApicreateSoftwareHclMeta
     */
    ifNoneMatch?: string
}

export interface SoftwareApiCreateSoftwareHyperflexDistributableRequest {
    /**
     * The &#39;software.HyperflexDistributable&#39; resource to create.
     * @type SoftwareHyperflexDistributable
     * @memberof SoftwareApicreateSoftwareHyperflexDistributable
     */
    softwareHyperflexDistributable: SoftwareHyperflexDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwareApicreateSoftwareHyperflexDistributable
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SoftwareApicreateSoftwareHyperflexDistributable
     */
    ifNoneMatch?: string
}

export interface SoftwareApiCreateSoftwareSolutionDistributableRequest {
    /**
     * The &#39;software.SolutionDistributable&#39; resource to create.
     * @type SoftwareSolutionDistributable
     * @memberof SoftwareApicreateSoftwareSolutionDistributable
     */
    softwareSolutionDistributable: SoftwareSolutionDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwareApicreateSoftwareSolutionDistributable
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SoftwareApicreateSoftwareSolutionDistributable
     */
    ifNoneMatch?: string
}

export interface SoftwareApiDeleteSoftwareHclMetaRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApideleteSoftwareHclMeta
     */
    moid: string
}

export interface SoftwareApiDeleteSoftwareHyperflexDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApideleteSoftwareHyperflexDistributable
     */
    moid: string
}

export interface SoftwareApiDeleteSoftwareSolutionDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApideleteSoftwareSolutionDistributable
     */
    moid: string
}

export interface SoftwareApiGetSoftwareHclMetaByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApigetSoftwareHclMetaByMoid
     */
    moid: string
}

export interface SoftwareApiGetSoftwareHclMetaListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SoftwareApigetSoftwareHclMetaList
     */
    tags?: string
}

export interface SoftwareApiGetSoftwareHyperflexDistributableByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApigetSoftwareHyperflexDistributableByMoid
     */
    moid: string
}

export interface SoftwareApiGetSoftwareHyperflexDistributableListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SoftwareApigetSoftwareHyperflexDistributableList
     */
    tags?: string
}

export interface SoftwareApiGetSoftwareSolutionDistributableByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApigetSoftwareSolutionDistributableByMoid
     */
    moid: string
}

export interface SoftwareApiGetSoftwareSolutionDistributableListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SoftwareApigetSoftwareSolutionDistributableList
     */
    tags?: string
}

export interface SoftwareApiPatchSoftwareHclMetaRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApipatchSoftwareHclMeta
     */
    moid: string
    /**
     * The &#39;software.HclMeta&#39; resource to update.
     * @type SoftwareHclMeta
     * @memberof SoftwareApipatchSoftwareHclMeta
     */
    softwareHclMeta: SoftwareHclMeta
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwareApipatchSoftwareHclMeta
     */
    ifMatch?: string
}

export interface SoftwareApiPatchSoftwareHyperflexDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApipatchSoftwareHyperflexDistributable
     */
    moid: string
    /**
     * The &#39;software.HyperflexDistributable&#39; resource to update.
     * @type SoftwareHyperflexDistributable
     * @memberof SoftwareApipatchSoftwareHyperflexDistributable
     */
    softwareHyperflexDistributable: SoftwareHyperflexDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwareApipatchSoftwareHyperflexDistributable
     */
    ifMatch?: string
}

export interface SoftwareApiPatchSoftwareSolutionDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApipatchSoftwareSolutionDistributable
     */
    moid: string
    /**
     * The &#39;software.SolutionDistributable&#39; resource to update.
     * @type SoftwareSolutionDistributable
     * @memberof SoftwareApipatchSoftwareSolutionDistributable
     */
    softwareSolutionDistributable: SoftwareSolutionDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwareApipatchSoftwareSolutionDistributable
     */
    ifMatch?: string
}

export interface SoftwareApiUpdateSoftwareHclMetaRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApiupdateSoftwareHclMeta
     */
    moid: string
    /**
     * The &#39;software.HclMeta&#39; resource to update.
     * @type SoftwareHclMeta
     * @memberof SoftwareApiupdateSoftwareHclMeta
     */
    softwareHclMeta: SoftwareHclMeta
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwareApiupdateSoftwareHclMeta
     */
    ifMatch?: string
}

export interface SoftwareApiUpdateSoftwareHyperflexDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApiupdateSoftwareHyperflexDistributable
     */
    moid: string
    /**
     * The &#39;software.HyperflexDistributable&#39; resource to update.
     * @type SoftwareHyperflexDistributable
     * @memberof SoftwareApiupdateSoftwareHyperflexDistributable
     */
    softwareHyperflexDistributable: SoftwareHyperflexDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwareApiupdateSoftwareHyperflexDistributable
     */
    ifMatch?: string
}

export interface SoftwareApiUpdateSoftwareSolutionDistributableRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwareApiupdateSoftwareSolutionDistributable
     */
    moid: string
    /**
     * The &#39;software.SolutionDistributable&#39; resource to update.
     * @type SoftwareSolutionDistributable
     * @memberof SoftwareApiupdateSoftwareSolutionDistributable
     */
    softwareSolutionDistributable: SoftwareSolutionDistributable
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwareApiupdateSoftwareSolutionDistributable
     */
    ifMatch?: string
}


export class ObjectSoftwareApi {
    private api: ObservableSoftwareApi

    public constructor(configuration: Configuration, requestFactory?: SoftwareApiRequestFactory, responseProcessor?: SoftwareApiResponseProcessor) {
        this.api = new ObservableSoftwareApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'software.HclMeta' resource.
     * @param param the request object
     */
    public createSoftwareHclMeta(param: SoftwareApiCreateSoftwareHclMetaRequest, options?: Configuration): Promise<SoftwareHclMeta> {
        return this.api.createSoftwareHclMeta(param.softwareHclMeta, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'software.HyperflexDistributable' resource.
     * @param param the request object
     */
    public createSoftwareHyperflexDistributable(param: SoftwareApiCreateSoftwareHyperflexDistributableRequest, options?: Configuration): Promise<SoftwareHyperflexDistributable> {
        return this.api.createSoftwareHyperflexDistributable(param.softwareHyperflexDistributable, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'software.SolutionDistributable' resource.
     * @param param the request object
     */
    public createSoftwareSolutionDistributable(param: SoftwareApiCreateSoftwareSolutionDistributableRequest, options?: Configuration): Promise<SoftwareSolutionDistributable> {
        return this.api.createSoftwareSolutionDistributable(param.softwareSolutionDistributable, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'software.HclMeta' resource.
     * @param param the request object
     */
    public deleteSoftwareHclMeta(param: SoftwareApiDeleteSoftwareHclMetaRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSoftwareHclMeta(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'software.HyperflexDistributable' resource.
     * @param param the request object
     */
    public deleteSoftwareHyperflexDistributable(param: SoftwareApiDeleteSoftwareHyperflexDistributableRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSoftwareHyperflexDistributable(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'software.SolutionDistributable' resource.
     * @param param the request object
     */
    public deleteSoftwareSolutionDistributable(param: SoftwareApiDeleteSoftwareSolutionDistributableRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSoftwareSolutionDistributable(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'software.HclMeta' resource.
     * @param param the request object
     */
    public getSoftwareHclMetaByMoid(param: SoftwareApiGetSoftwareHclMetaByMoidRequest, options?: Configuration): Promise<SoftwareHclMeta> {
        return this.api.getSoftwareHclMetaByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'software.HclMeta' resource.
     * @param param the request object
     */
    public getSoftwareHclMetaList(param: SoftwareApiGetSoftwareHclMetaListRequest, options?: Configuration): Promise<SoftwareHclMetaResponse> {
        return this.api.getSoftwareHclMetaList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'software.HyperflexDistributable' resource.
     * @param param the request object
     */
    public getSoftwareHyperflexDistributableByMoid(param: SoftwareApiGetSoftwareHyperflexDistributableByMoidRequest, options?: Configuration): Promise<SoftwareHyperflexDistributable> {
        return this.api.getSoftwareHyperflexDistributableByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'software.HyperflexDistributable' resource.
     * @param param the request object
     */
    public getSoftwareHyperflexDistributableList(param: SoftwareApiGetSoftwareHyperflexDistributableListRequest, options?: Configuration): Promise<SoftwareHyperflexDistributableResponse> {
        return this.api.getSoftwareHyperflexDistributableList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'software.SolutionDistributable' resource.
     * @param param the request object
     */
    public getSoftwareSolutionDistributableByMoid(param: SoftwareApiGetSoftwareSolutionDistributableByMoidRequest, options?: Configuration): Promise<SoftwareSolutionDistributable> {
        return this.api.getSoftwareSolutionDistributableByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'software.SolutionDistributable' resource.
     * @param param the request object
     */
    public getSoftwareSolutionDistributableList(param: SoftwareApiGetSoftwareSolutionDistributableListRequest, options?: Configuration): Promise<SoftwareSolutionDistributableResponse> {
        return this.api.getSoftwareSolutionDistributableList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'software.HclMeta' resource.
     * @param param the request object
     */
    public patchSoftwareHclMeta(param: SoftwareApiPatchSoftwareHclMetaRequest, options?: Configuration): Promise<SoftwareHclMeta> {
        return this.api.patchSoftwareHclMeta(param.moid, param.softwareHclMeta, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'software.HyperflexDistributable' resource.
     * @param param the request object
     */
    public patchSoftwareHyperflexDistributable(param: SoftwareApiPatchSoftwareHyperflexDistributableRequest, options?: Configuration): Promise<SoftwareHyperflexDistributable> {
        return this.api.patchSoftwareHyperflexDistributable(param.moid, param.softwareHyperflexDistributable, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'software.SolutionDistributable' resource.
     * @param param the request object
     */
    public patchSoftwareSolutionDistributable(param: SoftwareApiPatchSoftwareSolutionDistributableRequest, options?: Configuration): Promise<SoftwareSolutionDistributable> {
        return this.api.patchSoftwareSolutionDistributable(param.moid, param.softwareSolutionDistributable, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'software.HclMeta' resource.
     * @param param the request object
     */
    public updateSoftwareHclMeta(param: SoftwareApiUpdateSoftwareHclMetaRequest, options?: Configuration): Promise<SoftwareHclMeta> {
        return this.api.updateSoftwareHclMeta(param.moid, param.softwareHclMeta, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'software.HyperflexDistributable' resource.
     * @param param the request object
     */
    public updateSoftwareHyperflexDistributable(param: SoftwareApiUpdateSoftwareHyperflexDistributableRequest, options?: Configuration): Promise<SoftwareHyperflexDistributable> {
        return this.api.updateSoftwareHyperflexDistributable(param.moid, param.softwareHyperflexDistributable, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'software.SolutionDistributable' resource.
     * @param param the request object
     */
    public updateSoftwareSolutionDistributable(param: SoftwareApiUpdateSoftwareSolutionDistributableRequest, options?: Configuration): Promise<SoftwareSolutionDistributable> {
        return this.api.updateSoftwareSolutionDistributable(param.moid, param.softwareSolutionDistributable, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSoftwarerepositoryApi } from "./ObservableAPI";
import { SoftwarerepositoryApiRequestFactory, SoftwarerepositoryApiResponseProcessor} from "../apis/SoftwarerepositoryApi";

export interface SoftwarerepositoryApiCreateSoftwarerepositoryAuthorizationRequest {
    /**
     * The &#39;softwarerepository.Authorization&#39; resource to create.
     * @type SoftwarerepositoryAuthorization
     * @memberof SoftwarerepositoryApicreateSoftwarerepositoryAuthorization
     */
    softwarerepositoryAuthorization: SoftwarerepositoryAuthorization
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwarerepositoryApicreateSoftwarerepositoryAuthorization
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SoftwarerepositoryApicreateSoftwarerepositoryAuthorization
     */
    ifNoneMatch?: string
}

export interface SoftwarerepositoryApiCreateSoftwarerepositoryOperatingSystemFileRequest {
    /**
     * The &#39;softwarerepository.OperatingSystemFile&#39; resource to create.
     * @type SoftwarerepositoryOperatingSystemFile
     * @memberof SoftwarerepositoryApicreateSoftwarerepositoryOperatingSystemFile
     */
    softwarerepositoryOperatingSystemFile: SoftwarerepositoryOperatingSystemFile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwarerepositoryApicreateSoftwarerepositoryOperatingSystemFile
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SoftwarerepositoryApicreateSoftwarerepositoryOperatingSystemFile
     */
    ifNoneMatch?: string
}

export interface SoftwarerepositoryApiDeleteSoftwarerepositoryOperatingSystemFileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwarerepositoryApideleteSoftwarerepositoryOperatingSystemFile
     */
    moid: string
}

export interface SoftwarerepositoryApiGetSoftwarerepositoryAuthorizationByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationByMoid
     */
    moid: string
}

export interface SoftwarerepositoryApiGetSoftwarerepositoryAuthorizationListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryAuthorizationList
     */
    tags?: string
}

export interface SoftwarerepositoryApiGetSoftwarerepositoryCatalogByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogByMoid
     */
    moid: string
}

export interface SoftwarerepositoryApiGetSoftwarerepositoryCatalogListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryCatalogList
     */
    tags?: string
}

export interface SoftwarerepositoryApiGetSoftwarerepositoryOperatingSystemFileByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileByMoid
     */
    moid: string
}

export interface SoftwarerepositoryApiGetSoftwarerepositoryOperatingSystemFileListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SoftwarerepositoryApigetSoftwarerepositoryOperatingSystemFileList
     */
    tags?: string
}

export interface SoftwarerepositoryApiPatchSoftwarerepositoryAuthorizationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwarerepositoryApipatchSoftwarerepositoryAuthorization
     */
    moid: string
    /**
     * The &#39;softwarerepository.Authorization&#39; resource to update.
     * @type SoftwarerepositoryAuthorization
     * @memberof SoftwarerepositoryApipatchSoftwarerepositoryAuthorization
     */
    softwarerepositoryAuthorization: SoftwarerepositoryAuthorization
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwarerepositoryApipatchSoftwarerepositoryAuthorization
     */
    ifMatch?: string
}

export interface SoftwarerepositoryApiPatchSoftwarerepositoryOperatingSystemFileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwarerepositoryApipatchSoftwarerepositoryOperatingSystemFile
     */
    moid: string
    /**
     * The &#39;softwarerepository.OperatingSystemFile&#39; resource to update.
     * @type SoftwarerepositoryOperatingSystemFile
     * @memberof SoftwarerepositoryApipatchSoftwarerepositoryOperatingSystemFile
     */
    softwarerepositoryOperatingSystemFile: SoftwarerepositoryOperatingSystemFile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwarerepositoryApipatchSoftwarerepositoryOperatingSystemFile
     */
    ifMatch?: string
}

export interface SoftwarerepositoryApiUpdateSoftwarerepositoryAuthorizationRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwarerepositoryApiupdateSoftwarerepositoryAuthorization
     */
    moid: string
    /**
     * The &#39;softwarerepository.Authorization&#39; resource to update.
     * @type SoftwarerepositoryAuthorization
     * @memberof SoftwarerepositoryApiupdateSoftwarerepositoryAuthorization
     */
    softwarerepositoryAuthorization: SoftwarerepositoryAuthorization
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwarerepositoryApiupdateSoftwarerepositoryAuthorization
     */
    ifMatch?: string
}

export interface SoftwarerepositoryApiUpdateSoftwarerepositoryOperatingSystemFileRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SoftwarerepositoryApiupdateSoftwarerepositoryOperatingSystemFile
     */
    moid: string
    /**
     * The &#39;softwarerepository.OperatingSystemFile&#39; resource to update.
     * @type SoftwarerepositoryOperatingSystemFile
     * @memberof SoftwarerepositoryApiupdateSoftwarerepositoryOperatingSystemFile
     */
    softwarerepositoryOperatingSystemFile: SoftwarerepositoryOperatingSystemFile
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SoftwarerepositoryApiupdateSoftwarerepositoryOperatingSystemFile
     */
    ifMatch?: string
}


export class ObjectSoftwarerepositoryApi {
    private api: ObservableSoftwarerepositoryApi

    public constructor(configuration: Configuration, requestFactory?: SoftwarerepositoryApiRequestFactory, responseProcessor?: SoftwarerepositoryApiResponseProcessor) {
        this.api = new ObservableSoftwarerepositoryApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'softwarerepository.Authorization' resource.
     * @param param the request object
     */
    public createSoftwarerepositoryAuthorization(param: SoftwarerepositoryApiCreateSoftwarerepositoryAuthorizationRequest, options?: Configuration): Promise<SoftwarerepositoryAuthorization> {
        return this.api.createSoftwarerepositoryAuthorization(param.softwarerepositoryAuthorization, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'softwarerepository.OperatingSystemFile' resource.
     * @param param the request object
     */
    public createSoftwarerepositoryOperatingSystemFile(param: SoftwarerepositoryApiCreateSoftwarerepositoryOperatingSystemFileRequest, options?: Configuration): Promise<SoftwarerepositoryOperatingSystemFile> {
        return this.api.createSoftwarerepositoryOperatingSystemFile(param.softwarerepositoryOperatingSystemFile, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'softwarerepository.OperatingSystemFile' resource.
     * @param param the request object
     */
    public deleteSoftwarerepositoryOperatingSystemFile(param: SoftwarerepositoryApiDeleteSoftwarerepositoryOperatingSystemFileRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSoftwarerepositoryOperatingSystemFile(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'softwarerepository.Authorization' resource.
     * @param param the request object
     */
    public getSoftwarerepositoryAuthorizationByMoid(param: SoftwarerepositoryApiGetSoftwarerepositoryAuthorizationByMoidRequest, options?: Configuration): Promise<SoftwarerepositoryAuthorization> {
        return this.api.getSoftwarerepositoryAuthorizationByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'softwarerepository.Authorization' resource.
     * @param param the request object
     */
    public getSoftwarerepositoryAuthorizationList(param: SoftwarerepositoryApiGetSoftwarerepositoryAuthorizationListRequest, options?: Configuration): Promise<SoftwarerepositoryAuthorizationResponse> {
        return this.api.getSoftwarerepositoryAuthorizationList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'softwarerepository.Catalog' resource.
     * @param param the request object
     */
    public getSoftwarerepositoryCatalogByMoid(param: SoftwarerepositoryApiGetSoftwarerepositoryCatalogByMoidRequest, options?: Configuration): Promise<SoftwarerepositoryCatalog> {
        return this.api.getSoftwarerepositoryCatalogByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'softwarerepository.Catalog' resource.
     * @param param the request object
     */
    public getSoftwarerepositoryCatalogList(param: SoftwarerepositoryApiGetSoftwarerepositoryCatalogListRequest, options?: Configuration): Promise<SoftwarerepositoryCatalogResponse> {
        return this.api.getSoftwarerepositoryCatalogList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'softwarerepository.OperatingSystemFile' resource.
     * @param param the request object
     */
    public getSoftwarerepositoryOperatingSystemFileByMoid(param: SoftwarerepositoryApiGetSoftwarerepositoryOperatingSystemFileByMoidRequest, options?: Configuration): Promise<SoftwarerepositoryOperatingSystemFile> {
        return this.api.getSoftwarerepositoryOperatingSystemFileByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'softwarerepository.OperatingSystemFile' resource.
     * @param param the request object
     */
    public getSoftwarerepositoryOperatingSystemFileList(param: SoftwarerepositoryApiGetSoftwarerepositoryOperatingSystemFileListRequest, options?: Configuration): Promise<SoftwarerepositoryOperatingSystemFileResponse> {
        return this.api.getSoftwarerepositoryOperatingSystemFileList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'softwarerepository.Authorization' resource.
     * @param param the request object
     */
    public patchSoftwarerepositoryAuthorization(param: SoftwarerepositoryApiPatchSoftwarerepositoryAuthorizationRequest, options?: Configuration): Promise<SoftwarerepositoryAuthorization> {
        return this.api.patchSoftwarerepositoryAuthorization(param.moid, param.softwarerepositoryAuthorization, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'softwarerepository.OperatingSystemFile' resource.
     * @param param the request object
     */
    public patchSoftwarerepositoryOperatingSystemFile(param: SoftwarerepositoryApiPatchSoftwarerepositoryOperatingSystemFileRequest, options?: Configuration): Promise<SoftwarerepositoryOperatingSystemFile> {
        return this.api.patchSoftwarerepositoryOperatingSystemFile(param.moid, param.softwarerepositoryOperatingSystemFile, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'softwarerepository.Authorization' resource.
     * @param param the request object
     */
    public updateSoftwarerepositoryAuthorization(param: SoftwarerepositoryApiUpdateSoftwarerepositoryAuthorizationRequest, options?: Configuration): Promise<SoftwarerepositoryAuthorization> {
        return this.api.updateSoftwarerepositoryAuthorization(param.moid, param.softwarerepositoryAuthorization, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'softwarerepository.OperatingSystemFile' resource.
     * @param param the request object
     */
    public updateSoftwarerepositoryOperatingSystemFile(param: SoftwarerepositoryApiUpdateSoftwarerepositoryOperatingSystemFileRequest, options?: Configuration): Promise<SoftwarerepositoryOperatingSystemFile> {
        return this.api.updateSoftwarerepositoryOperatingSystemFile(param.moid, param.softwarerepositoryOperatingSystemFile, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSolApi } from "./ObservableAPI";
import { SolApiRequestFactory, SolApiResponseProcessor} from "../apis/SolApi";

export interface SolApiCreateSolPolicyRequest {
    /**
     * The &#39;sol.Policy&#39; resource to create.
     * @type SolPolicy
     * @memberof SolApicreateSolPolicy
     */
    solPolicy: SolPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SolApicreateSolPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SolApicreateSolPolicy
     */
    ifNoneMatch?: string
}

export interface SolApiDeleteSolPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SolApideleteSolPolicy
     */
    moid: string
}

export interface SolApiGetSolPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SolApigetSolPolicyByMoid
     */
    moid: string
}

export interface SolApiGetSolPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SolApigetSolPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SolApigetSolPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SolApigetSolPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SolApigetSolPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SolApigetSolPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SolApigetSolPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SolApigetSolPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SolApigetSolPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SolApigetSolPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SolApigetSolPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SolApigetSolPolicyList
     */
    tags?: string
}

export interface SolApiPatchSolPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SolApipatchSolPolicy
     */
    moid: string
    /**
     * The &#39;sol.Policy&#39; resource to update.
     * @type SolPolicy
     * @memberof SolApipatchSolPolicy
     */
    solPolicy: SolPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SolApipatchSolPolicy
     */
    ifMatch?: string
}

export interface SolApiUpdateSolPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SolApiupdateSolPolicy
     */
    moid: string
    /**
     * The &#39;sol.Policy&#39; resource to update.
     * @type SolPolicy
     * @memberof SolApiupdateSolPolicy
     */
    solPolicy: SolPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SolApiupdateSolPolicy
     */
    ifMatch?: string
}


export class ObjectSolApi {
    private api: ObservableSolApi

    public constructor(configuration: Configuration, requestFactory?: SolApiRequestFactory, responseProcessor?: SolApiResponseProcessor) {
        this.api = new ObservableSolApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'sol.Policy' resource.
     * @param param the request object
     */
    public createSolPolicy(param: SolApiCreateSolPolicyRequest, options?: Configuration): Promise<SolPolicy> {
        return this.api.createSolPolicy(param.solPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'sol.Policy' resource.
     * @param param the request object
     */
    public deleteSolPolicy(param: SolApiDeleteSolPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSolPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'sol.Policy' resource.
     * @param param the request object
     */
    public getSolPolicyByMoid(param: SolApiGetSolPolicyByMoidRequest, options?: Configuration): Promise<SolPolicy> {
        return this.api.getSolPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'sol.Policy' resource.
     * @param param the request object
     */
    public getSolPolicyList(param: SolApiGetSolPolicyListRequest, options?: Configuration): Promise<SolPolicyResponse> {
        return this.api.getSolPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'sol.Policy' resource.
     * @param param the request object
     */
    public patchSolPolicy(param: SolApiPatchSolPolicyRequest, options?: Configuration): Promise<SolPolicy> {
        return this.api.patchSolPolicy(param.moid, param.solPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'sol.Policy' resource.
     * @param param the request object
     */
    public updateSolPolicy(param: SolApiUpdateSolPolicyRequest, options?: Configuration): Promise<SolPolicy> {
        return this.api.updateSolPolicy(param.moid, param.solPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSshApi } from "./ObservableAPI";
import { SshApiRequestFactory, SshApiResponseProcessor} from "../apis/SshApi";

export interface SshApiCreateSshPolicyRequest {
    /**
     * The &#39;ssh.Policy&#39; resource to create.
     * @type SshPolicy
     * @memberof SshApicreateSshPolicy
     */
    sshPolicy: SshPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SshApicreateSshPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SshApicreateSshPolicy
     */
    ifNoneMatch?: string
}

export interface SshApiDeleteSshPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SshApideleteSshPolicy
     */
    moid: string
}

export interface SshApiGetSshPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SshApigetSshPolicyByMoid
     */
    moid: string
}

export interface SshApiGetSshPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SshApigetSshPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SshApigetSshPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SshApigetSshPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SshApigetSshPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SshApigetSshPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SshApigetSshPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SshApigetSshPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SshApigetSshPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SshApigetSshPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SshApigetSshPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SshApigetSshPolicyList
     */
    tags?: string
}

export interface SshApiPatchSshPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SshApipatchSshPolicy
     */
    moid: string
    /**
     * The &#39;ssh.Policy&#39; resource to update.
     * @type SshPolicy
     * @memberof SshApipatchSshPolicy
     */
    sshPolicy: SshPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SshApipatchSshPolicy
     */
    ifMatch?: string
}

export interface SshApiUpdateSshPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SshApiupdateSshPolicy
     */
    moid: string
    /**
     * The &#39;ssh.Policy&#39; resource to update.
     * @type SshPolicy
     * @memberof SshApiupdateSshPolicy
     */
    sshPolicy: SshPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SshApiupdateSshPolicy
     */
    ifMatch?: string
}


export class ObjectSshApi {
    private api: ObservableSshApi

    public constructor(configuration: Configuration, requestFactory?: SshApiRequestFactory, responseProcessor?: SshApiResponseProcessor) {
        this.api = new ObservableSshApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'ssh.Policy' resource.
     * @param param the request object
     */
    public createSshPolicy(param: SshApiCreateSshPolicyRequest, options?: Configuration): Promise<SshPolicy> {
        return this.api.createSshPolicy(param.sshPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'ssh.Policy' resource.
     * @param param the request object
     */
    public deleteSshPolicy(param: SshApiDeleteSshPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSshPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ssh.Policy' resource.
     * @param param the request object
     */
    public getSshPolicyByMoid(param: SshApiGetSshPolicyByMoidRequest, options?: Configuration): Promise<SshPolicy> {
        return this.api.getSshPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ssh.Policy' resource.
     * @param param the request object
     */
    public getSshPolicyList(param: SshApiGetSshPolicyListRequest, options?: Configuration): Promise<SshPolicyResponse> {
        return this.api.getSshPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'ssh.Policy' resource.
     * @param param the request object
     */
    public patchSshPolicy(param: SshApiPatchSshPolicyRequest, options?: Configuration): Promise<SshPolicy> {
        return this.api.patchSshPolicy(param.moid, param.sshPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'ssh.Policy' resource.
     * @param param the request object
     */
    public updateSshPolicy(param: SshApiUpdateSshPolicyRequest, options?: Configuration): Promise<SshPolicy> {
        return this.api.updateSshPolicy(param.moid, param.sshPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableStorageApi } from "./ObservableAPI";
import { StorageApiRequestFactory, StorageApiResponseProcessor} from "../apis/StorageApi";

export interface StorageApiCreateStorageDiskGroupPolicyRequest {
    /**
     * The &#39;storage.DiskGroupPolicy&#39; resource to create.
     * @type StorageDiskGroupPolicy
     * @memberof StorageApicreateStorageDiskGroupPolicy
     */
    storageDiskGroupPolicy: StorageDiskGroupPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApicreateStorageDiskGroupPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof StorageApicreateStorageDiskGroupPolicy
     */
    ifNoneMatch?: string
}

export interface StorageApiCreateStorageStoragePolicyRequest {
    /**
     * The &#39;storage.StoragePolicy&#39; resource to create.
     * @type StorageStoragePolicy
     * @memberof StorageApicreateStorageStoragePolicy
     */
    storageStoragePolicy: StorageStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApicreateStorageStoragePolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof StorageApicreateStorageStoragePolicy
     */
    ifNoneMatch?: string
}

export interface StorageApiDeleteStorageDiskGroupPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApideleteStorageDiskGroupPolicy
     */
    moid: string
}

export interface StorageApiDeleteStorageStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApideleteStorageStoragePolicy
     */
    moid: string
}

export interface StorageApiGetStorageControllerByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageControllerByMoid
     */
    moid: string
}

export interface StorageApiGetStorageControllerListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageControllerList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageControllerList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageControllerList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageControllerList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageControllerList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageControllerList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageControllerList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageControllerList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageControllerList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageControllerList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageControllerList
     */
    tags?: string
}

export interface StorageApiGetStorageDiskGroupPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageDiskGroupPolicyByMoid
     */
    moid: string
}

export interface StorageApiGetStorageDiskGroupPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageDiskGroupPolicyList
     */
    tags?: string
}

export interface StorageApiGetStorageEnclosureByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageEnclosureByMoid
     */
    moid: string
}

export interface StorageApiGetStorageEnclosureDiskByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskByMoid
     */
    moid: string
}

export interface StorageApiGetStorageEnclosureDiskListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskList
     */
    tags?: string
}

export interface StorageApiGetStorageEnclosureDiskSlotEpByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskSlotEpByMoid
     */
    moid: string
}

export interface StorageApiGetStorageEnclosureDiskSlotEpListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageEnclosureDiskSlotEpList
     */
    tags?: string
}

export interface StorageApiGetStorageEnclosureListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageEnclosureList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageEnclosureList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageEnclosureList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageEnclosureList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageEnclosureList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageEnclosureList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageEnclosureList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageEnclosureList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageEnclosureList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageEnclosureList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageEnclosureList
     */
    tags?: string
}

export interface StorageApiGetStorageFlexFlashControllerByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerByMoid
     */
    moid: string
}

export interface StorageApiGetStorageFlexFlashControllerListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerList
     */
    tags?: string
}

export interface StorageApiGetStorageFlexFlashControllerPropsByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerPropsByMoid
     */
    moid: string
}

export interface StorageApiGetStorageFlexFlashControllerPropsListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageFlexFlashControllerPropsList
     */
    tags?: string
}

export interface StorageApiGetStorageFlexFlashPhysicalDriveByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveByMoid
     */
    moid: string
}

export interface StorageApiGetStorageFlexFlashPhysicalDriveListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageFlexFlashPhysicalDriveList
     */
    tags?: string
}

export interface StorageApiGetStorageFlexFlashVirtualDriveByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageFlexFlashVirtualDriveByMoid
     */
    moid: string
}

export interface StorageApiGetStorageFlexFlashVirtualDriveListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageFlexFlashVirtualDriveList
     */
    tags?: string
}

export interface StorageApiGetStorageFlexUtilControllerByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageFlexUtilControllerByMoid
     */
    moid: string
}

export interface StorageApiGetStorageFlexUtilControllerListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageFlexUtilControllerList
     */
    tags?: string
}

export interface StorageApiGetStorageFlexUtilPhysicalDriveByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveByMoid
     */
    moid: string
}

export interface StorageApiGetStorageFlexUtilPhysicalDriveListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageFlexUtilPhysicalDriveList
     */
    tags?: string
}

export interface StorageApiGetStorageFlexUtilVirtualDriveByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageFlexUtilVirtualDriveByMoid
     */
    moid: string
}

export interface StorageApiGetStorageFlexUtilVirtualDriveListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageFlexUtilVirtualDriveList
     */
    tags?: string
}

export interface StorageApiGetStoragePhysicalDiskByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePhysicalDiskExtensionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskExtensionByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePhysicalDiskExtensionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskExtensionList
     */
    tags?: string
}

export interface StorageApiGetStoragePhysicalDiskListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskList
     */
    tags?: string
}

export interface StorageApiGetStoragePhysicalDiskUsageByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskUsageByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePhysicalDiskUsageListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePhysicalDiskUsageList
     */
    tags?: string
}

export interface StorageApiGetStoragePureArrayByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureArrayByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureArrayListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureArrayList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureArrayList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureArrayList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureArrayList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureArrayList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureArrayList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureArrayList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureArrayList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureArrayList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureArrayList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureArrayList
     */
    tags?: string
}

export interface StorageApiGetStoragePureControllerByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureControllerByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureControllerListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureControllerList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureControllerList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureControllerList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureControllerList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureControllerList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureControllerList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureControllerList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureControllerList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureControllerList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureControllerList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureControllerList
     */
    tags?: string
}

export interface StorageApiGetStoragePureDiskByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureDiskByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureDiskListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureDiskList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureDiskList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureDiskList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureDiskList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureDiskList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureDiskList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureDiskList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureDiskList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureDiskList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureDiskList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureDiskList
     */
    tags?: string
}

export interface StorageApiGetStoragePureHostByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureHostByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureHostGroupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureHostGroupByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureHostGroupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureHostGroupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureHostGroupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureHostGroupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureHostGroupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureHostGroupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureHostGroupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureHostGroupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureHostGroupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureHostGroupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureHostGroupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureHostGroupList
     */
    tags?: string
}

export interface StorageApiGetStoragePureHostListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureHostList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureHostList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureHostList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureHostList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureHostList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureHostList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureHostList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureHostList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureHostList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureHostList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureHostList
     */
    tags?: string
}

export interface StorageApiGetStoragePureHostLunByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureHostLunByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureHostLunListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureHostLunList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureHostLunList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureHostLunList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureHostLunList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureHostLunList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureHostLunList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureHostLunList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureHostLunList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureHostLunList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureHostLunList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureHostLunList
     */
    tags?: string
}

export interface StorageApiGetStoragePurePortByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePurePortByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePurePortListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePurePortList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePurePortList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePurePortList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePurePortList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePurePortList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePurePortList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePurePortList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePurePortList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePurePortList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePurePortList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePurePortList
     */
    tags?: string
}

export interface StorageApiGetStoragePureProtectionGroupByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureProtectionGroupListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupList
     */
    tags?: string
}

export interface StorageApiGetStoragePureProtectionGroupSnapshotByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureProtectionGroupSnapshotListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureProtectionGroupSnapshotList
     */
    tags?: string
}

export interface StorageApiGetStoragePureReplicationScheduleByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureReplicationScheduleByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureReplicationScheduleListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureReplicationScheduleList
     */
    tags?: string
}

export interface StorageApiGetStoragePureSnapshotScheduleByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureSnapshotScheduleByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureSnapshotScheduleListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureSnapshotScheduleList
     */
    tags?: string
}

export interface StorageApiGetStoragePureVolumeByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureVolumeByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureVolumeListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureVolumeList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureVolumeList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureVolumeList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureVolumeList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureVolumeList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureVolumeList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureVolumeList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureVolumeList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureVolumeList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureVolumeList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureVolumeList
     */
    tags?: string
}

export interface StorageApiGetStoragePureVolumeSnapshotByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStoragePureVolumeSnapshotByMoid
     */
    moid: string
}

export interface StorageApiGetStoragePureVolumeSnapshotListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStoragePureVolumeSnapshotList
     */
    tags?: string
}

export interface StorageApiGetStorageSasExpanderByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageSasExpanderByMoid
     */
    moid: string
}

export interface StorageApiGetStorageSasExpanderListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageSasExpanderList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageSasExpanderList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageSasExpanderList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageSasExpanderList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageSasExpanderList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageSasExpanderList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageSasExpanderList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageSasExpanderList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageSasExpanderList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageSasExpanderList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageSasExpanderList
     */
    tags?: string
}

export interface StorageApiGetStorageSasPortByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageSasPortByMoid
     */
    moid: string
}

export interface StorageApiGetStorageSasPortListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageSasPortList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageSasPortList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageSasPortList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageSasPortList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageSasPortList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageSasPortList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageSasPortList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageSasPortList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageSasPortList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageSasPortList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageSasPortList
     */
    tags?: string
}

export interface StorageApiGetStorageStoragePolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageStoragePolicyByMoid
     */
    moid: string
}

export interface StorageApiGetStorageStoragePolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageStoragePolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageStoragePolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageStoragePolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageStoragePolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageStoragePolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageStoragePolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageStoragePolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageStoragePolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageStoragePolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageStoragePolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageStoragePolicyList
     */
    tags?: string
}

export interface StorageApiGetStorageVdMemberEpByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageVdMemberEpByMoid
     */
    moid: string
}

export interface StorageApiGetStorageVdMemberEpListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageVdMemberEpList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageVdMemberEpList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageVdMemberEpList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageVdMemberEpList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageVdMemberEpList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageVdMemberEpList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageVdMemberEpList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageVdMemberEpList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageVdMemberEpList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageVdMemberEpList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageVdMemberEpList
     */
    tags?: string
}

export interface StorageApiGetStorageVirtualDriveByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveByMoid
     */
    moid: string
}

export interface StorageApiGetStorageVirtualDriveExtensionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveExtensionByMoid
     */
    moid: string
}

export interface StorageApiGetStorageVirtualDriveExtensionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveExtensionList
     */
    tags?: string
}

export interface StorageApiGetStorageVirtualDriveListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof StorageApigetStorageVirtualDriveList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof StorageApigetStorageVirtualDriveList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof StorageApigetStorageVirtualDriveList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof StorageApigetStorageVirtualDriveList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof StorageApigetStorageVirtualDriveList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof StorageApigetStorageVirtualDriveList
     */
    tags?: string
}

export interface StorageApiPatchStorageControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageController
     */
    moid: string
    /**
     * The &#39;storage.Controller&#39; resource to update.
     * @type StorageController
     * @memberof StorageApipatchStorageController
     */
    storageController: StorageController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageController
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageDiskGroupPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageDiskGroupPolicy
     */
    moid: string
    /**
     * The &#39;storage.DiskGroupPolicy&#39; resource to update.
     * @type StorageDiskGroupPolicy
     * @memberof StorageApipatchStorageDiskGroupPolicy
     */
    storageDiskGroupPolicy: StorageDiskGroupPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageDiskGroupPolicy
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageEnclosureRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageEnclosure
     */
    moid: string
    /**
     * The &#39;storage.Enclosure&#39; resource to update.
     * @type StorageEnclosure
     * @memberof StorageApipatchStorageEnclosure
     */
    storageEnclosure: StorageEnclosure
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageEnclosure
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageEnclosureDiskRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageEnclosureDisk
     */
    moid: string
    /**
     * The &#39;storage.EnclosureDisk&#39; resource to update.
     * @type StorageEnclosureDisk
     * @memberof StorageApipatchStorageEnclosureDisk
     */
    storageEnclosureDisk: StorageEnclosureDisk
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageEnclosureDisk
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageEnclosureDiskSlotEpRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageEnclosureDiskSlotEp
     */
    moid: string
    /**
     * The &#39;storage.EnclosureDiskSlotEp&#39; resource to update.
     * @type StorageEnclosureDiskSlotEp
     * @memberof StorageApipatchStorageEnclosureDiskSlotEp
     */
    storageEnclosureDiskSlotEp: StorageEnclosureDiskSlotEp
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageEnclosureDiskSlotEp
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageFlexFlashControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageFlexFlashController
     */
    moid: string
    /**
     * The &#39;storage.FlexFlashController&#39; resource to update.
     * @type StorageFlexFlashController
     * @memberof StorageApipatchStorageFlexFlashController
     */
    storageFlexFlashController: StorageFlexFlashController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageFlexFlashController
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageFlexFlashControllerPropsRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageFlexFlashControllerProps
     */
    moid: string
    /**
     * The &#39;storage.FlexFlashControllerProps&#39; resource to update.
     * @type StorageFlexFlashControllerProps
     * @memberof StorageApipatchStorageFlexFlashControllerProps
     */
    storageFlexFlashControllerProps: StorageFlexFlashControllerProps
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageFlexFlashControllerProps
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageFlexFlashPhysicalDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageFlexFlashPhysicalDrive
     */
    moid: string
    /**
     * The &#39;storage.FlexFlashPhysicalDrive&#39; resource to update.
     * @type StorageFlexFlashPhysicalDrive
     * @memberof StorageApipatchStorageFlexFlashPhysicalDrive
     */
    storageFlexFlashPhysicalDrive: StorageFlexFlashPhysicalDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageFlexFlashPhysicalDrive
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageFlexFlashVirtualDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageFlexFlashVirtualDrive
     */
    moid: string
    /**
     * The &#39;storage.FlexFlashVirtualDrive&#39; resource to update.
     * @type StorageFlexFlashVirtualDrive
     * @memberof StorageApipatchStorageFlexFlashVirtualDrive
     */
    storageFlexFlashVirtualDrive: StorageFlexFlashVirtualDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageFlexFlashVirtualDrive
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageFlexUtilControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageFlexUtilController
     */
    moid: string
    /**
     * The &#39;storage.FlexUtilController&#39; resource to update.
     * @type StorageFlexUtilController
     * @memberof StorageApipatchStorageFlexUtilController
     */
    storageFlexUtilController: StorageFlexUtilController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageFlexUtilController
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageFlexUtilPhysicalDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageFlexUtilPhysicalDrive
     */
    moid: string
    /**
     * The &#39;storage.FlexUtilPhysicalDrive&#39; resource to update.
     * @type StorageFlexUtilPhysicalDrive
     * @memberof StorageApipatchStorageFlexUtilPhysicalDrive
     */
    storageFlexUtilPhysicalDrive: StorageFlexUtilPhysicalDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageFlexUtilPhysicalDrive
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageFlexUtilVirtualDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageFlexUtilVirtualDrive
     */
    moid: string
    /**
     * The &#39;storage.FlexUtilVirtualDrive&#39; resource to update.
     * @type StorageFlexUtilVirtualDrive
     * @memberof StorageApipatchStorageFlexUtilVirtualDrive
     */
    storageFlexUtilVirtualDrive: StorageFlexUtilVirtualDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageFlexUtilVirtualDrive
     */
    ifMatch?: string
}

export interface StorageApiPatchStoragePhysicalDiskRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStoragePhysicalDisk
     */
    moid: string
    /**
     * The &#39;storage.PhysicalDisk&#39; resource to update.
     * @type StoragePhysicalDisk
     * @memberof StorageApipatchStoragePhysicalDisk
     */
    storagePhysicalDisk: StoragePhysicalDisk
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStoragePhysicalDisk
     */
    ifMatch?: string
}

export interface StorageApiPatchStoragePhysicalDiskExtensionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStoragePhysicalDiskExtension
     */
    moid: string
    /**
     * The &#39;storage.PhysicalDiskExtension&#39; resource to update.
     * @type StoragePhysicalDiskExtension
     * @memberof StorageApipatchStoragePhysicalDiskExtension
     */
    storagePhysicalDiskExtension: StoragePhysicalDiskExtension
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStoragePhysicalDiskExtension
     */
    ifMatch?: string
}

export interface StorageApiPatchStoragePhysicalDiskUsageRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStoragePhysicalDiskUsage
     */
    moid: string
    /**
     * The &#39;storage.PhysicalDiskUsage&#39; resource to update.
     * @type StoragePhysicalDiskUsage
     * @memberof StorageApipatchStoragePhysicalDiskUsage
     */
    storagePhysicalDiskUsage: StoragePhysicalDiskUsage
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStoragePhysicalDiskUsage
     */
    ifMatch?: string
}

export interface StorageApiPatchStoragePureArrayRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStoragePureArray
     */
    moid: string
    /**
     * The &#39;storage.PureArray&#39; resource to update.
     * @type StoragePureArray
     * @memberof StorageApipatchStoragePureArray
     */
    storagePureArray: StoragePureArray
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStoragePureArray
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageSasExpanderRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageSasExpander
     */
    moid: string
    /**
     * The &#39;storage.SasExpander&#39; resource to update.
     * @type StorageSasExpander
     * @memberof StorageApipatchStorageSasExpander
     */
    storageSasExpander: StorageSasExpander
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageSasExpander
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageSasPortRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageSasPort
     */
    moid: string
    /**
     * The &#39;storage.SasPort&#39; resource to update.
     * @type StorageSasPort
     * @memberof StorageApipatchStorageSasPort
     */
    storageSasPort: StorageSasPort
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageSasPort
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageStoragePolicy
     */
    moid: string
    /**
     * The &#39;storage.StoragePolicy&#39; resource to update.
     * @type StorageStoragePolicy
     * @memberof StorageApipatchStorageStoragePolicy
     */
    storageStoragePolicy: StorageStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageStoragePolicy
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageVdMemberEpRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageVdMemberEp
     */
    moid: string
    /**
     * The &#39;storage.VdMemberEp&#39; resource to update.
     * @type StorageVdMemberEp
     * @memberof StorageApipatchStorageVdMemberEp
     */
    storageVdMemberEp: StorageVdMemberEp
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageVdMemberEp
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageVirtualDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageVirtualDrive
     */
    moid: string
    /**
     * The &#39;storage.VirtualDrive&#39; resource to update.
     * @type StorageVirtualDrive
     * @memberof StorageApipatchStorageVirtualDrive
     */
    storageVirtualDrive: StorageVirtualDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageVirtualDrive
     */
    ifMatch?: string
}

export interface StorageApiPatchStorageVirtualDriveExtensionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApipatchStorageVirtualDriveExtension
     */
    moid: string
    /**
     * The &#39;storage.VirtualDriveExtension&#39; resource to update.
     * @type StorageVirtualDriveExtension
     * @memberof StorageApipatchStorageVirtualDriveExtension
     */
    storageVirtualDriveExtension: StorageVirtualDriveExtension
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApipatchStorageVirtualDriveExtension
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageController
     */
    moid: string
    /**
     * The &#39;storage.Controller&#39; resource to update.
     * @type StorageController
     * @memberof StorageApiupdateStorageController
     */
    storageController: StorageController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageController
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageDiskGroupPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageDiskGroupPolicy
     */
    moid: string
    /**
     * The &#39;storage.DiskGroupPolicy&#39; resource to update.
     * @type StorageDiskGroupPolicy
     * @memberof StorageApiupdateStorageDiskGroupPolicy
     */
    storageDiskGroupPolicy: StorageDiskGroupPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageDiskGroupPolicy
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageEnclosureRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageEnclosure
     */
    moid: string
    /**
     * The &#39;storage.Enclosure&#39; resource to update.
     * @type StorageEnclosure
     * @memberof StorageApiupdateStorageEnclosure
     */
    storageEnclosure: StorageEnclosure
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageEnclosure
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageEnclosureDiskRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageEnclosureDisk
     */
    moid: string
    /**
     * The &#39;storage.EnclosureDisk&#39; resource to update.
     * @type StorageEnclosureDisk
     * @memberof StorageApiupdateStorageEnclosureDisk
     */
    storageEnclosureDisk: StorageEnclosureDisk
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageEnclosureDisk
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageEnclosureDiskSlotEpRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageEnclosureDiskSlotEp
     */
    moid: string
    /**
     * The &#39;storage.EnclosureDiskSlotEp&#39; resource to update.
     * @type StorageEnclosureDiskSlotEp
     * @memberof StorageApiupdateStorageEnclosureDiskSlotEp
     */
    storageEnclosureDiskSlotEp: StorageEnclosureDiskSlotEp
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageEnclosureDiskSlotEp
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageFlexFlashControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageFlexFlashController
     */
    moid: string
    /**
     * The &#39;storage.FlexFlashController&#39; resource to update.
     * @type StorageFlexFlashController
     * @memberof StorageApiupdateStorageFlexFlashController
     */
    storageFlexFlashController: StorageFlexFlashController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageFlexFlashController
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageFlexFlashControllerPropsRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageFlexFlashControllerProps
     */
    moid: string
    /**
     * The &#39;storage.FlexFlashControllerProps&#39; resource to update.
     * @type StorageFlexFlashControllerProps
     * @memberof StorageApiupdateStorageFlexFlashControllerProps
     */
    storageFlexFlashControllerProps: StorageFlexFlashControllerProps
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageFlexFlashControllerProps
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageFlexFlashPhysicalDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageFlexFlashPhysicalDrive
     */
    moid: string
    /**
     * The &#39;storage.FlexFlashPhysicalDrive&#39; resource to update.
     * @type StorageFlexFlashPhysicalDrive
     * @memberof StorageApiupdateStorageFlexFlashPhysicalDrive
     */
    storageFlexFlashPhysicalDrive: StorageFlexFlashPhysicalDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageFlexFlashPhysicalDrive
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageFlexFlashVirtualDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageFlexFlashVirtualDrive
     */
    moid: string
    /**
     * The &#39;storage.FlexFlashVirtualDrive&#39; resource to update.
     * @type StorageFlexFlashVirtualDrive
     * @memberof StorageApiupdateStorageFlexFlashVirtualDrive
     */
    storageFlexFlashVirtualDrive: StorageFlexFlashVirtualDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageFlexFlashVirtualDrive
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageFlexUtilControllerRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageFlexUtilController
     */
    moid: string
    /**
     * The &#39;storage.FlexUtilController&#39; resource to update.
     * @type StorageFlexUtilController
     * @memberof StorageApiupdateStorageFlexUtilController
     */
    storageFlexUtilController: StorageFlexUtilController
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageFlexUtilController
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageFlexUtilPhysicalDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageFlexUtilPhysicalDrive
     */
    moid: string
    /**
     * The &#39;storage.FlexUtilPhysicalDrive&#39; resource to update.
     * @type StorageFlexUtilPhysicalDrive
     * @memberof StorageApiupdateStorageFlexUtilPhysicalDrive
     */
    storageFlexUtilPhysicalDrive: StorageFlexUtilPhysicalDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageFlexUtilPhysicalDrive
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageFlexUtilVirtualDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageFlexUtilVirtualDrive
     */
    moid: string
    /**
     * The &#39;storage.FlexUtilVirtualDrive&#39; resource to update.
     * @type StorageFlexUtilVirtualDrive
     * @memberof StorageApiupdateStorageFlexUtilVirtualDrive
     */
    storageFlexUtilVirtualDrive: StorageFlexUtilVirtualDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageFlexUtilVirtualDrive
     */
    ifMatch?: string
}

export interface StorageApiUpdateStoragePhysicalDiskRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStoragePhysicalDisk
     */
    moid: string
    /**
     * The &#39;storage.PhysicalDisk&#39; resource to update.
     * @type StoragePhysicalDisk
     * @memberof StorageApiupdateStoragePhysicalDisk
     */
    storagePhysicalDisk: StoragePhysicalDisk
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStoragePhysicalDisk
     */
    ifMatch?: string
}

export interface StorageApiUpdateStoragePhysicalDiskExtensionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStoragePhysicalDiskExtension
     */
    moid: string
    /**
     * The &#39;storage.PhysicalDiskExtension&#39; resource to update.
     * @type StoragePhysicalDiskExtension
     * @memberof StorageApiupdateStoragePhysicalDiskExtension
     */
    storagePhysicalDiskExtension: StoragePhysicalDiskExtension
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStoragePhysicalDiskExtension
     */
    ifMatch?: string
}

export interface StorageApiUpdateStoragePhysicalDiskUsageRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStoragePhysicalDiskUsage
     */
    moid: string
    /**
     * The &#39;storage.PhysicalDiskUsage&#39; resource to update.
     * @type StoragePhysicalDiskUsage
     * @memberof StorageApiupdateStoragePhysicalDiskUsage
     */
    storagePhysicalDiskUsage: StoragePhysicalDiskUsage
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStoragePhysicalDiskUsage
     */
    ifMatch?: string
}

export interface StorageApiUpdateStoragePureArrayRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStoragePureArray
     */
    moid: string
    /**
     * The &#39;storage.PureArray&#39; resource to update.
     * @type StoragePureArray
     * @memberof StorageApiupdateStoragePureArray
     */
    storagePureArray: StoragePureArray
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStoragePureArray
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageSasExpanderRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageSasExpander
     */
    moid: string
    /**
     * The &#39;storage.SasExpander&#39; resource to update.
     * @type StorageSasExpander
     * @memberof StorageApiupdateStorageSasExpander
     */
    storageSasExpander: StorageSasExpander
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageSasExpander
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageSasPortRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageSasPort
     */
    moid: string
    /**
     * The &#39;storage.SasPort&#39; resource to update.
     * @type StorageSasPort
     * @memberof StorageApiupdateStorageSasPort
     */
    storageSasPort: StorageSasPort
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageSasPort
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageStoragePolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageStoragePolicy
     */
    moid: string
    /**
     * The &#39;storage.StoragePolicy&#39; resource to update.
     * @type StorageStoragePolicy
     * @memberof StorageApiupdateStorageStoragePolicy
     */
    storageStoragePolicy: StorageStoragePolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageStoragePolicy
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageVdMemberEpRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageVdMemberEp
     */
    moid: string
    /**
     * The &#39;storage.VdMemberEp&#39; resource to update.
     * @type StorageVdMemberEp
     * @memberof StorageApiupdateStorageVdMemberEp
     */
    storageVdMemberEp: StorageVdMemberEp
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageVdMemberEp
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageVirtualDriveRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageVirtualDrive
     */
    moid: string
    /**
     * The &#39;storage.VirtualDrive&#39; resource to update.
     * @type StorageVirtualDrive
     * @memberof StorageApiupdateStorageVirtualDrive
     */
    storageVirtualDrive: StorageVirtualDrive
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageVirtualDrive
     */
    ifMatch?: string
}

export interface StorageApiUpdateStorageVirtualDriveExtensionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof StorageApiupdateStorageVirtualDriveExtension
     */
    moid: string
    /**
     * The &#39;storage.VirtualDriveExtension&#39; resource to update.
     * @type StorageVirtualDriveExtension
     * @memberof StorageApiupdateStorageVirtualDriveExtension
     */
    storageVirtualDriveExtension: StorageVirtualDriveExtension
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof StorageApiupdateStorageVirtualDriveExtension
     */
    ifMatch?: string
}


export class ObjectStorageApi {
    private api: ObservableStorageApi

    public constructor(configuration: Configuration, requestFactory?: StorageApiRequestFactory, responseProcessor?: StorageApiResponseProcessor) {
        this.api = new ObservableStorageApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'storage.DiskGroupPolicy' resource.
     * @param param the request object
     */
    public createStorageDiskGroupPolicy(param: StorageApiCreateStorageDiskGroupPolicyRequest, options?: Configuration): Promise<StorageDiskGroupPolicy> {
        return this.api.createStorageDiskGroupPolicy(param.storageDiskGroupPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'storage.StoragePolicy' resource.
     * @param param the request object
     */
    public createStorageStoragePolicy(param: StorageApiCreateStorageStoragePolicyRequest, options?: Configuration): Promise<StorageStoragePolicy> {
        return this.api.createStorageStoragePolicy(param.storageStoragePolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'storage.DiskGroupPolicy' resource.
     * @param param the request object
     */
    public deleteStorageDiskGroupPolicy(param: StorageApiDeleteStorageDiskGroupPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteStorageDiskGroupPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'storage.StoragePolicy' resource.
     * @param param the request object
     */
    public deleteStorageStoragePolicy(param: StorageApiDeleteStorageStoragePolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteStorageStoragePolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.Controller' resource.
     * @param param the request object
     */
    public getStorageControllerByMoid(param: StorageApiGetStorageControllerByMoidRequest, options?: Configuration): Promise<StorageController> {
        return this.api.getStorageControllerByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.Controller' resource.
     * @param param the request object
     */
    public getStorageControllerList(param: StorageApiGetStorageControllerListRequest, options?: Configuration): Promise<StorageControllerResponse> {
        return this.api.getStorageControllerList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.DiskGroupPolicy' resource.
     * @param param the request object
     */
    public getStorageDiskGroupPolicyByMoid(param: StorageApiGetStorageDiskGroupPolicyByMoidRequest, options?: Configuration): Promise<StorageDiskGroupPolicy> {
        return this.api.getStorageDiskGroupPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.DiskGroupPolicy' resource.
     * @param param the request object
     */
    public getStorageDiskGroupPolicyList(param: StorageApiGetStorageDiskGroupPolicyListRequest, options?: Configuration): Promise<StorageDiskGroupPolicyResponse> {
        return this.api.getStorageDiskGroupPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.Enclosure' resource.
     * @param param the request object
     */
    public getStorageEnclosureByMoid(param: StorageApiGetStorageEnclosureByMoidRequest, options?: Configuration): Promise<StorageEnclosure> {
        return this.api.getStorageEnclosureByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.EnclosureDisk' resource.
     * @param param the request object
     */
    public getStorageEnclosureDiskByMoid(param: StorageApiGetStorageEnclosureDiskByMoidRequest, options?: Configuration): Promise<StorageEnclosureDisk> {
        return this.api.getStorageEnclosureDiskByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.EnclosureDisk' resource.
     * @param param the request object
     */
    public getStorageEnclosureDiskList(param: StorageApiGetStorageEnclosureDiskListRequest, options?: Configuration): Promise<StorageEnclosureDiskResponse> {
        return this.api.getStorageEnclosureDiskList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.EnclosureDiskSlotEp' resource.
     * @param param the request object
     */
    public getStorageEnclosureDiskSlotEpByMoid(param: StorageApiGetStorageEnclosureDiskSlotEpByMoidRequest, options?: Configuration): Promise<StorageEnclosureDiskSlotEp> {
        return this.api.getStorageEnclosureDiskSlotEpByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.EnclosureDiskSlotEp' resource.
     * @param param the request object
     */
    public getStorageEnclosureDiskSlotEpList(param: StorageApiGetStorageEnclosureDiskSlotEpListRequest, options?: Configuration): Promise<StorageEnclosureDiskSlotEpResponse> {
        return this.api.getStorageEnclosureDiskSlotEpList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.Enclosure' resource.
     * @param param the request object
     */
    public getStorageEnclosureList(param: StorageApiGetStorageEnclosureListRequest, options?: Configuration): Promise<StorageEnclosureResponse> {
        return this.api.getStorageEnclosureList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexFlashController' resource.
     * @param param the request object
     */
    public getStorageFlexFlashControllerByMoid(param: StorageApiGetStorageFlexFlashControllerByMoidRequest, options?: Configuration): Promise<StorageFlexFlashController> {
        return this.api.getStorageFlexFlashControllerByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexFlashController' resource.
     * @param param the request object
     */
    public getStorageFlexFlashControllerList(param: StorageApiGetStorageFlexFlashControllerListRequest, options?: Configuration): Promise<StorageFlexFlashControllerResponse> {
        return this.api.getStorageFlexFlashControllerList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexFlashControllerProps' resource.
     * @param param the request object
     */
    public getStorageFlexFlashControllerPropsByMoid(param: StorageApiGetStorageFlexFlashControllerPropsByMoidRequest, options?: Configuration): Promise<StorageFlexFlashControllerProps> {
        return this.api.getStorageFlexFlashControllerPropsByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexFlashControllerProps' resource.
     * @param param the request object
     */
    public getStorageFlexFlashControllerPropsList(param: StorageApiGetStorageFlexFlashControllerPropsListRequest, options?: Configuration): Promise<StorageFlexFlashControllerPropsResponse> {
        return this.api.getStorageFlexFlashControllerPropsList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexFlashPhysicalDrive' resource.
     * @param param the request object
     */
    public getStorageFlexFlashPhysicalDriveByMoid(param: StorageApiGetStorageFlexFlashPhysicalDriveByMoidRequest, options?: Configuration): Promise<StorageFlexFlashPhysicalDrive> {
        return this.api.getStorageFlexFlashPhysicalDriveByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexFlashPhysicalDrive' resource.
     * @param param the request object
     */
    public getStorageFlexFlashPhysicalDriveList(param: StorageApiGetStorageFlexFlashPhysicalDriveListRequest, options?: Configuration): Promise<StorageFlexFlashPhysicalDriveResponse> {
        return this.api.getStorageFlexFlashPhysicalDriveList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexFlashVirtualDrive' resource.
     * @param param the request object
     */
    public getStorageFlexFlashVirtualDriveByMoid(param: StorageApiGetStorageFlexFlashVirtualDriveByMoidRequest, options?: Configuration): Promise<StorageFlexFlashVirtualDrive> {
        return this.api.getStorageFlexFlashVirtualDriveByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexFlashVirtualDrive' resource.
     * @param param the request object
     */
    public getStorageFlexFlashVirtualDriveList(param: StorageApiGetStorageFlexFlashVirtualDriveListRequest, options?: Configuration): Promise<StorageFlexFlashVirtualDriveResponse> {
        return this.api.getStorageFlexFlashVirtualDriveList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexUtilController' resource.
     * @param param the request object
     */
    public getStorageFlexUtilControllerByMoid(param: StorageApiGetStorageFlexUtilControllerByMoidRequest, options?: Configuration): Promise<StorageFlexUtilController> {
        return this.api.getStorageFlexUtilControllerByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexUtilController' resource.
     * @param param the request object
     */
    public getStorageFlexUtilControllerList(param: StorageApiGetStorageFlexUtilControllerListRequest, options?: Configuration): Promise<StorageFlexUtilControllerResponse> {
        return this.api.getStorageFlexUtilControllerList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexUtilPhysicalDrive' resource.
     * @param param the request object
     */
    public getStorageFlexUtilPhysicalDriveByMoid(param: StorageApiGetStorageFlexUtilPhysicalDriveByMoidRequest, options?: Configuration): Promise<StorageFlexUtilPhysicalDrive> {
        return this.api.getStorageFlexUtilPhysicalDriveByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexUtilPhysicalDrive' resource.
     * @param param the request object
     */
    public getStorageFlexUtilPhysicalDriveList(param: StorageApiGetStorageFlexUtilPhysicalDriveListRequest, options?: Configuration): Promise<StorageFlexUtilPhysicalDriveResponse> {
        return this.api.getStorageFlexUtilPhysicalDriveList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexUtilVirtualDrive' resource.
     * @param param the request object
     */
    public getStorageFlexUtilVirtualDriveByMoid(param: StorageApiGetStorageFlexUtilVirtualDriveByMoidRequest, options?: Configuration): Promise<StorageFlexUtilVirtualDrive> {
        return this.api.getStorageFlexUtilVirtualDriveByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.FlexUtilVirtualDrive' resource.
     * @param param the request object
     */
    public getStorageFlexUtilVirtualDriveList(param: StorageApiGetStorageFlexUtilVirtualDriveListRequest, options?: Configuration): Promise<StorageFlexUtilVirtualDriveResponse> {
        return this.api.getStorageFlexUtilVirtualDriveList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PhysicalDisk' resource.
     * @param param the request object
     */
    public getStoragePhysicalDiskByMoid(param: StorageApiGetStoragePhysicalDiskByMoidRequest, options?: Configuration): Promise<StoragePhysicalDisk> {
        return this.api.getStoragePhysicalDiskByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PhysicalDiskExtension' resource.
     * @param param the request object
     */
    public getStoragePhysicalDiskExtensionByMoid(param: StorageApiGetStoragePhysicalDiskExtensionByMoidRequest, options?: Configuration): Promise<StoragePhysicalDiskExtension> {
        return this.api.getStoragePhysicalDiskExtensionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PhysicalDiskExtension' resource.
     * @param param the request object
     */
    public getStoragePhysicalDiskExtensionList(param: StorageApiGetStoragePhysicalDiskExtensionListRequest, options?: Configuration): Promise<StoragePhysicalDiskExtensionResponse> {
        return this.api.getStoragePhysicalDiskExtensionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PhysicalDisk' resource.
     * @param param the request object
     */
    public getStoragePhysicalDiskList(param: StorageApiGetStoragePhysicalDiskListRequest, options?: Configuration): Promise<StoragePhysicalDiskResponse> {
        return this.api.getStoragePhysicalDiskList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PhysicalDiskUsage' resource.
     * @param param the request object
     */
    public getStoragePhysicalDiskUsageByMoid(param: StorageApiGetStoragePhysicalDiskUsageByMoidRequest, options?: Configuration): Promise<StoragePhysicalDiskUsage> {
        return this.api.getStoragePhysicalDiskUsageByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PhysicalDiskUsage' resource.
     * @param param the request object
     */
    public getStoragePhysicalDiskUsageList(param: StorageApiGetStoragePhysicalDiskUsageListRequest, options?: Configuration): Promise<StoragePhysicalDiskUsageResponse> {
        return this.api.getStoragePhysicalDiskUsageList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureArray' resource.
     * @param param the request object
     */
    public getStoragePureArrayByMoid(param: StorageApiGetStoragePureArrayByMoidRequest, options?: Configuration): Promise<StoragePureArray> {
        return this.api.getStoragePureArrayByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureArray' resource.
     * @param param the request object
     */
    public getStoragePureArrayList(param: StorageApiGetStoragePureArrayListRequest, options?: Configuration): Promise<StoragePureArrayResponse> {
        return this.api.getStoragePureArrayList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureController' resource.
     * @param param the request object
     */
    public getStoragePureControllerByMoid(param: StorageApiGetStoragePureControllerByMoidRequest, options?: Configuration): Promise<StoragePureController> {
        return this.api.getStoragePureControllerByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureController' resource.
     * @param param the request object
     */
    public getStoragePureControllerList(param: StorageApiGetStoragePureControllerListRequest, options?: Configuration): Promise<StoragePureControllerResponse> {
        return this.api.getStoragePureControllerList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureDisk' resource.
     * @param param the request object
     */
    public getStoragePureDiskByMoid(param: StorageApiGetStoragePureDiskByMoidRequest, options?: Configuration): Promise<StoragePureDisk> {
        return this.api.getStoragePureDiskByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureDisk' resource.
     * @param param the request object
     */
    public getStoragePureDiskList(param: StorageApiGetStoragePureDiskListRequest, options?: Configuration): Promise<StoragePureDiskResponse> {
        return this.api.getStoragePureDiskList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureHost' resource.
     * @param param the request object
     */
    public getStoragePureHostByMoid(param: StorageApiGetStoragePureHostByMoidRequest, options?: Configuration): Promise<StoragePureHost> {
        return this.api.getStoragePureHostByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureHostGroup' resource.
     * @param param the request object
     */
    public getStoragePureHostGroupByMoid(param: StorageApiGetStoragePureHostGroupByMoidRequest, options?: Configuration): Promise<StoragePureHostGroup> {
        return this.api.getStoragePureHostGroupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureHostGroup' resource.
     * @param param the request object
     */
    public getStoragePureHostGroupList(param: StorageApiGetStoragePureHostGroupListRequest, options?: Configuration): Promise<StoragePureHostGroupResponse> {
        return this.api.getStoragePureHostGroupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureHost' resource.
     * @param param the request object
     */
    public getStoragePureHostList(param: StorageApiGetStoragePureHostListRequest, options?: Configuration): Promise<StoragePureHostResponse> {
        return this.api.getStoragePureHostList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureHostLun' resource.
     * @param param the request object
     */
    public getStoragePureHostLunByMoid(param: StorageApiGetStoragePureHostLunByMoidRequest, options?: Configuration): Promise<StoragePureHostLun> {
        return this.api.getStoragePureHostLunByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureHostLun' resource.
     * @param param the request object
     */
    public getStoragePureHostLunList(param: StorageApiGetStoragePureHostLunListRequest, options?: Configuration): Promise<StoragePureHostLunResponse> {
        return this.api.getStoragePureHostLunList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PurePort' resource.
     * @param param the request object
     */
    public getStoragePurePortByMoid(param: StorageApiGetStoragePurePortByMoidRequest, options?: Configuration): Promise<StoragePurePort> {
        return this.api.getStoragePurePortByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PurePort' resource.
     * @param param the request object
     */
    public getStoragePurePortList(param: StorageApiGetStoragePurePortListRequest, options?: Configuration): Promise<StoragePurePortResponse> {
        return this.api.getStoragePurePortList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureProtectionGroup' resource.
     * @param param the request object
     */
    public getStoragePureProtectionGroupByMoid(param: StorageApiGetStoragePureProtectionGroupByMoidRequest, options?: Configuration): Promise<StoragePureProtectionGroup> {
        return this.api.getStoragePureProtectionGroupByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureProtectionGroup' resource.
     * @param param the request object
     */
    public getStoragePureProtectionGroupList(param: StorageApiGetStoragePureProtectionGroupListRequest, options?: Configuration): Promise<StoragePureProtectionGroupResponse> {
        return this.api.getStoragePureProtectionGroupList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureProtectionGroupSnapshot' resource.
     * @param param the request object
     */
    public getStoragePureProtectionGroupSnapshotByMoid(param: StorageApiGetStoragePureProtectionGroupSnapshotByMoidRequest, options?: Configuration): Promise<StoragePureProtectionGroupSnapshot> {
        return this.api.getStoragePureProtectionGroupSnapshotByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureProtectionGroupSnapshot' resource.
     * @param param the request object
     */
    public getStoragePureProtectionGroupSnapshotList(param: StorageApiGetStoragePureProtectionGroupSnapshotListRequest, options?: Configuration): Promise<StoragePureProtectionGroupSnapshotResponse> {
        return this.api.getStoragePureProtectionGroupSnapshotList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureReplicationSchedule' resource.
     * @param param the request object
     */
    public getStoragePureReplicationScheduleByMoid(param: StorageApiGetStoragePureReplicationScheduleByMoidRequest, options?: Configuration): Promise<StoragePureReplicationSchedule> {
        return this.api.getStoragePureReplicationScheduleByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureReplicationSchedule' resource.
     * @param param the request object
     */
    public getStoragePureReplicationScheduleList(param: StorageApiGetStoragePureReplicationScheduleListRequest, options?: Configuration): Promise<StoragePureReplicationScheduleResponse> {
        return this.api.getStoragePureReplicationScheduleList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureSnapshotSchedule' resource.
     * @param param the request object
     */
    public getStoragePureSnapshotScheduleByMoid(param: StorageApiGetStoragePureSnapshotScheduleByMoidRequest, options?: Configuration): Promise<StoragePureSnapshotSchedule> {
        return this.api.getStoragePureSnapshotScheduleByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureSnapshotSchedule' resource.
     * @param param the request object
     */
    public getStoragePureSnapshotScheduleList(param: StorageApiGetStoragePureSnapshotScheduleListRequest, options?: Configuration): Promise<StoragePureSnapshotScheduleResponse> {
        return this.api.getStoragePureSnapshotScheduleList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureVolume' resource.
     * @param param the request object
     */
    public getStoragePureVolumeByMoid(param: StorageApiGetStoragePureVolumeByMoidRequest, options?: Configuration): Promise<StoragePureVolume> {
        return this.api.getStoragePureVolumeByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureVolume' resource.
     * @param param the request object
     */
    public getStoragePureVolumeList(param: StorageApiGetStoragePureVolumeListRequest, options?: Configuration): Promise<StoragePureVolumeResponse> {
        return this.api.getStoragePureVolumeList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureVolumeSnapshot' resource.
     * @param param the request object
     */
    public getStoragePureVolumeSnapshotByMoid(param: StorageApiGetStoragePureVolumeSnapshotByMoidRequest, options?: Configuration): Promise<StoragePureVolumeSnapshot> {
        return this.api.getStoragePureVolumeSnapshotByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.PureVolumeSnapshot' resource.
     * @param param the request object
     */
    public getStoragePureVolumeSnapshotList(param: StorageApiGetStoragePureVolumeSnapshotListRequest, options?: Configuration): Promise<StoragePureVolumeSnapshotResponse> {
        return this.api.getStoragePureVolumeSnapshotList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.SasExpander' resource.
     * @param param the request object
     */
    public getStorageSasExpanderByMoid(param: StorageApiGetStorageSasExpanderByMoidRequest, options?: Configuration): Promise<StorageSasExpander> {
        return this.api.getStorageSasExpanderByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.SasExpander' resource.
     * @param param the request object
     */
    public getStorageSasExpanderList(param: StorageApiGetStorageSasExpanderListRequest, options?: Configuration): Promise<StorageSasExpanderResponse> {
        return this.api.getStorageSasExpanderList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.SasPort' resource.
     * @param param the request object
     */
    public getStorageSasPortByMoid(param: StorageApiGetStorageSasPortByMoidRequest, options?: Configuration): Promise<StorageSasPort> {
        return this.api.getStorageSasPortByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.SasPort' resource.
     * @param param the request object
     */
    public getStorageSasPortList(param: StorageApiGetStorageSasPortListRequest, options?: Configuration): Promise<StorageSasPortResponse> {
        return this.api.getStorageSasPortList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.StoragePolicy' resource.
     * @param param the request object
     */
    public getStorageStoragePolicyByMoid(param: StorageApiGetStorageStoragePolicyByMoidRequest, options?: Configuration): Promise<StorageStoragePolicy> {
        return this.api.getStorageStoragePolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.StoragePolicy' resource.
     * @param param the request object
     */
    public getStorageStoragePolicyList(param: StorageApiGetStorageStoragePolicyListRequest, options?: Configuration): Promise<StorageStoragePolicyResponse> {
        return this.api.getStorageStoragePolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.VdMemberEp' resource.
     * @param param the request object
     */
    public getStorageVdMemberEpByMoid(param: StorageApiGetStorageVdMemberEpByMoidRequest, options?: Configuration): Promise<StorageVdMemberEp> {
        return this.api.getStorageVdMemberEpByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.VdMemberEp' resource.
     * @param param the request object
     */
    public getStorageVdMemberEpList(param: StorageApiGetStorageVdMemberEpListRequest, options?: Configuration): Promise<StorageVdMemberEpResponse> {
        return this.api.getStorageVdMemberEpList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.VirtualDrive' resource.
     * @param param the request object
     */
    public getStorageVirtualDriveByMoid(param: StorageApiGetStorageVirtualDriveByMoidRequest, options?: Configuration): Promise<StorageVirtualDrive> {
        return this.api.getStorageVirtualDriveByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.VirtualDriveExtension' resource.
     * @param param the request object
     */
    public getStorageVirtualDriveExtensionByMoid(param: StorageApiGetStorageVirtualDriveExtensionByMoidRequest, options?: Configuration): Promise<StorageVirtualDriveExtension> {
        return this.api.getStorageVirtualDriveExtensionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'storage.VirtualDriveExtension' resource.
     * @param param the request object
     */
    public getStorageVirtualDriveExtensionList(param: StorageApiGetStorageVirtualDriveExtensionListRequest, options?: Configuration): Promise<StorageVirtualDriveExtensionResponse> {
        return this.api.getStorageVirtualDriveExtensionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'storage.VirtualDrive' resource.
     * @param param the request object
     */
    public getStorageVirtualDriveList(param: StorageApiGetStorageVirtualDriveListRequest, options?: Configuration): Promise<StorageVirtualDriveResponse> {
        return this.api.getStorageVirtualDriveList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'storage.Controller' resource.
     * @param param the request object
     */
    public patchStorageController(param: StorageApiPatchStorageControllerRequest, options?: Configuration): Promise<StorageController> {
        return this.api.patchStorageController(param.moid, param.storageController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.DiskGroupPolicy' resource.
     * @param param the request object
     */
    public patchStorageDiskGroupPolicy(param: StorageApiPatchStorageDiskGroupPolicyRequest, options?: Configuration): Promise<StorageDiskGroupPolicy> {
        return this.api.patchStorageDiskGroupPolicy(param.moid, param.storageDiskGroupPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.Enclosure' resource.
     * @param param the request object
     */
    public patchStorageEnclosure(param: StorageApiPatchStorageEnclosureRequest, options?: Configuration): Promise<StorageEnclosure> {
        return this.api.patchStorageEnclosure(param.moid, param.storageEnclosure, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.EnclosureDisk' resource.
     * @param param the request object
     */
    public patchStorageEnclosureDisk(param: StorageApiPatchStorageEnclosureDiskRequest, options?: Configuration): Promise<StorageEnclosureDisk> {
        return this.api.patchStorageEnclosureDisk(param.moid, param.storageEnclosureDisk, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.EnclosureDiskSlotEp' resource.
     * @param param the request object
     */
    public patchStorageEnclosureDiskSlotEp(param: StorageApiPatchStorageEnclosureDiskSlotEpRequest, options?: Configuration): Promise<StorageEnclosureDiskSlotEp> {
        return this.api.patchStorageEnclosureDiskSlotEp(param.moid, param.storageEnclosureDiskSlotEp, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexFlashController' resource.
     * @param param the request object
     */
    public patchStorageFlexFlashController(param: StorageApiPatchStorageFlexFlashControllerRequest, options?: Configuration): Promise<StorageFlexFlashController> {
        return this.api.patchStorageFlexFlashController(param.moid, param.storageFlexFlashController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexFlashControllerProps' resource.
     * @param param the request object
     */
    public patchStorageFlexFlashControllerProps(param: StorageApiPatchStorageFlexFlashControllerPropsRequest, options?: Configuration): Promise<StorageFlexFlashControllerProps> {
        return this.api.patchStorageFlexFlashControllerProps(param.moid, param.storageFlexFlashControllerProps, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexFlashPhysicalDrive' resource.
     * @param param the request object
     */
    public patchStorageFlexFlashPhysicalDrive(param: StorageApiPatchStorageFlexFlashPhysicalDriveRequest, options?: Configuration): Promise<StorageFlexFlashPhysicalDrive> {
        return this.api.patchStorageFlexFlashPhysicalDrive(param.moid, param.storageFlexFlashPhysicalDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexFlashVirtualDrive' resource.
     * @param param the request object
     */
    public patchStorageFlexFlashVirtualDrive(param: StorageApiPatchStorageFlexFlashVirtualDriveRequest, options?: Configuration): Promise<StorageFlexFlashVirtualDrive> {
        return this.api.patchStorageFlexFlashVirtualDrive(param.moid, param.storageFlexFlashVirtualDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexUtilController' resource.
     * @param param the request object
     */
    public patchStorageFlexUtilController(param: StorageApiPatchStorageFlexUtilControllerRequest, options?: Configuration): Promise<StorageFlexUtilController> {
        return this.api.patchStorageFlexUtilController(param.moid, param.storageFlexUtilController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexUtilPhysicalDrive' resource.
     * @param param the request object
     */
    public patchStorageFlexUtilPhysicalDrive(param: StorageApiPatchStorageFlexUtilPhysicalDriveRequest, options?: Configuration): Promise<StorageFlexUtilPhysicalDrive> {
        return this.api.patchStorageFlexUtilPhysicalDrive(param.moid, param.storageFlexUtilPhysicalDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexUtilVirtualDrive' resource.
     * @param param the request object
     */
    public patchStorageFlexUtilVirtualDrive(param: StorageApiPatchStorageFlexUtilVirtualDriveRequest, options?: Configuration): Promise<StorageFlexUtilVirtualDrive> {
        return this.api.patchStorageFlexUtilVirtualDrive(param.moid, param.storageFlexUtilVirtualDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.PhysicalDisk' resource.
     * @param param the request object
     */
    public patchStoragePhysicalDisk(param: StorageApiPatchStoragePhysicalDiskRequest, options?: Configuration): Promise<StoragePhysicalDisk> {
        return this.api.patchStoragePhysicalDisk(param.moid, param.storagePhysicalDisk, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.PhysicalDiskExtension' resource.
     * @param param the request object
     */
    public patchStoragePhysicalDiskExtension(param: StorageApiPatchStoragePhysicalDiskExtensionRequest, options?: Configuration): Promise<StoragePhysicalDiskExtension> {
        return this.api.patchStoragePhysicalDiskExtension(param.moid, param.storagePhysicalDiskExtension, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.PhysicalDiskUsage' resource.
     * @param param the request object
     */
    public patchStoragePhysicalDiskUsage(param: StorageApiPatchStoragePhysicalDiskUsageRequest, options?: Configuration): Promise<StoragePhysicalDiskUsage> {
        return this.api.patchStoragePhysicalDiskUsage(param.moid, param.storagePhysicalDiskUsage, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.PureArray' resource.
     * @param param the request object
     */
    public patchStoragePureArray(param: StorageApiPatchStoragePureArrayRequest, options?: Configuration): Promise<StoragePureArray> {
        return this.api.patchStoragePureArray(param.moid, param.storagePureArray, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.SasExpander' resource.
     * @param param the request object
     */
    public patchStorageSasExpander(param: StorageApiPatchStorageSasExpanderRequest, options?: Configuration): Promise<StorageSasExpander> {
        return this.api.patchStorageSasExpander(param.moid, param.storageSasExpander, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.SasPort' resource.
     * @param param the request object
     */
    public patchStorageSasPort(param: StorageApiPatchStorageSasPortRequest, options?: Configuration): Promise<StorageSasPort> {
        return this.api.patchStorageSasPort(param.moid, param.storageSasPort, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.StoragePolicy' resource.
     * @param param the request object
     */
    public patchStorageStoragePolicy(param: StorageApiPatchStorageStoragePolicyRequest, options?: Configuration): Promise<StorageStoragePolicy> {
        return this.api.patchStorageStoragePolicy(param.moid, param.storageStoragePolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.VdMemberEp' resource.
     * @param param the request object
     */
    public patchStorageVdMemberEp(param: StorageApiPatchStorageVdMemberEpRequest, options?: Configuration): Promise<StorageVdMemberEp> {
        return this.api.patchStorageVdMemberEp(param.moid, param.storageVdMemberEp, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.VirtualDrive' resource.
     * @param param the request object
     */
    public patchStorageVirtualDrive(param: StorageApiPatchStorageVirtualDriveRequest, options?: Configuration): Promise<StorageVirtualDrive> {
        return this.api.patchStorageVirtualDrive(param.moid, param.storageVirtualDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.VirtualDriveExtension' resource.
     * @param param the request object
     */
    public patchStorageVirtualDriveExtension(param: StorageApiPatchStorageVirtualDriveExtensionRequest, options?: Configuration): Promise<StorageVirtualDriveExtension> {
        return this.api.patchStorageVirtualDriveExtension(param.moid, param.storageVirtualDriveExtension, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.Controller' resource.
     * @param param the request object
     */
    public updateStorageController(param: StorageApiUpdateStorageControllerRequest, options?: Configuration): Promise<StorageController> {
        return this.api.updateStorageController(param.moid, param.storageController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.DiskGroupPolicy' resource.
     * @param param the request object
     */
    public updateStorageDiskGroupPolicy(param: StorageApiUpdateStorageDiskGroupPolicyRequest, options?: Configuration): Promise<StorageDiskGroupPolicy> {
        return this.api.updateStorageDiskGroupPolicy(param.moid, param.storageDiskGroupPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.Enclosure' resource.
     * @param param the request object
     */
    public updateStorageEnclosure(param: StorageApiUpdateStorageEnclosureRequest, options?: Configuration): Promise<StorageEnclosure> {
        return this.api.updateStorageEnclosure(param.moid, param.storageEnclosure, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.EnclosureDisk' resource.
     * @param param the request object
     */
    public updateStorageEnclosureDisk(param: StorageApiUpdateStorageEnclosureDiskRequest, options?: Configuration): Promise<StorageEnclosureDisk> {
        return this.api.updateStorageEnclosureDisk(param.moid, param.storageEnclosureDisk, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.EnclosureDiskSlotEp' resource.
     * @param param the request object
     */
    public updateStorageEnclosureDiskSlotEp(param: StorageApiUpdateStorageEnclosureDiskSlotEpRequest, options?: Configuration): Promise<StorageEnclosureDiskSlotEp> {
        return this.api.updateStorageEnclosureDiskSlotEp(param.moid, param.storageEnclosureDiskSlotEp, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexFlashController' resource.
     * @param param the request object
     */
    public updateStorageFlexFlashController(param: StorageApiUpdateStorageFlexFlashControllerRequest, options?: Configuration): Promise<StorageFlexFlashController> {
        return this.api.updateStorageFlexFlashController(param.moid, param.storageFlexFlashController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexFlashControllerProps' resource.
     * @param param the request object
     */
    public updateStorageFlexFlashControllerProps(param: StorageApiUpdateStorageFlexFlashControllerPropsRequest, options?: Configuration): Promise<StorageFlexFlashControllerProps> {
        return this.api.updateStorageFlexFlashControllerProps(param.moid, param.storageFlexFlashControllerProps, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexFlashPhysicalDrive' resource.
     * @param param the request object
     */
    public updateStorageFlexFlashPhysicalDrive(param: StorageApiUpdateStorageFlexFlashPhysicalDriveRequest, options?: Configuration): Promise<StorageFlexFlashPhysicalDrive> {
        return this.api.updateStorageFlexFlashPhysicalDrive(param.moid, param.storageFlexFlashPhysicalDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexFlashVirtualDrive' resource.
     * @param param the request object
     */
    public updateStorageFlexFlashVirtualDrive(param: StorageApiUpdateStorageFlexFlashVirtualDriveRequest, options?: Configuration): Promise<StorageFlexFlashVirtualDrive> {
        return this.api.updateStorageFlexFlashVirtualDrive(param.moid, param.storageFlexFlashVirtualDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexUtilController' resource.
     * @param param the request object
     */
    public updateStorageFlexUtilController(param: StorageApiUpdateStorageFlexUtilControllerRequest, options?: Configuration): Promise<StorageFlexUtilController> {
        return this.api.updateStorageFlexUtilController(param.moid, param.storageFlexUtilController, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexUtilPhysicalDrive' resource.
     * @param param the request object
     */
    public updateStorageFlexUtilPhysicalDrive(param: StorageApiUpdateStorageFlexUtilPhysicalDriveRequest, options?: Configuration): Promise<StorageFlexUtilPhysicalDrive> {
        return this.api.updateStorageFlexUtilPhysicalDrive(param.moid, param.storageFlexUtilPhysicalDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.FlexUtilVirtualDrive' resource.
     * @param param the request object
     */
    public updateStorageFlexUtilVirtualDrive(param: StorageApiUpdateStorageFlexUtilVirtualDriveRequest, options?: Configuration): Promise<StorageFlexUtilVirtualDrive> {
        return this.api.updateStorageFlexUtilVirtualDrive(param.moid, param.storageFlexUtilVirtualDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.PhysicalDisk' resource.
     * @param param the request object
     */
    public updateStoragePhysicalDisk(param: StorageApiUpdateStoragePhysicalDiskRequest, options?: Configuration): Promise<StoragePhysicalDisk> {
        return this.api.updateStoragePhysicalDisk(param.moid, param.storagePhysicalDisk, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.PhysicalDiskExtension' resource.
     * @param param the request object
     */
    public updateStoragePhysicalDiskExtension(param: StorageApiUpdateStoragePhysicalDiskExtensionRequest, options?: Configuration): Promise<StoragePhysicalDiskExtension> {
        return this.api.updateStoragePhysicalDiskExtension(param.moid, param.storagePhysicalDiskExtension, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.PhysicalDiskUsage' resource.
     * @param param the request object
     */
    public updateStoragePhysicalDiskUsage(param: StorageApiUpdateStoragePhysicalDiskUsageRequest, options?: Configuration): Promise<StoragePhysicalDiskUsage> {
        return this.api.updateStoragePhysicalDiskUsage(param.moid, param.storagePhysicalDiskUsage, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.PureArray' resource.
     * @param param the request object
     */
    public updateStoragePureArray(param: StorageApiUpdateStoragePureArrayRequest, options?: Configuration): Promise<StoragePureArray> {
        return this.api.updateStoragePureArray(param.moid, param.storagePureArray, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.SasExpander' resource.
     * @param param the request object
     */
    public updateStorageSasExpander(param: StorageApiUpdateStorageSasExpanderRequest, options?: Configuration): Promise<StorageSasExpander> {
        return this.api.updateStorageSasExpander(param.moid, param.storageSasExpander, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.SasPort' resource.
     * @param param the request object
     */
    public updateStorageSasPort(param: StorageApiUpdateStorageSasPortRequest, options?: Configuration): Promise<StorageSasPort> {
        return this.api.updateStorageSasPort(param.moid, param.storageSasPort, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.StoragePolicy' resource.
     * @param param the request object
     */
    public updateStorageStoragePolicy(param: StorageApiUpdateStorageStoragePolicyRequest, options?: Configuration): Promise<StorageStoragePolicy> {
        return this.api.updateStorageStoragePolicy(param.moid, param.storageStoragePolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.VdMemberEp' resource.
     * @param param the request object
     */
    public updateStorageVdMemberEp(param: StorageApiUpdateStorageVdMemberEpRequest, options?: Configuration): Promise<StorageVdMemberEp> {
        return this.api.updateStorageVdMemberEp(param.moid, param.storageVdMemberEp, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.VirtualDrive' resource.
     * @param param the request object
     */
    public updateStorageVirtualDrive(param: StorageApiUpdateStorageVirtualDriveRequest, options?: Configuration): Promise<StorageVirtualDrive> {
        return this.api.updateStorageVirtualDrive(param.moid, param.storageVirtualDrive, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'storage.VirtualDriveExtension' resource.
     * @param param the request object
     */
    public updateStorageVirtualDriveExtension(param: StorageApiUpdateStorageVirtualDriveExtensionRequest, options?: Configuration): Promise<StorageVirtualDriveExtension> {
        return this.api.updateStorageVirtualDriveExtension(param.moid, param.storageVirtualDriveExtension, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableSyslogApi } from "./ObservableAPI";
import { SyslogApiRequestFactory, SyslogApiResponseProcessor} from "../apis/SyslogApi";

export interface SyslogApiCreateSyslogPolicyRequest {
    /**
     * The &#39;syslog.Policy&#39; resource to create.
     * @type SyslogPolicy
     * @memberof SyslogApicreateSyslogPolicy
     */
    syslogPolicy: SyslogPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SyslogApicreateSyslogPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof SyslogApicreateSyslogPolicy
     */
    ifNoneMatch?: string
}

export interface SyslogApiDeleteSyslogPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SyslogApideleteSyslogPolicy
     */
    moid: string
}

export interface SyslogApiGetSyslogPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SyslogApigetSyslogPolicyByMoid
     */
    moid: string
}

export interface SyslogApiGetSyslogPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof SyslogApigetSyslogPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof SyslogApigetSyslogPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof SyslogApigetSyslogPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof SyslogApigetSyslogPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof SyslogApigetSyslogPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof SyslogApigetSyslogPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof SyslogApigetSyslogPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof SyslogApigetSyslogPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof SyslogApigetSyslogPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof SyslogApigetSyslogPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof SyslogApigetSyslogPolicyList
     */
    tags?: string
}

export interface SyslogApiPatchSyslogPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SyslogApipatchSyslogPolicy
     */
    moid: string
    /**
     * The &#39;syslog.Policy&#39; resource to update.
     * @type SyslogPolicy
     * @memberof SyslogApipatchSyslogPolicy
     */
    syslogPolicy: SyslogPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SyslogApipatchSyslogPolicy
     */
    ifMatch?: string
}

export interface SyslogApiUpdateSyslogPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof SyslogApiupdateSyslogPolicy
     */
    moid: string
    /**
     * The &#39;syslog.Policy&#39; resource to update.
     * @type SyslogPolicy
     * @memberof SyslogApiupdateSyslogPolicy
     */
    syslogPolicy: SyslogPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof SyslogApiupdateSyslogPolicy
     */
    ifMatch?: string
}


export class ObjectSyslogApi {
    private api: ObservableSyslogApi

    public constructor(configuration: Configuration, requestFactory?: SyslogApiRequestFactory, responseProcessor?: SyslogApiResponseProcessor) {
        this.api = new ObservableSyslogApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'syslog.Policy' resource.
     * @param param the request object
     */
    public createSyslogPolicy(param: SyslogApiCreateSyslogPolicyRequest, options?: Configuration): Promise<SyslogPolicy> {
        return this.api.createSyslogPolicy(param.syslogPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'syslog.Policy' resource.
     * @param param the request object
     */
    public deleteSyslogPolicy(param: SyslogApiDeleteSyslogPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteSyslogPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'syslog.Policy' resource.
     * @param param the request object
     */
    public getSyslogPolicyByMoid(param: SyslogApiGetSyslogPolicyByMoidRequest, options?: Configuration): Promise<SyslogPolicy> {
        return this.api.getSyslogPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'syslog.Policy' resource.
     * @param param the request object
     */
    public getSyslogPolicyList(param: SyslogApiGetSyslogPolicyListRequest, options?: Configuration): Promise<SyslogPolicyResponse> {
        return this.api.getSyslogPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'syslog.Policy' resource.
     * @param param the request object
     */
    public patchSyslogPolicy(param: SyslogApiPatchSyslogPolicyRequest, options?: Configuration): Promise<SyslogPolicy> {
        return this.api.patchSyslogPolicy(param.moid, param.syslogPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'syslog.Policy' resource.
     * @param param the request object
     */
    public updateSyslogPolicy(param: SyslogApiUpdateSyslogPolicyRequest, options?: Configuration): Promise<SyslogPolicy> {
        return this.api.updateSyslogPolicy(param.moid, param.syslogPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableTamApi } from "./ObservableAPI";
import { TamApiRequestFactory, TamApiResponseProcessor} from "../apis/TamApi";

export interface TamApiCreateTamAdvisoryCountRequest {
    /**
     * The &#39;tam.AdvisoryCount&#39; resource to create.
     * @type TamAdvisoryCount
     * @memberof TamApicreateTamAdvisoryCount
     */
    tamAdvisoryCount: TamAdvisoryCount
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApicreateTamAdvisoryCount
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof TamApicreateTamAdvisoryCount
     */
    ifNoneMatch?: string
}

export interface TamApiCreateTamAdvisoryInfoRequest {
    /**
     * The &#39;tam.AdvisoryInfo&#39; resource to create.
     * @type TamAdvisoryInfo
     * @memberof TamApicreateTamAdvisoryInfo
     */
    tamAdvisoryInfo: TamAdvisoryInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApicreateTamAdvisoryInfo
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof TamApicreateTamAdvisoryInfo
     */
    ifNoneMatch?: string
}

export interface TamApiCreateTamAdvisoryInstanceRequest {
    /**
     * The &#39;tam.AdvisoryInstance&#39; resource to create.
     * @type TamAdvisoryInstance
     * @memberof TamApicreateTamAdvisoryInstance
     */
    tamAdvisoryInstance: TamAdvisoryInstance
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApicreateTamAdvisoryInstance
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof TamApicreateTamAdvisoryInstance
     */
    ifNoneMatch?: string
}

export interface TamApiCreateTamSecurityAdvisoryRequest {
    /**
     * The &#39;tam.SecurityAdvisory&#39; resource to create.
     * @type TamSecurityAdvisory
     * @memberof TamApicreateTamSecurityAdvisory
     */
    tamSecurityAdvisory: TamSecurityAdvisory
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApicreateTamSecurityAdvisory
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof TamApicreateTamSecurityAdvisory
     */
    ifNoneMatch?: string
}

export interface TamApiDeleteTamAdvisoryCountRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApideleteTamAdvisoryCount
     */
    moid: string
}

export interface TamApiDeleteTamAdvisoryInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApideleteTamAdvisoryInfo
     */
    moid: string
}

export interface TamApiDeleteTamAdvisoryInstanceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApideleteTamAdvisoryInstance
     */
    moid: string
}

export interface TamApiDeleteTamSecurityAdvisoryRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApideleteTamSecurityAdvisory
     */
    moid: string
}

export interface TamApiGetTamAdvisoryCountByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApigetTamAdvisoryCountByMoid
     */
    moid: string
}

export interface TamApiGetTamAdvisoryCountListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof TamApigetTamAdvisoryCountList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof TamApigetTamAdvisoryCountList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof TamApigetTamAdvisoryCountList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof TamApigetTamAdvisoryCountList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof TamApigetTamAdvisoryCountList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof TamApigetTamAdvisoryCountList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof TamApigetTamAdvisoryCountList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof TamApigetTamAdvisoryCountList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof TamApigetTamAdvisoryCountList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof TamApigetTamAdvisoryCountList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof TamApigetTamAdvisoryCountList
     */
    tags?: string
}

export interface TamApiGetTamAdvisoryInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApigetTamAdvisoryInfoByMoid
     */
    moid: string
}

export interface TamApiGetTamAdvisoryInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof TamApigetTamAdvisoryInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof TamApigetTamAdvisoryInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof TamApigetTamAdvisoryInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof TamApigetTamAdvisoryInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof TamApigetTamAdvisoryInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof TamApigetTamAdvisoryInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof TamApigetTamAdvisoryInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof TamApigetTamAdvisoryInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof TamApigetTamAdvisoryInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof TamApigetTamAdvisoryInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof TamApigetTamAdvisoryInfoList
     */
    tags?: string
}

export interface TamApiGetTamAdvisoryInstanceByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApigetTamAdvisoryInstanceByMoid
     */
    moid: string
}

export interface TamApiGetTamAdvisoryInstanceListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof TamApigetTamAdvisoryInstanceList
     */
    tags?: string
}

export interface TamApiGetTamSecurityAdvisoryByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApigetTamSecurityAdvisoryByMoid
     */
    moid: string
}

export interface TamApiGetTamSecurityAdvisoryListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof TamApigetTamSecurityAdvisoryList
     */
    tags?: string
}

export interface TamApiPatchTamAdvisoryCountRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApipatchTamAdvisoryCount
     */
    moid: string
    /**
     * The &#39;tam.AdvisoryCount&#39; resource to update.
     * @type TamAdvisoryCount
     * @memberof TamApipatchTamAdvisoryCount
     */
    tamAdvisoryCount: TamAdvisoryCount
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApipatchTamAdvisoryCount
     */
    ifMatch?: string
}

export interface TamApiPatchTamAdvisoryInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApipatchTamAdvisoryInfo
     */
    moid: string
    /**
     * The &#39;tam.AdvisoryInfo&#39; resource to update.
     * @type TamAdvisoryInfo
     * @memberof TamApipatchTamAdvisoryInfo
     */
    tamAdvisoryInfo: TamAdvisoryInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApipatchTamAdvisoryInfo
     */
    ifMatch?: string
}

export interface TamApiPatchTamAdvisoryInstanceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApipatchTamAdvisoryInstance
     */
    moid: string
    /**
     * The &#39;tam.AdvisoryInstance&#39; resource to update.
     * @type TamAdvisoryInstance
     * @memberof TamApipatchTamAdvisoryInstance
     */
    tamAdvisoryInstance: TamAdvisoryInstance
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApipatchTamAdvisoryInstance
     */
    ifMatch?: string
}

export interface TamApiPatchTamSecurityAdvisoryRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApipatchTamSecurityAdvisory
     */
    moid: string
    /**
     * The &#39;tam.SecurityAdvisory&#39; resource to update.
     * @type TamSecurityAdvisory
     * @memberof TamApipatchTamSecurityAdvisory
     */
    tamSecurityAdvisory: TamSecurityAdvisory
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApipatchTamSecurityAdvisory
     */
    ifMatch?: string
}

export interface TamApiUpdateTamAdvisoryCountRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApiupdateTamAdvisoryCount
     */
    moid: string
    /**
     * The &#39;tam.AdvisoryCount&#39; resource to update.
     * @type TamAdvisoryCount
     * @memberof TamApiupdateTamAdvisoryCount
     */
    tamAdvisoryCount: TamAdvisoryCount
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApiupdateTamAdvisoryCount
     */
    ifMatch?: string
}

export interface TamApiUpdateTamAdvisoryInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApiupdateTamAdvisoryInfo
     */
    moid: string
    /**
     * The &#39;tam.AdvisoryInfo&#39; resource to update.
     * @type TamAdvisoryInfo
     * @memberof TamApiupdateTamAdvisoryInfo
     */
    tamAdvisoryInfo: TamAdvisoryInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApiupdateTamAdvisoryInfo
     */
    ifMatch?: string
}

export interface TamApiUpdateTamAdvisoryInstanceRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApiupdateTamAdvisoryInstance
     */
    moid: string
    /**
     * The &#39;tam.AdvisoryInstance&#39; resource to update.
     * @type TamAdvisoryInstance
     * @memberof TamApiupdateTamAdvisoryInstance
     */
    tamAdvisoryInstance: TamAdvisoryInstance
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApiupdateTamAdvisoryInstance
     */
    ifMatch?: string
}

export interface TamApiUpdateTamSecurityAdvisoryRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TamApiupdateTamSecurityAdvisory
     */
    moid: string
    /**
     * The &#39;tam.SecurityAdvisory&#39; resource to update.
     * @type TamSecurityAdvisory
     * @memberof TamApiupdateTamSecurityAdvisory
     */
    tamSecurityAdvisory: TamSecurityAdvisory
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TamApiupdateTamSecurityAdvisory
     */
    ifMatch?: string
}


export class ObjectTamApi {
    private api: ObservableTamApi

    public constructor(configuration: Configuration, requestFactory?: TamApiRequestFactory, responseProcessor?: TamApiResponseProcessor) {
        this.api = new ObservableTamApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'tam.AdvisoryCount' resource.
     * @param param the request object
     */
    public createTamAdvisoryCount(param: TamApiCreateTamAdvisoryCountRequest, options?: Configuration): Promise<TamAdvisoryCount> {
        return this.api.createTamAdvisoryCount(param.tamAdvisoryCount, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'tam.AdvisoryInfo' resource.
     * @param param the request object
     */
    public createTamAdvisoryInfo(param: TamApiCreateTamAdvisoryInfoRequest, options?: Configuration): Promise<TamAdvisoryInfo> {
        return this.api.createTamAdvisoryInfo(param.tamAdvisoryInfo, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'tam.AdvisoryInstance' resource.
     * @param param the request object
     */
    public createTamAdvisoryInstance(param: TamApiCreateTamAdvisoryInstanceRequest, options?: Configuration): Promise<TamAdvisoryInstance> {
        return this.api.createTamAdvisoryInstance(param.tamAdvisoryInstance, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'tam.SecurityAdvisory' resource.
     * @param param the request object
     */
    public createTamSecurityAdvisory(param: TamApiCreateTamSecurityAdvisoryRequest, options?: Configuration): Promise<TamSecurityAdvisory> {
        return this.api.createTamSecurityAdvisory(param.tamSecurityAdvisory, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'tam.AdvisoryCount' resource.
     * @param param the request object
     */
    public deleteTamAdvisoryCount(param: TamApiDeleteTamAdvisoryCountRequest, options?: Configuration): Promise<void> {
        return this.api.deleteTamAdvisoryCount(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'tam.AdvisoryInfo' resource.
     * @param param the request object
     */
    public deleteTamAdvisoryInfo(param: TamApiDeleteTamAdvisoryInfoRequest, options?: Configuration): Promise<void> {
        return this.api.deleteTamAdvisoryInfo(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'tam.AdvisoryInstance' resource.
     * @param param the request object
     */
    public deleteTamAdvisoryInstance(param: TamApiDeleteTamAdvisoryInstanceRequest, options?: Configuration): Promise<void> {
        return this.api.deleteTamAdvisoryInstance(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'tam.SecurityAdvisory' resource.
     * @param param the request object
     */
    public deleteTamSecurityAdvisory(param: TamApiDeleteTamSecurityAdvisoryRequest, options?: Configuration): Promise<void> {
        return this.api.deleteTamSecurityAdvisory(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'tam.AdvisoryCount' resource.
     * @param param the request object
     */
    public getTamAdvisoryCountByMoid(param: TamApiGetTamAdvisoryCountByMoidRequest, options?: Configuration): Promise<TamAdvisoryCount> {
        return this.api.getTamAdvisoryCountByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'tam.AdvisoryCount' resource.
     * @param param the request object
     */
    public getTamAdvisoryCountList(param: TamApiGetTamAdvisoryCountListRequest, options?: Configuration): Promise<TamAdvisoryCountResponse> {
        return this.api.getTamAdvisoryCountList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'tam.AdvisoryInfo' resource.
     * @param param the request object
     */
    public getTamAdvisoryInfoByMoid(param: TamApiGetTamAdvisoryInfoByMoidRequest, options?: Configuration): Promise<TamAdvisoryInfo> {
        return this.api.getTamAdvisoryInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'tam.AdvisoryInfo' resource.
     * @param param the request object
     */
    public getTamAdvisoryInfoList(param: TamApiGetTamAdvisoryInfoListRequest, options?: Configuration): Promise<TamAdvisoryInfoResponse> {
        return this.api.getTamAdvisoryInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'tam.AdvisoryInstance' resource.
     * @param param the request object
     */
    public getTamAdvisoryInstanceByMoid(param: TamApiGetTamAdvisoryInstanceByMoidRequest, options?: Configuration): Promise<TamAdvisoryInstance> {
        return this.api.getTamAdvisoryInstanceByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'tam.AdvisoryInstance' resource.
     * @param param the request object
     */
    public getTamAdvisoryInstanceList(param: TamApiGetTamAdvisoryInstanceListRequest, options?: Configuration): Promise<TamAdvisoryInstanceResponse> {
        return this.api.getTamAdvisoryInstanceList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'tam.SecurityAdvisory' resource.
     * @param param the request object
     */
    public getTamSecurityAdvisoryByMoid(param: TamApiGetTamSecurityAdvisoryByMoidRequest, options?: Configuration): Promise<TamSecurityAdvisory> {
        return this.api.getTamSecurityAdvisoryByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'tam.SecurityAdvisory' resource.
     * @param param the request object
     */
    public getTamSecurityAdvisoryList(param: TamApiGetTamSecurityAdvisoryListRequest, options?: Configuration): Promise<TamSecurityAdvisoryResponse> {
        return this.api.getTamSecurityAdvisoryList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'tam.AdvisoryCount' resource.
     * @param param the request object
     */
    public patchTamAdvisoryCount(param: TamApiPatchTamAdvisoryCountRequest, options?: Configuration): Promise<TamAdvisoryCount> {
        return this.api.patchTamAdvisoryCount(param.moid, param.tamAdvisoryCount, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'tam.AdvisoryInfo' resource.
     * @param param the request object
     */
    public patchTamAdvisoryInfo(param: TamApiPatchTamAdvisoryInfoRequest, options?: Configuration): Promise<TamAdvisoryInfo> {
        return this.api.patchTamAdvisoryInfo(param.moid, param.tamAdvisoryInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'tam.AdvisoryInstance' resource.
     * @param param the request object
     */
    public patchTamAdvisoryInstance(param: TamApiPatchTamAdvisoryInstanceRequest, options?: Configuration): Promise<TamAdvisoryInstance> {
        return this.api.patchTamAdvisoryInstance(param.moid, param.tamAdvisoryInstance, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'tam.SecurityAdvisory' resource.
     * @param param the request object
     */
    public patchTamSecurityAdvisory(param: TamApiPatchTamSecurityAdvisoryRequest, options?: Configuration): Promise<TamSecurityAdvisory> {
        return this.api.patchTamSecurityAdvisory(param.moid, param.tamSecurityAdvisory, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'tam.AdvisoryCount' resource.
     * @param param the request object
     */
    public updateTamAdvisoryCount(param: TamApiUpdateTamAdvisoryCountRequest, options?: Configuration): Promise<TamAdvisoryCount> {
        return this.api.updateTamAdvisoryCount(param.moid, param.tamAdvisoryCount, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'tam.AdvisoryInfo' resource.
     * @param param the request object
     */
    public updateTamAdvisoryInfo(param: TamApiUpdateTamAdvisoryInfoRequest, options?: Configuration): Promise<TamAdvisoryInfo> {
        return this.api.updateTamAdvisoryInfo(param.moid, param.tamAdvisoryInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'tam.AdvisoryInstance' resource.
     * @param param the request object
     */
    public updateTamAdvisoryInstance(param: TamApiUpdateTamAdvisoryInstanceRequest, options?: Configuration): Promise<TamAdvisoryInstance> {
        return this.api.updateTamAdvisoryInstance(param.moid, param.tamAdvisoryInstance, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'tam.SecurityAdvisory' resource.
     * @param param the request object
     */
    public updateTamSecurityAdvisory(param: TamApiUpdateTamSecurityAdvisoryRequest, options?: Configuration): Promise<TamSecurityAdvisory> {
        return this.api.updateTamSecurityAdvisory(param.moid, param.tamSecurityAdvisory, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableTaskApi } from "./ObservableAPI";
import { TaskApiRequestFactory, TaskApiResponseProcessor} from "../apis/TaskApi";

export interface TaskApiCreateTaskPureScopedInventoryRequest {
    /**
     * The &#39;task.PureScopedInventory&#39; resource to create.
     * @type TaskPureScopedInventory
     * @memberof TaskApicreateTaskPureScopedInventory
     */
    taskPureScopedInventory: TaskPureScopedInventory
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TaskApicreateTaskPureScopedInventory
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof TaskApicreateTaskPureScopedInventory
     */
    ifNoneMatch?: string
}


export class ObjectTaskApi {
    private api: ObservableTaskApi

    public constructor(configuration: Configuration, requestFactory?: TaskApiRequestFactory, responseProcessor?: TaskApiResponseProcessor) {
        this.api = new ObservableTaskApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'task.PureScopedInventory' resource.
     * @param param the request object
     */
    public createTaskPureScopedInventory(param: TaskApiCreateTaskPureScopedInventoryRequest, options?: Configuration): Promise<TaskPureScopedInventory> {
        return this.api.createTaskPureScopedInventory(param.taskPureScopedInventory, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	

}




import { ObservableTelemetryApi } from "./ObservableAPI";
import { TelemetryApiRequestFactory, TelemetryApiResponseProcessor} from "../apis/TelemetryApi";

export interface TelemetryApiQueryTelemetryTimeSeriesRequest {
    /**
     * The Druid request schema for time series queries.
     * @type TelemetryDruidAggregateRequest
     * @memberof TelemetryApiqueryTelemetryTimeSeries
     */
    telemetryDruidAggregateRequest: TelemetryDruidAggregateRequest
}


export class ObjectTelemetryApi {
    private api: ObservableTelemetryApi

    public constructor(configuration: Configuration, requestFactory?: TelemetryApiRequestFactory, responseProcessor?: TelemetryApiResponseProcessor) {
        this.api = new ObservableTelemetryApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Endpoint that exposes Druid requests for time series data. This endpoint exposes multiple requests, including Time series, Top N, GroupBy, Scan, Time Boundary, Segment meta-data and datasource meta-data.
     * Perform a Druid time series aggregation request.
     * @param param the request object
     */
    public queryTelemetryTimeSeries(param: TelemetryApiQueryTelemetryTimeSeriesRequest, options?: Configuration): Promise<Array<TelemetryDruidIntervalResult>> {
        return this.api.queryTelemetryTimeSeries(param.telemetryDruidAggregateRequest,  options).toPromise();
    }
	

}




import { ObservableTerminalApi } from "./ObservableAPI";
import { TerminalApiRequestFactory, TerminalApiResponseProcessor} from "../apis/TerminalApi";

export interface TerminalApiGetTerminalAuditLogByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TerminalApigetTerminalAuditLogByMoid
     */
    moid: string
}

export interface TerminalApiGetTerminalAuditLogListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof TerminalApigetTerminalAuditLogList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof TerminalApigetTerminalAuditLogList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof TerminalApigetTerminalAuditLogList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof TerminalApigetTerminalAuditLogList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof TerminalApigetTerminalAuditLogList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof TerminalApigetTerminalAuditLogList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof TerminalApigetTerminalAuditLogList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof TerminalApigetTerminalAuditLogList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof TerminalApigetTerminalAuditLogList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof TerminalApigetTerminalAuditLogList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof TerminalApigetTerminalAuditLogList
     */
    tags?: string
}


export class ObjectTerminalApi {
    private api: ObservableTerminalApi

    public constructor(configuration: Configuration, requestFactory?: TerminalApiRequestFactory, responseProcessor?: TerminalApiResponseProcessor) {
        this.api = new ObservableTerminalApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'terminal.AuditLog' resource.
     * @param param the request object
     */
    public getTerminalAuditLogByMoid(param: TerminalApiGetTerminalAuditLogByMoidRequest, options?: Configuration): Promise<TerminalAuditLog> {
        return this.api.getTerminalAuditLogByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'terminal.AuditLog' resource.
     * @param param the request object
     */
    public getTerminalAuditLogList(param: TerminalApiGetTerminalAuditLogListRequest, options?: Configuration): Promise<TerminalAuditLogResponse> {
        return this.api.getTerminalAuditLogList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableTopApi } from "./ObservableAPI";
import { TopApiRequestFactory, TopApiResponseProcessor} from "../apis/TopApi";

export interface TopApiGetTopSystemByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TopApigetTopSystemByMoid
     */
    moid: string
}

export interface TopApiGetTopSystemListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof TopApigetTopSystemList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof TopApigetTopSystemList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof TopApigetTopSystemList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof TopApigetTopSystemList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof TopApigetTopSystemList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof TopApigetTopSystemList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof TopApigetTopSystemList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof TopApigetTopSystemList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof TopApigetTopSystemList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof TopApigetTopSystemList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof TopApigetTopSystemList
     */
    tags?: string
}

export interface TopApiPatchTopSystemRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TopApipatchTopSystem
     */
    moid: string
    /**
     * The &#39;top.System&#39; resource to update.
     * @type TopSystem
     * @memberof TopApipatchTopSystem
     */
    topSystem: TopSystem
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TopApipatchTopSystem
     */
    ifMatch?: string
}

export interface TopApiUpdateTopSystemRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof TopApiupdateTopSystem
     */
    moid: string
    /**
     * The &#39;top.System&#39; resource to update.
     * @type TopSystem
     * @memberof TopApiupdateTopSystem
     */
    topSystem: TopSystem
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof TopApiupdateTopSystem
     */
    ifMatch?: string
}


export class ObjectTopApi {
    private api: ObservableTopApi

    public constructor(configuration: Configuration, requestFactory?: TopApiRequestFactory, responseProcessor?: TopApiResponseProcessor) {
        this.api = new ObservableTopApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'top.System' resource.
     * @param param the request object
     */
    public getTopSystemByMoid(param: TopApiGetTopSystemByMoidRequest, options?: Configuration): Promise<TopSystem> {
        return this.api.getTopSystemByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'top.System' resource.
     * @param param the request object
     */
    public getTopSystemList(param: TopApiGetTopSystemListRequest, options?: Configuration): Promise<TopSystemResponse> {
        return this.api.getTopSystemList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'top.System' resource.
     * @param param the request object
     */
    public patchTopSystem(param: TopApiPatchTopSystemRequest, options?: Configuration): Promise<TopSystem> {
        return this.api.patchTopSystem(param.moid, param.topSystem, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'top.System' resource.
     * @param param the request object
     */
    public updateTopSystem(param: TopApiUpdateTopSystemRequest, options?: Configuration): Promise<TopSystem> {
        return this.api.updateTopSystem(param.moid, param.topSystem, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableUcsdApi } from "./ObservableAPI";
import { UcsdApiRequestFactory, UcsdApiResponseProcessor} from "../apis/UcsdApi";

export interface UcsdApiDeleteUcsdBackupInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof UcsdApideleteUcsdBackupInfo
     */
    moid: string
}

export interface UcsdApiGetUcsdBackupInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof UcsdApigetUcsdBackupInfoByMoid
     */
    moid: string
}

export interface UcsdApiGetUcsdBackupInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof UcsdApigetUcsdBackupInfoList
     */
    tags?: string
}


export class ObjectUcsdApi {
    private api: ObservableUcsdApi

    public constructor(configuration: Configuration, requestFactory?: UcsdApiRequestFactory, responseProcessor?: UcsdApiResponseProcessor) {
        this.api = new ObservableUcsdApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Delete a 'ucsd.BackupInfo' resource.
     * @param param the request object
     */
    public deleteUcsdBackupInfo(param: UcsdApiDeleteUcsdBackupInfoRequest, options?: Configuration): Promise<void> {
        return this.api.deleteUcsdBackupInfo(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ucsd.BackupInfo' resource.
     * @param param the request object
     */
    public getUcsdBackupInfoByMoid(param: UcsdApiGetUcsdBackupInfoByMoidRequest, options?: Configuration): Promise<UcsdBackupInfo> {
        return this.api.getUcsdBackupInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'ucsd.BackupInfo' resource.
     * @param param the request object
     */
    public getUcsdBackupInfoList(param: UcsdApiGetUcsdBackupInfoListRequest, options?: Configuration): Promise<UcsdBackupInfoResponse> {
        return this.api.getUcsdBackupInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	

}




import { ObservableVirtualizationApi } from "./ObservableAPI";
import { VirtualizationApiRequestFactory, VirtualizationApiResponseProcessor} from "../apis/VirtualizationApi";

export interface VirtualizationApiGetVirtualizationVmwareClusterByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareClusterByMoid
     */
    moid: string
}

export interface VirtualizationApiGetVirtualizationVmwareClusterListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareClusterList
     */
    tags?: string
}

export interface VirtualizationApiGetVirtualizationVmwareDatacenterByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterByMoid
     */
    moid: string
}

export interface VirtualizationApiGetVirtualizationVmwareDatacenterListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatacenterList
     */
    tags?: string
}

export interface VirtualizationApiGetVirtualizationVmwareDatastoreByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreByMoid
     */
    moid: string
}

export interface VirtualizationApiGetVirtualizationVmwareDatastoreListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareDatastoreList
     */
    tags?: string
}

export interface VirtualizationApiGetVirtualizationVmwareHostByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareHostByMoid
     */
    moid: string
}

export interface VirtualizationApiGetVirtualizationVmwareHostListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareHostList
     */
    tags?: string
}

export interface VirtualizationApiGetVirtualizationVmwareVcenterByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterByMoid
     */
    moid: string
}

export interface VirtualizationApiGetVirtualizationVmwareVcenterListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVcenterList
     */
    tags?: string
}

export interface VirtualizationApiGetVirtualizationVmwareVirtualMachineByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineByMoid
     */
    moid: string
}

export interface VirtualizationApiGetVirtualizationVmwareVirtualMachineListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VirtualizationApigetVirtualizationVmwareVirtualMachineList
     */
    tags?: string
}

export interface VirtualizationApiPatchVirtualizationVmwareClusterRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareCluster
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareCluster&#39; resource to update.
     * @type VirtualizationVmwareCluster
     * @memberof VirtualizationApipatchVirtualizationVmwareCluster
     */
    virtualizationVmwareCluster: VirtualizationVmwareCluster
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareCluster
     */
    ifMatch?: string
}

export interface VirtualizationApiPatchVirtualizationVmwareDatacenterRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareDatacenter
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareDatacenter&#39; resource to update.
     * @type VirtualizationVmwareDatacenter
     * @memberof VirtualizationApipatchVirtualizationVmwareDatacenter
     */
    virtualizationVmwareDatacenter: VirtualizationVmwareDatacenter
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareDatacenter
     */
    ifMatch?: string
}

export interface VirtualizationApiPatchVirtualizationVmwareDatastoreRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareDatastore
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareDatastore&#39; resource to update.
     * @type VirtualizationVmwareDatastore
     * @memberof VirtualizationApipatchVirtualizationVmwareDatastore
     */
    virtualizationVmwareDatastore: VirtualizationVmwareDatastore
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareDatastore
     */
    ifMatch?: string
}

export interface VirtualizationApiPatchVirtualizationVmwareHostRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareHost
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareHost&#39; resource to update.
     * @type VirtualizationVmwareHost
     * @memberof VirtualizationApipatchVirtualizationVmwareHost
     */
    virtualizationVmwareHost: VirtualizationVmwareHost
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareHost
     */
    ifMatch?: string
}

export interface VirtualizationApiPatchVirtualizationVmwareVirtualMachineRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareVirtualMachine
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareVirtualMachine&#39; resource to update.
     * @type VirtualizationVmwareVirtualMachine
     * @memberof VirtualizationApipatchVirtualizationVmwareVirtualMachine
     */
    virtualizationVmwareVirtualMachine: VirtualizationVmwareVirtualMachine
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApipatchVirtualizationVmwareVirtualMachine
     */
    ifMatch?: string
}

export interface VirtualizationApiUpdateVirtualizationVmwareClusterRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareCluster
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareCluster&#39; resource to update.
     * @type VirtualizationVmwareCluster
     * @memberof VirtualizationApiupdateVirtualizationVmwareCluster
     */
    virtualizationVmwareCluster: VirtualizationVmwareCluster
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareCluster
     */
    ifMatch?: string
}

export interface VirtualizationApiUpdateVirtualizationVmwareDatacenterRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareDatacenter
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareDatacenter&#39; resource to update.
     * @type VirtualizationVmwareDatacenter
     * @memberof VirtualizationApiupdateVirtualizationVmwareDatacenter
     */
    virtualizationVmwareDatacenter: VirtualizationVmwareDatacenter
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareDatacenter
     */
    ifMatch?: string
}

export interface VirtualizationApiUpdateVirtualizationVmwareDatastoreRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareDatastore
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareDatastore&#39; resource to update.
     * @type VirtualizationVmwareDatastore
     * @memberof VirtualizationApiupdateVirtualizationVmwareDatastore
     */
    virtualizationVmwareDatastore: VirtualizationVmwareDatastore
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareDatastore
     */
    ifMatch?: string
}

export interface VirtualizationApiUpdateVirtualizationVmwareHostRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareHost
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareHost&#39; resource to update.
     * @type VirtualizationVmwareHost
     * @memberof VirtualizationApiupdateVirtualizationVmwareHost
     */
    virtualizationVmwareHost: VirtualizationVmwareHost
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareHost
     */
    ifMatch?: string
}

export interface VirtualizationApiUpdateVirtualizationVmwareVirtualMachineRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareVirtualMachine
     */
    moid: string
    /**
     * The &#39;virtualization.VmwareVirtualMachine&#39; resource to update.
     * @type VirtualizationVmwareVirtualMachine
     * @memberof VirtualizationApiupdateVirtualizationVmwareVirtualMachine
     */
    virtualizationVmwareVirtualMachine: VirtualizationVmwareVirtualMachine
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VirtualizationApiupdateVirtualizationVmwareVirtualMachine
     */
    ifMatch?: string
}


export class ObjectVirtualizationApi {
    private api: ObservableVirtualizationApi

    public constructor(configuration: Configuration, requestFactory?: VirtualizationApiRequestFactory, responseProcessor?: VirtualizationApiResponseProcessor) {
        this.api = new ObservableVirtualizationApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Read a 'virtualization.VmwareCluster' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareClusterByMoid(param: VirtualizationApiGetVirtualizationVmwareClusterByMoidRequest, options?: Configuration): Promise<VirtualizationVmwareCluster> {
        return this.api.getVirtualizationVmwareClusterByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareCluster' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareClusterList(param: VirtualizationApiGetVirtualizationVmwareClusterListRequest, options?: Configuration): Promise<VirtualizationVmwareClusterResponse> {
        return this.api.getVirtualizationVmwareClusterList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareDatacenter' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareDatacenterByMoid(param: VirtualizationApiGetVirtualizationVmwareDatacenterByMoidRequest, options?: Configuration): Promise<VirtualizationVmwareDatacenter> {
        return this.api.getVirtualizationVmwareDatacenterByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareDatacenter' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareDatacenterList(param: VirtualizationApiGetVirtualizationVmwareDatacenterListRequest, options?: Configuration): Promise<VirtualizationVmwareDatacenterResponse> {
        return this.api.getVirtualizationVmwareDatacenterList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareDatastore' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareDatastoreByMoid(param: VirtualizationApiGetVirtualizationVmwareDatastoreByMoidRequest, options?: Configuration): Promise<VirtualizationVmwareDatastore> {
        return this.api.getVirtualizationVmwareDatastoreByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareDatastore' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareDatastoreList(param: VirtualizationApiGetVirtualizationVmwareDatastoreListRequest, options?: Configuration): Promise<VirtualizationVmwareDatastoreResponse> {
        return this.api.getVirtualizationVmwareDatastoreList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareHost' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareHostByMoid(param: VirtualizationApiGetVirtualizationVmwareHostByMoidRequest, options?: Configuration): Promise<VirtualizationVmwareHost> {
        return this.api.getVirtualizationVmwareHostByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareHost' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareHostList(param: VirtualizationApiGetVirtualizationVmwareHostListRequest, options?: Configuration): Promise<VirtualizationVmwareHostResponse> {
        return this.api.getVirtualizationVmwareHostList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareVcenter' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareVcenterByMoid(param: VirtualizationApiGetVirtualizationVmwareVcenterByMoidRequest, options?: Configuration): Promise<VirtualizationVmwareVcenter> {
        return this.api.getVirtualizationVmwareVcenterByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareVcenter' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareVcenterList(param: VirtualizationApiGetVirtualizationVmwareVcenterListRequest, options?: Configuration): Promise<VirtualizationVmwareVcenterResponse> {
        return this.api.getVirtualizationVmwareVcenterList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareVirtualMachine' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareVirtualMachineByMoid(param: VirtualizationApiGetVirtualizationVmwareVirtualMachineByMoidRequest, options?: Configuration): Promise<VirtualizationVmwareVirtualMachine> {
        return this.api.getVirtualizationVmwareVirtualMachineByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'virtualization.VmwareVirtualMachine' resource.
     * @param param the request object
     */
    public getVirtualizationVmwareVirtualMachineList(param: VirtualizationApiGetVirtualizationVmwareVirtualMachineListRequest, options?: Configuration): Promise<VirtualizationVmwareVirtualMachineResponse> {
        return this.api.getVirtualizationVmwareVirtualMachineList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareCluster' resource.
     * @param param the request object
     */
    public patchVirtualizationVmwareCluster(param: VirtualizationApiPatchVirtualizationVmwareClusterRequest, options?: Configuration): Promise<VirtualizationVmwareCluster> {
        return this.api.patchVirtualizationVmwareCluster(param.moid, param.virtualizationVmwareCluster, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareDatacenter' resource.
     * @param param the request object
     */
    public patchVirtualizationVmwareDatacenter(param: VirtualizationApiPatchVirtualizationVmwareDatacenterRequest, options?: Configuration): Promise<VirtualizationVmwareDatacenter> {
        return this.api.patchVirtualizationVmwareDatacenter(param.moid, param.virtualizationVmwareDatacenter, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareDatastore' resource.
     * @param param the request object
     */
    public patchVirtualizationVmwareDatastore(param: VirtualizationApiPatchVirtualizationVmwareDatastoreRequest, options?: Configuration): Promise<VirtualizationVmwareDatastore> {
        return this.api.patchVirtualizationVmwareDatastore(param.moid, param.virtualizationVmwareDatastore, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareHost' resource.
     * @param param the request object
     */
    public patchVirtualizationVmwareHost(param: VirtualizationApiPatchVirtualizationVmwareHostRequest, options?: Configuration): Promise<VirtualizationVmwareHost> {
        return this.api.patchVirtualizationVmwareHost(param.moid, param.virtualizationVmwareHost, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareVirtualMachine' resource.
     * @param param the request object
     */
    public patchVirtualizationVmwareVirtualMachine(param: VirtualizationApiPatchVirtualizationVmwareVirtualMachineRequest, options?: Configuration): Promise<VirtualizationVmwareVirtualMachine> {
        return this.api.patchVirtualizationVmwareVirtualMachine(param.moid, param.virtualizationVmwareVirtualMachine, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareCluster' resource.
     * @param param the request object
     */
    public updateVirtualizationVmwareCluster(param: VirtualizationApiUpdateVirtualizationVmwareClusterRequest, options?: Configuration): Promise<VirtualizationVmwareCluster> {
        return this.api.updateVirtualizationVmwareCluster(param.moid, param.virtualizationVmwareCluster, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareDatacenter' resource.
     * @param param the request object
     */
    public updateVirtualizationVmwareDatacenter(param: VirtualizationApiUpdateVirtualizationVmwareDatacenterRequest, options?: Configuration): Promise<VirtualizationVmwareDatacenter> {
        return this.api.updateVirtualizationVmwareDatacenter(param.moid, param.virtualizationVmwareDatacenter, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareDatastore' resource.
     * @param param the request object
     */
    public updateVirtualizationVmwareDatastore(param: VirtualizationApiUpdateVirtualizationVmwareDatastoreRequest, options?: Configuration): Promise<VirtualizationVmwareDatastore> {
        return this.api.updateVirtualizationVmwareDatastore(param.moid, param.virtualizationVmwareDatastore, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareHost' resource.
     * @param param the request object
     */
    public updateVirtualizationVmwareHost(param: VirtualizationApiUpdateVirtualizationVmwareHostRequest, options?: Configuration): Promise<VirtualizationVmwareHost> {
        return this.api.updateVirtualizationVmwareHost(param.moid, param.virtualizationVmwareHost, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'virtualization.VmwareVirtualMachine' resource.
     * @param param the request object
     */
    public updateVirtualizationVmwareVirtualMachine(param: VirtualizationApiUpdateVirtualizationVmwareVirtualMachineRequest, options?: Configuration): Promise<VirtualizationVmwareVirtualMachine> {
        return this.api.updateVirtualizationVmwareVirtualMachine(param.moid, param.virtualizationVmwareVirtualMachine, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableVmediaApi } from "./ObservableAPI";
import { VmediaApiRequestFactory, VmediaApiResponseProcessor} from "../apis/VmediaApi";

export interface VmediaApiCreateVmediaPolicyRequest {
    /**
     * The &#39;vmedia.Policy&#39; resource to create.
     * @type VmediaPolicy
     * @memberof VmediaApicreateVmediaPolicy
     */
    vmediaPolicy: VmediaPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VmediaApicreateVmediaPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VmediaApicreateVmediaPolicy
     */
    ifNoneMatch?: string
}

export interface VmediaApiDeleteVmediaPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VmediaApideleteVmediaPolicy
     */
    moid: string
}

export interface VmediaApiGetVmediaPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VmediaApigetVmediaPolicyByMoid
     */
    moid: string
}

export interface VmediaApiGetVmediaPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VmediaApigetVmediaPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VmediaApigetVmediaPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VmediaApigetVmediaPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VmediaApigetVmediaPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VmediaApigetVmediaPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VmediaApigetVmediaPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VmediaApigetVmediaPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VmediaApigetVmediaPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VmediaApigetVmediaPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VmediaApigetVmediaPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VmediaApigetVmediaPolicyList
     */
    tags?: string
}

export interface VmediaApiPatchVmediaPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VmediaApipatchVmediaPolicy
     */
    moid: string
    /**
     * The &#39;vmedia.Policy&#39; resource to update.
     * @type VmediaPolicy
     * @memberof VmediaApipatchVmediaPolicy
     */
    vmediaPolicy: VmediaPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VmediaApipatchVmediaPolicy
     */
    ifMatch?: string
}

export interface VmediaApiUpdateVmediaPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VmediaApiupdateVmediaPolicy
     */
    moid: string
    /**
     * The &#39;vmedia.Policy&#39; resource to update.
     * @type VmediaPolicy
     * @memberof VmediaApiupdateVmediaPolicy
     */
    vmediaPolicy: VmediaPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VmediaApiupdateVmediaPolicy
     */
    ifMatch?: string
}


export class ObjectVmediaApi {
    private api: ObservableVmediaApi

    public constructor(configuration: Configuration, requestFactory?: VmediaApiRequestFactory, responseProcessor?: VmediaApiResponseProcessor) {
        this.api = new ObservableVmediaApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'vmedia.Policy' resource.
     * @param param the request object
     */
    public createVmediaPolicy(param: VmediaApiCreateVmediaPolicyRequest, options?: Configuration): Promise<VmediaPolicy> {
        return this.api.createVmediaPolicy(param.vmediaPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'vmedia.Policy' resource.
     * @param param the request object
     */
    public deleteVmediaPolicy(param: VmediaApiDeleteVmediaPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVmediaPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vmedia.Policy' resource.
     * @param param the request object
     */
    public getVmediaPolicyByMoid(param: VmediaApiGetVmediaPolicyByMoidRequest, options?: Configuration): Promise<VmediaPolicy> {
        return this.api.getVmediaPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vmedia.Policy' resource.
     * @param param the request object
     */
    public getVmediaPolicyList(param: VmediaApiGetVmediaPolicyListRequest, options?: Configuration): Promise<VmediaPolicyResponse> {
        return this.api.getVmediaPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'vmedia.Policy' resource.
     * @param param the request object
     */
    public patchVmediaPolicy(param: VmediaApiPatchVmediaPolicyRequest, options?: Configuration): Promise<VmediaPolicy> {
        return this.api.patchVmediaPolicy(param.moid, param.vmediaPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vmedia.Policy' resource.
     * @param param the request object
     */
    public updateVmediaPolicy(param: VmediaApiUpdateVmediaPolicyRequest, options?: Configuration): Promise<VmediaPolicy> {
        return this.api.updateVmediaPolicy(param.moid, param.vmediaPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableVnicApi } from "./ObservableAPI";
import { VnicApiRequestFactory, VnicApiResponseProcessor} from "../apis/VnicApi";

export interface VnicApiCreateVnicEthAdapterPolicyRequest {
    /**
     * The &#39;vnic.EthAdapterPolicy&#39; resource to create.
     * @type VnicEthAdapterPolicy
     * @memberof VnicApicreateVnicEthAdapterPolicy
     */
    vnicEthAdapterPolicy: VnicEthAdapterPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicEthAdapterPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicEthAdapterPolicy
     */
    ifNoneMatch?: string
}

export interface VnicApiCreateVnicEthIfRequest {
    /**
     * The &#39;vnic.EthIf&#39; resource to create.
     * @type VnicEthIf
     * @memberof VnicApicreateVnicEthIf
     */
    vnicEthIf: VnicEthIf
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicEthIf
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicEthIf
     */
    ifNoneMatch?: string
}

export interface VnicApiCreateVnicEthNetworkPolicyRequest {
    /**
     * The &#39;vnic.EthNetworkPolicy&#39; resource to create.
     * @type VnicEthNetworkPolicy
     * @memberof VnicApicreateVnicEthNetworkPolicy
     */
    vnicEthNetworkPolicy: VnicEthNetworkPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicEthNetworkPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicEthNetworkPolicy
     */
    ifNoneMatch?: string
}

export interface VnicApiCreateVnicEthQosPolicyRequest {
    /**
     * The &#39;vnic.EthQosPolicy&#39; resource to create.
     * @type VnicEthQosPolicy
     * @memberof VnicApicreateVnicEthQosPolicy
     */
    vnicEthQosPolicy: VnicEthQosPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicEthQosPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicEthQosPolicy
     */
    ifNoneMatch?: string
}

export interface VnicApiCreateVnicFcAdapterPolicyRequest {
    /**
     * The &#39;vnic.FcAdapterPolicy&#39; resource to create.
     * @type VnicFcAdapterPolicy
     * @memberof VnicApicreateVnicFcAdapterPolicy
     */
    vnicFcAdapterPolicy: VnicFcAdapterPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicFcAdapterPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicFcAdapterPolicy
     */
    ifNoneMatch?: string
}

export interface VnicApiCreateVnicFcIfRequest {
    /**
     * The &#39;vnic.FcIf&#39; resource to create.
     * @type VnicFcIf
     * @memberof VnicApicreateVnicFcIf
     */
    vnicFcIf: VnicFcIf
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicFcIf
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicFcIf
     */
    ifNoneMatch?: string
}

export interface VnicApiCreateVnicFcNetworkPolicyRequest {
    /**
     * The &#39;vnic.FcNetworkPolicy&#39; resource to create.
     * @type VnicFcNetworkPolicy
     * @memberof VnicApicreateVnicFcNetworkPolicy
     */
    vnicFcNetworkPolicy: VnicFcNetworkPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicFcNetworkPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicFcNetworkPolicy
     */
    ifNoneMatch?: string
}

export interface VnicApiCreateVnicFcQosPolicyRequest {
    /**
     * The &#39;vnic.FcQosPolicy&#39; resource to create.
     * @type VnicFcQosPolicy
     * @memberof VnicApicreateVnicFcQosPolicy
     */
    vnicFcQosPolicy: VnicFcQosPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicFcQosPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicFcQosPolicy
     */
    ifNoneMatch?: string
}

export interface VnicApiCreateVnicLanConnectivityPolicyRequest {
    /**
     * The &#39;vnic.LanConnectivityPolicy&#39; resource to create.
     * @type VnicLanConnectivityPolicy
     * @memberof VnicApicreateVnicLanConnectivityPolicy
     */
    vnicLanConnectivityPolicy: VnicLanConnectivityPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicLanConnectivityPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicLanConnectivityPolicy
     */
    ifNoneMatch?: string
}

export interface VnicApiCreateVnicSanConnectivityPolicyRequest {
    /**
     * The &#39;vnic.SanConnectivityPolicy&#39; resource to create.
     * @type VnicSanConnectivityPolicy
     * @memberof VnicApicreateVnicSanConnectivityPolicy
     */
    vnicSanConnectivityPolicy: VnicSanConnectivityPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApicreateVnicSanConnectivityPolicy
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof VnicApicreateVnicSanConnectivityPolicy
     */
    ifNoneMatch?: string
}

export interface VnicApiDeleteVnicEthAdapterPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicEthAdapterPolicy
     */
    moid: string
}

export interface VnicApiDeleteVnicEthIfRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicEthIf
     */
    moid: string
}

export interface VnicApiDeleteVnicEthNetworkPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicEthNetworkPolicy
     */
    moid: string
}

export interface VnicApiDeleteVnicEthQosPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicEthQosPolicy
     */
    moid: string
}

export interface VnicApiDeleteVnicFcAdapterPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicFcAdapterPolicy
     */
    moid: string
}

export interface VnicApiDeleteVnicFcIfRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicFcIf
     */
    moid: string
}

export interface VnicApiDeleteVnicFcNetworkPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicFcNetworkPolicy
     */
    moid: string
}

export interface VnicApiDeleteVnicFcQosPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicFcQosPolicy
     */
    moid: string
}

export interface VnicApiDeleteVnicLanConnectivityPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicLanConnectivityPolicy
     */
    moid: string
}

export interface VnicApiDeleteVnicSanConnectivityPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApideleteVnicSanConnectivityPolicy
     */
    moid: string
}

export interface VnicApiGetVnicEthAdapterPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicEthAdapterPolicyByMoid
     */
    moid: string
}

export interface VnicApiGetVnicEthAdapterPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicEthAdapterPolicyList
     */
    tags?: string
}

export interface VnicApiGetVnicEthIfByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicEthIfByMoid
     */
    moid: string
}

export interface VnicApiGetVnicEthIfListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicEthIfList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicEthIfList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicEthIfList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicEthIfList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicEthIfList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicEthIfList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicEthIfList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicEthIfList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicEthIfList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicEthIfList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicEthIfList
     */
    tags?: string
}

export interface VnicApiGetVnicEthNetworkPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicEthNetworkPolicyByMoid
     */
    moid: string
}

export interface VnicApiGetVnicEthNetworkPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicEthNetworkPolicyList
     */
    tags?: string
}

export interface VnicApiGetVnicEthQosPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicEthQosPolicyByMoid
     */
    moid: string
}

export interface VnicApiGetVnicEthQosPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicEthQosPolicyList
     */
    tags?: string
}

export interface VnicApiGetVnicFcAdapterPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicFcAdapterPolicyByMoid
     */
    moid: string
}

export interface VnicApiGetVnicFcAdapterPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicFcAdapterPolicyList
     */
    tags?: string
}

export interface VnicApiGetVnicFcIfByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicFcIfByMoid
     */
    moid: string
}

export interface VnicApiGetVnicFcIfListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicFcIfList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicFcIfList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicFcIfList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicFcIfList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicFcIfList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicFcIfList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicFcIfList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicFcIfList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicFcIfList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicFcIfList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicFcIfList
     */
    tags?: string
}

export interface VnicApiGetVnicFcNetworkPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicFcNetworkPolicyByMoid
     */
    moid: string
}

export interface VnicApiGetVnicFcNetworkPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicFcNetworkPolicyList
     */
    tags?: string
}

export interface VnicApiGetVnicFcQosPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicFcQosPolicyByMoid
     */
    moid: string
}

export interface VnicApiGetVnicFcQosPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicFcQosPolicyList
     */
    tags?: string
}

export interface VnicApiGetVnicLanConnectivityPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicLanConnectivityPolicyByMoid
     */
    moid: string
}

export interface VnicApiGetVnicLanConnectivityPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicLanConnectivityPolicyList
     */
    tags?: string
}

export interface VnicApiGetVnicSanConnectivityPolicyByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApigetVnicSanConnectivityPolicyByMoid
     */
    moid: string
}

export interface VnicApiGetVnicSanConnectivityPolicyListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof VnicApigetVnicSanConnectivityPolicyList
     */
    tags?: string
}

export interface VnicApiPatchVnicEthAdapterPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicEthAdapterPolicy
     */
    moid: string
    /**
     * The &#39;vnic.EthAdapterPolicy&#39; resource to update.
     * @type VnicEthAdapterPolicy
     * @memberof VnicApipatchVnicEthAdapterPolicy
     */
    vnicEthAdapterPolicy: VnicEthAdapterPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicEthAdapterPolicy
     */
    ifMatch?: string
}

export interface VnicApiPatchVnicEthIfRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicEthIf
     */
    moid: string
    /**
     * The &#39;vnic.EthIf&#39; resource to update.
     * @type VnicEthIf
     * @memberof VnicApipatchVnicEthIf
     */
    vnicEthIf: VnicEthIf
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicEthIf
     */
    ifMatch?: string
}

export interface VnicApiPatchVnicEthNetworkPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicEthNetworkPolicy
     */
    moid: string
    /**
     * The &#39;vnic.EthNetworkPolicy&#39; resource to update.
     * @type VnicEthNetworkPolicy
     * @memberof VnicApipatchVnicEthNetworkPolicy
     */
    vnicEthNetworkPolicy: VnicEthNetworkPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicEthNetworkPolicy
     */
    ifMatch?: string
}

export interface VnicApiPatchVnicEthQosPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicEthQosPolicy
     */
    moid: string
    /**
     * The &#39;vnic.EthQosPolicy&#39; resource to update.
     * @type VnicEthQosPolicy
     * @memberof VnicApipatchVnicEthQosPolicy
     */
    vnicEthQosPolicy: VnicEthQosPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicEthQosPolicy
     */
    ifMatch?: string
}

export interface VnicApiPatchVnicFcAdapterPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicFcAdapterPolicy
     */
    moid: string
    /**
     * The &#39;vnic.FcAdapterPolicy&#39; resource to update.
     * @type VnicFcAdapterPolicy
     * @memberof VnicApipatchVnicFcAdapterPolicy
     */
    vnicFcAdapterPolicy: VnicFcAdapterPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicFcAdapterPolicy
     */
    ifMatch?: string
}

export interface VnicApiPatchVnicFcIfRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicFcIf
     */
    moid: string
    /**
     * The &#39;vnic.FcIf&#39; resource to update.
     * @type VnicFcIf
     * @memberof VnicApipatchVnicFcIf
     */
    vnicFcIf: VnicFcIf
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicFcIf
     */
    ifMatch?: string
}

export interface VnicApiPatchVnicFcNetworkPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicFcNetworkPolicy
     */
    moid: string
    /**
     * The &#39;vnic.FcNetworkPolicy&#39; resource to update.
     * @type VnicFcNetworkPolicy
     * @memberof VnicApipatchVnicFcNetworkPolicy
     */
    vnicFcNetworkPolicy: VnicFcNetworkPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicFcNetworkPolicy
     */
    ifMatch?: string
}

export interface VnicApiPatchVnicFcQosPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicFcQosPolicy
     */
    moid: string
    /**
     * The &#39;vnic.FcQosPolicy&#39; resource to update.
     * @type VnicFcQosPolicy
     * @memberof VnicApipatchVnicFcQosPolicy
     */
    vnicFcQosPolicy: VnicFcQosPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicFcQosPolicy
     */
    ifMatch?: string
}

export interface VnicApiPatchVnicLanConnectivityPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicLanConnectivityPolicy
     */
    moid: string
    /**
     * The &#39;vnic.LanConnectivityPolicy&#39; resource to update.
     * @type VnicLanConnectivityPolicy
     * @memberof VnicApipatchVnicLanConnectivityPolicy
     */
    vnicLanConnectivityPolicy: VnicLanConnectivityPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicLanConnectivityPolicy
     */
    ifMatch?: string
}

export interface VnicApiPatchVnicSanConnectivityPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApipatchVnicSanConnectivityPolicy
     */
    moid: string
    /**
     * The &#39;vnic.SanConnectivityPolicy&#39; resource to update.
     * @type VnicSanConnectivityPolicy
     * @memberof VnicApipatchVnicSanConnectivityPolicy
     */
    vnicSanConnectivityPolicy: VnicSanConnectivityPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApipatchVnicSanConnectivityPolicy
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicEthAdapterPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicEthAdapterPolicy
     */
    moid: string
    /**
     * The &#39;vnic.EthAdapterPolicy&#39; resource to update.
     * @type VnicEthAdapterPolicy
     * @memberof VnicApiupdateVnicEthAdapterPolicy
     */
    vnicEthAdapterPolicy: VnicEthAdapterPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicEthAdapterPolicy
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicEthIfRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicEthIf
     */
    moid: string
    /**
     * The &#39;vnic.EthIf&#39; resource to update.
     * @type VnicEthIf
     * @memberof VnicApiupdateVnicEthIf
     */
    vnicEthIf: VnicEthIf
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicEthIf
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicEthNetworkPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicEthNetworkPolicy
     */
    moid: string
    /**
     * The &#39;vnic.EthNetworkPolicy&#39; resource to update.
     * @type VnicEthNetworkPolicy
     * @memberof VnicApiupdateVnicEthNetworkPolicy
     */
    vnicEthNetworkPolicy: VnicEthNetworkPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicEthNetworkPolicy
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicEthQosPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicEthQosPolicy
     */
    moid: string
    /**
     * The &#39;vnic.EthQosPolicy&#39; resource to update.
     * @type VnicEthQosPolicy
     * @memberof VnicApiupdateVnicEthQosPolicy
     */
    vnicEthQosPolicy: VnicEthQosPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicEthQosPolicy
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicFcAdapterPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicFcAdapterPolicy
     */
    moid: string
    /**
     * The &#39;vnic.FcAdapterPolicy&#39; resource to update.
     * @type VnicFcAdapterPolicy
     * @memberof VnicApiupdateVnicFcAdapterPolicy
     */
    vnicFcAdapterPolicy: VnicFcAdapterPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicFcAdapterPolicy
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicFcIfRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicFcIf
     */
    moid: string
    /**
     * The &#39;vnic.FcIf&#39; resource to update.
     * @type VnicFcIf
     * @memberof VnicApiupdateVnicFcIf
     */
    vnicFcIf: VnicFcIf
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicFcIf
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicFcNetworkPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicFcNetworkPolicy
     */
    moid: string
    /**
     * The &#39;vnic.FcNetworkPolicy&#39; resource to update.
     * @type VnicFcNetworkPolicy
     * @memberof VnicApiupdateVnicFcNetworkPolicy
     */
    vnicFcNetworkPolicy: VnicFcNetworkPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicFcNetworkPolicy
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicFcQosPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicFcQosPolicy
     */
    moid: string
    /**
     * The &#39;vnic.FcQosPolicy&#39; resource to update.
     * @type VnicFcQosPolicy
     * @memberof VnicApiupdateVnicFcQosPolicy
     */
    vnicFcQosPolicy: VnicFcQosPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicFcQosPolicy
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicLanConnectivityPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicLanConnectivityPolicy
     */
    moid: string
    /**
     * The &#39;vnic.LanConnectivityPolicy&#39; resource to update.
     * @type VnicLanConnectivityPolicy
     * @memberof VnicApiupdateVnicLanConnectivityPolicy
     */
    vnicLanConnectivityPolicy: VnicLanConnectivityPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicLanConnectivityPolicy
     */
    ifMatch?: string
}

export interface VnicApiUpdateVnicSanConnectivityPolicyRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof VnicApiupdateVnicSanConnectivityPolicy
     */
    moid: string
    /**
     * The &#39;vnic.SanConnectivityPolicy&#39; resource to update.
     * @type VnicSanConnectivityPolicy
     * @memberof VnicApiupdateVnicSanConnectivityPolicy
     */
    vnicSanConnectivityPolicy: VnicSanConnectivityPolicy
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof VnicApiupdateVnicSanConnectivityPolicy
     */
    ifMatch?: string
}


export class ObjectVnicApi {
    private api: ObservableVnicApi

    public constructor(configuration: Configuration, requestFactory?: VnicApiRequestFactory, responseProcessor?: VnicApiResponseProcessor) {
        this.api = new ObservableVnicApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'vnic.EthAdapterPolicy' resource.
     * @param param the request object
     */
    public createVnicEthAdapterPolicy(param: VnicApiCreateVnicEthAdapterPolicyRequest, options?: Configuration): Promise<VnicEthAdapterPolicy> {
        return this.api.createVnicEthAdapterPolicy(param.vnicEthAdapterPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'vnic.EthIf' resource.
     * @param param the request object
     */
    public createVnicEthIf(param: VnicApiCreateVnicEthIfRequest, options?: Configuration): Promise<VnicEthIf> {
        return this.api.createVnicEthIf(param.vnicEthIf, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'vnic.EthNetworkPolicy' resource.
     * @param param the request object
     */
    public createVnicEthNetworkPolicy(param: VnicApiCreateVnicEthNetworkPolicyRequest, options?: Configuration): Promise<VnicEthNetworkPolicy> {
        return this.api.createVnicEthNetworkPolicy(param.vnicEthNetworkPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'vnic.EthQosPolicy' resource.
     * @param param the request object
     */
    public createVnicEthQosPolicy(param: VnicApiCreateVnicEthQosPolicyRequest, options?: Configuration): Promise<VnicEthQosPolicy> {
        return this.api.createVnicEthQosPolicy(param.vnicEthQosPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'vnic.FcAdapterPolicy' resource.
     * @param param the request object
     */
    public createVnicFcAdapterPolicy(param: VnicApiCreateVnicFcAdapterPolicyRequest, options?: Configuration): Promise<VnicFcAdapterPolicy> {
        return this.api.createVnicFcAdapterPolicy(param.vnicFcAdapterPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'vnic.FcIf' resource.
     * @param param the request object
     */
    public createVnicFcIf(param: VnicApiCreateVnicFcIfRequest, options?: Configuration): Promise<VnicFcIf> {
        return this.api.createVnicFcIf(param.vnicFcIf, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'vnic.FcNetworkPolicy' resource.
     * @param param the request object
     */
    public createVnicFcNetworkPolicy(param: VnicApiCreateVnicFcNetworkPolicyRequest, options?: Configuration): Promise<VnicFcNetworkPolicy> {
        return this.api.createVnicFcNetworkPolicy(param.vnicFcNetworkPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'vnic.FcQosPolicy' resource.
     * @param param the request object
     */
    public createVnicFcQosPolicy(param: VnicApiCreateVnicFcQosPolicyRequest, options?: Configuration): Promise<VnicFcQosPolicy> {
        return this.api.createVnicFcQosPolicy(param.vnicFcQosPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'vnic.LanConnectivityPolicy' resource.
     * @param param the request object
     */
    public createVnicLanConnectivityPolicy(param: VnicApiCreateVnicLanConnectivityPolicyRequest, options?: Configuration): Promise<VnicLanConnectivityPolicy> {
        return this.api.createVnicLanConnectivityPolicy(param.vnicLanConnectivityPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'vnic.SanConnectivityPolicy' resource.
     * @param param the request object
     */
    public createVnicSanConnectivityPolicy(param: VnicApiCreateVnicSanConnectivityPolicyRequest, options?: Configuration): Promise<VnicSanConnectivityPolicy> {
        return this.api.createVnicSanConnectivityPolicy(param.vnicSanConnectivityPolicy, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.EthAdapterPolicy' resource.
     * @param param the request object
     */
    public deleteVnicEthAdapterPolicy(param: VnicApiDeleteVnicEthAdapterPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicEthAdapterPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.EthIf' resource.
     * @param param the request object
     */
    public deleteVnicEthIf(param: VnicApiDeleteVnicEthIfRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicEthIf(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.EthNetworkPolicy' resource.
     * @param param the request object
     */
    public deleteVnicEthNetworkPolicy(param: VnicApiDeleteVnicEthNetworkPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicEthNetworkPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.EthQosPolicy' resource.
     * @param param the request object
     */
    public deleteVnicEthQosPolicy(param: VnicApiDeleteVnicEthQosPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicEthQosPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.FcAdapterPolicy' resource.
     * @param param the request object
     */
    public deleteVnicFcAdapterPolicy(param: VnicApiDeleteVnicFcAdapterPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicFcAdapterPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.FcIf' resource.
     * @param param the request object
     */
    public deleteVnicFcIf(param: VnicApiDeleteVnicFcIfRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicFcIf(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.FcNetworkPolicy' resource.
     * @param param the request object
     */
    public deleteVnicFcNetworkPolicy(param: VnicApiDeleteVnicFcNetworkPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicFcNetworkPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.FcQosPolicy' resource.
     * @param param the request object
     */
    public deleteVnicFcQosPolicy(param: VnicApiDeleteVnicFcQosPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicFcQosPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.LanConnectivityPolicy' resource.
     * @param param the request object
     */
    public deleteVnicLanConnectivityPolicy(param: VnicApiDeleteVnicLanConnectivityPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicLanConnectivityPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'vnic.SanConnectivityPolicy' resource.
     * @param param the request object
     */
    public deleteVnicSanConnectivityPolicy(param: VnicApiDeleteVnicSanConnectivityPolicyRequest, options?: Configuration): Promise<void> {
        return this.api.deleteVnicSanConnectivityPolicy(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.EthAdapterPolicy' resource.
     * @param param the request object
     */
    public getVnicEthAdapterPolicyByMoid(param: VnicApiGetVnicEthAdapterPolicyByMoidRequest, options?: Configuration): Promise<VnicEthAdapterPolicy> {
        return this.api.getVnicEthAdapterPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.EthAdapterPolicy' resource.
     * @param param the request object
     */
    public getVnicEthAdapterPolicyList(param: VnicApiGetVnicEthAdapterPolicyListRequest, options?: Configuration): Promise<VnicEthAdapterPolicyResponse> {
        return this.api.getVnicEthAdapterPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.EthIf' resource.
     * @param param the request object
     */
    public getVnicEthIfByMoid(param: VnicApiGetVnicEthIfByMoidRequest, options?: Configuration): Promise<VnicEthIf> {
        return this.api.getVnicEthIfByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.EthIf' resource.
     * @param param the request object
     */
    public getVnicEthIfList(param: VnicApiGetVnicEthIfListRequest, options?: Configuration): Promise<VnicEthIfResponse> {
        return this.api.getVnicEthIfList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.EthNetworkPolicy' resource.
     * @param param the request object
     */
    public getVnicEthNetworkPolicyByMoid(param: VnicApiGetVnicEthNetworkPolicyByMoidRequest, options?: Configuration): Promise<VnicEthNetworkPolicy> {
        return this.api.getVnicEthNetworkPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.EthNetworkPolicy' resource.
     * @param param the request object
     */
    public getVnicEthNetworkPolicyList(param: VnicApiGetVnicEthNetworkPolicyListRequest, options?: Configuration): Promise<VnicEthNetworkPolicyResponse> {
        return this.api.getVnicEthNetworkPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.EthQosPolicy' resource.
     * @param param the request object
     */
    public getVnicEthQosPolicyByMoid(param: VnicApiGetVnicEthQosPolicyByMoidRequest, options?: Configuration): Promise<VnicEthQosPolicy> {
        return this.api.getVnicEthQosPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.EthQosPolicy' resource.
     * @param param the request object
     */
    public getVnicEthQosPolicyList(param: VnicApiGetVnicEthQosPolicyListRequest, options?: Configuration): Promise<VnicEthQosPolicyResponse> {
        return this.api.getVnicEthQosPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.FcAdapterPolicy' resource.
     * @param param the request object
     */
    public getVnicFcAdapterPolicyByMoid(param: VnicApiGetVnicFcAdapterPolicyByMoidRequest, options?: Configuration): Promise<VnicFcAdapterPolicy> {
        return this.api.getVnicFcAdapterPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.FcAdapterPolicy' resource.
     * @param param the request object
     */
    public getVnicFcAdapterPolicyList(param: VnicApiGetVnicFcAdapterPolicyListRequest, options?: Configuration): Promise<VnicFcAdapterPolicyResponse> {
        return this.api.getVnicFcAdapterPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.FcIf' resource.
     * @param param the request object
     */
    public getVnicFcIfByMoid(param: VnicApiGetVnicFcIfByMoidRequest, options?: Configuration): Promise<VnicFcIf> {
        return this.api.getVnicFcIfByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.FcIf' resource.
     * @param param the request object
     */
    public getVnicFcIfList(param: VnicApiGetVnicFcIfListRequest, options?: Configuration): Promise<VnicFcIfResponse> {
        return this.api.getVnicFcIfList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.FcNetworkPolicy' resource.
     * @param param the request object
     */
    public getVnicFcNetworkPolicyByMoid(param: VnicApiGetVnicFcNetworkPolicyByMoidRequest, options?: Configuration): Promise<VnicFcNetworkPolicy> {
        return this.api.getVnicFcNetworkPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.FcNetworkPolicy' resource.
     * @param param the request object
     */
    public getVnicFcNetworkPolicyList(param: VnicApiGetVnicFcNetworkPolicyListRequest, options?: Configuration): Promise<VnicFcNetworkPolicyResponse> {
        return this.api.getVnicFcNetworkPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.FcQosPolicy' resource.
     * @param param the request object
     */
    public getVnicFcQosPolicyByMoid(param: VnicApiGetVnicFcQosPolicyByMoidRequest, options?: Configuration): Promise<VnicFcQosPolicy> {
        return this.api.getVnicFcQosPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.FcQosPolicy' resource.
     * @param param the request object
     */
    public getVnicFcQosPolicyList(param: VnicApiGetVnicFcQosPolicyListRequest, options?: Configuration): Promise<VnicFcQosPolicyResponse> {
        return this.api.getVnicFcQosPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.LanConnectivityPolicy' resource.
     * @param param the request object
     */
    public getVnicLanConnectivityPolicyByMoid(param: VnicApiGetVnicLanConnectivityPolicyByMoidRequest, options?: Configuration): Promise<VnicLanConnectivityPolicy> {
        return this.api.getVnicLanConnectivityPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.LanConnectivityPolicy' resource.
     * @param param the request object
     */
    public getVnicLanConnectivityPolicyList(param: VnicApiGetVnicLanConnectivityPolicyListRequest, options?: Configuration): Promise<VnicLanConnectivityPolicyResponse> {
        return this.api.getVnicLanConnectivityPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.SanConnectivityPolicy' resource.
     * @param param the request object
     */
    public getVnicSanConnectivityPolicyByMoid(param: VnicApiGetVnicSanConnectivityPolicyByMoidRequest, options?: Configuration): Promise<VnicSanConnectivityPolicy> {
        return this.api.getVnicSanConnectivityPolicyByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'vnic.SanConnectivityPolicy' resource.
     * @param param the request object
     */
    public getVnicSanConnectivityPolicyList(param: VnicApiGetVnicSanConnectivityPolicyListRequest, options?: Configuration): Promise<VnicSanConnectivityPolicyResponse> {
        return this.api.getVnicSanConnectivityPolicyList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.EthAdapterPolicy' resource.
     * @param param the request object
     */
    public patchVnicEthAdapterPolicy(param: VnicApiPatchVnicEthAdapterPolicyRequest, options?: Configuration): Promise<VnicEthAdapterPolicy> {
        return this.api.patchVnicEthAdapterPolicy(param.moid, param.vnicEthAdapterPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.EthIf' resource.
     * @param param the request object
     */
    public patchVnicEthIf(param: VnicApiPatchVnicEthIfRequest, options?: Configuration): Promise<VnicEthIf> {
        return this.api.patchVnicEthIf(param.moid, param.vnicEthIf, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.EthNetworkPolicy' resource.
     * @param param the request object
     */
    public patchVnicEthNetworkPolicy(param: VnicApiPatchVnicEthNetworkPolicyRequest, options?: Configuration): Promise<VnicEthNetworkPolicy> {
        return this.api.patchVnicEthNetworkPolicy(param.moid, param.vnicEthNetworkPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.EthQosPolicy' resource.
     * @param param the request object
     */
    public patchVnicEthQosPolicy(param: VnicApiPatchVnicEthQosPolicyRequest, options?: Configuration): Promise<VnicEthQosPolicy> {
        return this.api.patchVnicEthQosPolicy(param.moid, param.vnicEthQosPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.FcAdapterPolicy' resource.
     * @param param the request object
     */
    public patchVnicFcAdapterPolicy(param: VnicApiPatchVnicFcAdapterPolicyRequest, options?: Configuration): Promise<VnicFcAdapterPolicy> {
        return this.api.patchVnicFcAdapterPolicy(param.moid, param.vnicFcAdapterPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.FcIf' resource.
     * @param param the request object
     */
    public patchVnicFcIf(param: VnicApiPatchVnicFcIfRequest, options?: Configuration): Promise<VnicFcIf> {
        return this.api.patchVnicFcIf(param.moid, param.vnicFcIf, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.FcNetworkPolicy' resource.
     * @param param the request object
     */
    public patchVnicFcNetworkPolicy(param: VnicApiPatchVnicFcNetworkPolicyRequest, options?: Configuration): Promise<VnicFcNetworkPolicy> {
        return this.api.patchVnicFcNetworkPolicy(param.moid, param.vnicFcNetworkPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.FcQosPolicy' resource.
     * @param param the request object
     */
    public patchVnicFcQosPolicy(param: VnicApiPatchVnicFcQosPolicyRequest, options?: Configuration): Promise<VnicFcQosPolicy> {
        return this.api.patchVnicFcQosPolicy(param.moid, param.vnicFcQosPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.LanConnectivityPolicy' resource.
     * @param param the request object
     */
    public patchVnicLanConnectivityPolicy(param: VnicApiPatchVnicLanConnectivityPolicyRequest, options?: Configuration): Promise<VnicLanConnectivityPolicy> {
        return this.api.patchVnicLanConnectivityPolicy(param.moid, param.vnicLanConnectivityPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.SanConnectivityPolicy' resource.
     * @param param the request object
     */
    public patchVnicSanConnectivityPolicy(param: VnicApiPatchVnicSanConnectivityPolicyRequest, options?: Configuration): Promise<VnicSanConnectivityPolicy> {
        return this.api.patchVnicSanConnectivityPolicy(param.moid, param.vnicSanConnectivityPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.EthAdapterPolicy' resource.
     * @param param the request object
     */
    public updateVnicEthAdapterPolicy(param: VnicApiUpdateVnicEthAdapterPolicyRequest, options?: Configuration): Promise<VnicEthAdapterPolicy> {
        return this.api.updateVnicEthAdapterPolicy(param.moid, param.vnicEthAdapterPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.EthIf' resource.
     * @param param the request object
     */
    public updateVnicEthIf(param: VnicApiUpdateVnicEthIfRequest, options?: Configuration): Promise<VnicEthIf> {
        return this.api.updateVnicEthIf(param.moid, param.vnicEthIf, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.EthNetworkPolicy' resource.
     * @param param the request object
     */
    public updateVnicEthNetworkPolicy(param: VnicApiUpdateVnicEthNetworkPolicyRequest, options?: Configuration): Promise<VnicEthNetworkPolicy> {
        return this.api.updateVnicEthNetworkPolicy(param.moid, param.vnicEthNetworkPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.EthQosPolicy' resource.
     * @param param the request object
     */
    public updateVnicEthQosPolicy(param: VnicApiUpdateVnicEthQosPolicyRequest, options?: Configuration): Promise<VnicEthQosPolicy> {
        return this.api.updateVnicEthQosPolicy(param.moid, param.vnicEthQosPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.FcAdapterPolicy' resource.
     * @param param the request object
     */
    public updateVnicFcAdapterPolicy(param: VnicApiUpdateVnicFcAdapterPolicyRequest, options?: Configuration): Promise<VnicFcAdapterPolicy> {
        return this.api.updateVnicFcAdapterPolicy(param.moid, param.vnicFcAdapterPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.FcIf' resource.
     * @param param the request object
     */
    public updateVnicFcIf(param: VnicApiUpdateVnicFcIfRequest, options?: Configuration): Promise<VnicFcIf> {
        return this.api.updateVnicFcIf(param.moid, param.vnicFcIf, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.FcNetworkPolicy' resource.
     * @param param the request object
     */
    public updateVnicFcNetworkPolicy(param: VnicApiUpdateVnicFcNetworkPolicyRequest, options?: Configuration): Promise<VnicFcNetworkPolicy> {
        return this.api.updateVnicFcNetworkPolicy(param.moid, param.vnicFcNetworkPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.FcQosPolicy' resource.
     * @param param the request object
     */
    public updateVnicFcQosPolicy(param: VnicApiUpdateVnicFcQosPolicyRequest, options?: Configuration): Promise<VnicFcQosPolicy> {
        return this.api.updateVnicFcQosPolicy(param.moid, param.vnicFcQosPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.LanConnectivityPolicy' resource.
     * @param param the request object
     */
    public updateVnicLanConnectivityPolicy(param: VnicApiUpdateVnicLanConnectivityPolicyRequest, options?: Configuration): Promise<VnicLanConnectivityPolicy> {
        return this.api.updateVnicLanConnectivityPolicy(param.moid, param.vnicLanConnectivityPolicy, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'vnic.SanConnectivityPolicy' resource.
     * @param param the request object
     */
    public updateVnicSanConnectivityPolicy(param: VnicApiUpdateVnicSanConnectivityPolicyRequest, options?: Configuration): Promise<VnicSanConnectivityPolicy> {
        return this.api.updateVnicSanConnectivityPolicy(param.moid, param.vnicSanConnectivityPolicy, param.ifMatch,  options).toPromise();
    }
	

}




import { ObservableWorkflowApi } from "./ObservableAPI";
import { WorkflowApiRequestFactory, WorkflowApiResponseProcessor} from "../apis/WorkflowApi";

export interface WorkflowApiCreateWorkflowBatchApiExecutorRequest {
    /**
     * The &#39;workflow.BatchApiExecutor&#39; resource to create.
     * @type WorkflowBatchApiExecutor
     * @memberof WorkflowApicreateWorkflowBatchApiExecutor
     */
    workflowBatchApiExecutor: WorkflowBatchApiExecutor
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApicreateWorkflowBatchApiExecutor
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof WorkflowApicreateWorkflowBatchApiExecutor
     */
    ifNoneMatch?: string
}

export interface WorkflowApiCreateWorkflowCustomDataTypeDefinitionRequest {
    /**
     * The &#39;workflow.CustomDataTypeDefinition&#39; resource to create.
     * @type WorkflowCustomDataTypeDefinition
     * @memberof WorkflowApicreateWorkflowCustomDataTypeDefinition
     */
    workflowCustomDataTypeDefinition: WorkflowCustomDataTypeDefinition
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApicreateWorkflowCustomDataTypeDefinition
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof WorkflowApicreateWorkflowCustomDataTypeDefinition
     */
    ifNoneMatch?: string
}

export interface WorkflowApiCreateWorkflowTaskDefinitionRequest {
    /**
     * The &#39;workflow.TaskDefinition&#39; resource to create.
     * @type WorkflowTaskDefinition
     * @memberof WorkflowApicreateWorkflowTaskDefinition
     */
    workflowTaskDefinition: WorkflowTaskDefinition
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApicreateWorkflowTaskDefinition
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof WorkflowApicreateWorkflowTaskDefinition
     */
    ifNoneMatch?: string
}

export interface WorkflowApiCreateWorkflowWorkflowDefinitionRequest {
    /**
     * The &#39;workflow.WorkflowDefinition&#39; resource to create.
     * @type WorkflowWorkflowDefinition
     * @memberof WorkflowApicreateWorkflowWorkflowDefinition
     */
    workflowWorkflowDefinition: WorkflowWorkflowDefinition
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApicreateWorkflowWorkflowDefinition
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof WorkflowApicreateWorkflowWorkflowDefinition
     */
    ifNoneMatch?: string
}

export interface WorkflowApiCreateWorkflowWorkflowInfoRequest {
    /**
     * The &#39;workflow.WorkflowInfo&#39; resource to create.
     * @type WorkflowWorkflowInfo
     * @memberof WorkflowApicreateWorkflowWorkflowInfo
     */
    workflowWorkflowInfo: WorkflowWorkflowInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApicreateWorkflowWorkflowInfo
     */
    ifMatch?: string
    /**
     * For methods that apply server-side changes, If-None-Match used with the * value can be used to create a resource not known to exist, guaranteeing that another resource creation didn&#39;t happen before, losing the data of the previous put. The request will be processed only if the eventually existing resource&#39;s ETag doesn&#39;t match any of the values listed. Otherwise, the status code 412 (Precondition Failed) is used. The asterisk is a special value representing any resource. It is only useful when creating a resource, usually with PUT, to check if another resource with the identity has already been created before. The comparison with the stored ETag uses the weak comparison algorithm, meaning two resources are considered identical if the content is equivalent - they don&#39;t have to be identical byte for byte.
     * @type string
     * @memberof WorkflowApicreateWorkflowWorkflowInfo
     */
    ifNoneMatch?: string
}

export interface WorkflowApiDeleteWorkflowBatchApiExecutorRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApideleteWorkflowBatchApiExecutor
     */
    moid: string
}

export interface WorkflowApiDeleteWorkflowCustomDataTypeDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApideleteWorkflowCustomDataTypeDefinition
     */
    moid: string
}

export interface WorkflowApiDeleteWorkflowTaskDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApideleteWorkflowTaskDefinition
     */
    moid: string
}

export interface WorkflowApiDeleteWorkflowWorkflowDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApideleteWorkflowWorkflowDefinition
     */
    moid: string
}

export interface WorkflowApiDeleteWorkflowWorkflowInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApideleteWorkflowWorkflowInfo
     */
    moid: string
}

export interface WorkflowApiGetWorkflowBatchApiExecutorByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowBatchApiExecutorByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowBatchApiExecutorListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowBatchApiExecutorList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowBuildTaskMetaByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowBuildTaskMetaListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowBuildTaskMetaOwnerByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowBuildTaskMetaOwnerListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowBuildTaskMetaOwnerList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowCatalogByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowCatalogByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowCatalogListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowCatalogList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowCustomDataTypeDefinitionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowCustomDataTypeDefinitionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowCustomDataTypeDefinitionList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowPendingDynamicWorkflowInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowPendingDynamicWorkflowInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowPendingDynamicWorkflowInfoList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowTaskDefinitionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskDefinitionByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowTaskDefinitionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskDefinitionList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowTaskInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskInfoByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowTaskInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskInfoList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowTaskMetaByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskMetaByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowTaskMetaListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowTaskMetaList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowWorkflowDefinitionByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowWorkflowDefinitionListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowDefinitionList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowWorkflowInfoByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowInfoByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowWorkflowInfoListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowInfoList
     */
    tags?: string
}

export interface WorkflowApiGetWorkflowWorkflowMetaByMoidRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowMetaByMoid
     */
    moid: string
}

export interface WorkflowApiGetWorkflowWorkflowMetaListRequest {
    /**
     * Filter criteria for the resources to return. A URI with a $filter query option identifies a subset of the entries from the Collection of Entries. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the $filter option. The expression language that is used in $filter queries supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false).
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    filter?: string
    /**
     * Determines what properties are used to sort the collection of resources.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    orderby?: string
    /**
     * Specifies the maximum number of resources to return in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    top?: number
    /**
     * Specifies the number of resources to skip in the response.
     * @type number
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    skip?: number
    /**
     * Specifies a subset of properties to return.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    select?: string
    /**
     * Specify additional attributes or related resources to return in addition to the primary resources.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    expand?: string
    /**
     * Specify one or more transformation operations to perform aggregation on the resources. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. The \&quot;$apply\&quot; query takes a sequence of set transformations, separated by forward slashes to express that they are consecutively applied, i.e. the result of each transformation is the input to the next transformation. Supported aggregation methods are \&quot;aggregate\&quot; and \&quot;groupby\&quot;. The **aggregate** transformation takes a comma-separated list of one or more aggregate expressions as parameters and returns a result set with a single instance, representing the aggregated value for all instances in the input set. The **groupby** transformation takes one or two parameters and 1. Splits the initial set into subsets where all instances in a subset have the same values for the grouping properties specified in the first parameter, 2. Applies set transformations to each subset according to the second parameter, resulting in a new set of potentially different structure and cardinality, 3. Ensures that the instances in the result set contain all grouping properties with the correct values for the group, 4. Concatenates the intermediate result sets into one result set. A groupby transformation affects the structure of the result set.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    apply?: string
    /**
     * The $count query specifies the service should return the count of the matching resources, instead of returning the resources.
     * @type boolean
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    count?: boolean
    /**
     * The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response.
     * @type &#39;allpages&#39; | &#39;none&#39;
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    inlinecount?: 'allpages' | 'none'
    /**
     * Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for resources to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    at?: string
    /**
     * The &#39;tags&#39; parameter is used to request a summary of the Tag utilization for this resource. When the &#39;tags&#39; parameter is specified, the response provides a list of tag keys, the number of times the key has been used across all documents, and the tag values that have been assigned to the tag key.
     * @type string
     * @memberof WorkflowApigetWorkflowWorkflowMetaList
     */
    tags?: string
}

export interface WorkflowApiPatchWorkflowBatchApiExecutorRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApipatchWorkflowBatchApiExecutor
     */
    moid: string
    /**
     * The &#39;workflow.BatchApiExecutor&#39; resource to update.
     * @type WorkflowBatchApiExecutor
     * @memberof WorkflowApipatchWorkflowBatchApiExecutor
     */
    workflowBatchApiExecutor: WorkflowBatchApiExecutor
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApipatchWorkflowBatchApiExecutor
     */
    ifMatch?: string
}

export interface WorkflowApiPatchWorkflowCustomDataTypeDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApipatchWorkflowCustomDataTypeDefinition
     */
    moid: string
    /**
     * The &#39;workflow.CustomDataTypeDefinition&#39; resource to update.
     * @type WorkflowCustomDataTypeDefinition
     * @memberof WorkflowApipatchWorkflowCustomDataTypeDefinition
     */
    workflowCustomDataTypeDefinition: WorkflowCustomDataTypeDefinition
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApipatchWorkflowCustomDataTypeDefinition
     */
    ifMatch?: string
}

export interface WorkflowApiPatchWorkflowTaskDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApipatchWorkflowTaskDefinition
     */
    moid: string
    /**
     * The &#39;workflow.TaskDefinition&#39; resource to update.
     * @type WorkflowTaskDefinition
     * @memberof WorkflowApipatchWorkflowTaskDefinition
     */
    workflowTaskDefinition: WorkflowTaskDefinition
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApipatchWorkflowTaskDefinition
     */
    ifMatch?: string
}

export interface WorkflowApiPatchWorkflowTaskInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApipatchWorkflowTaskInfo
     */
    moid: string
    /**
     * The &#39;workflow.TaskInfo&#39; resource to update.
     * @type WorkflowTaskInfo
     * @memberof WorkflowApipatchWorkflowTaskInfo
     */
    workflowTaskInfo: WorkflowTaskInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApipatchWorkflowTaskInfo
     */
    ifMatch?: string
}

export interface WorkflowApiPatchWorkflowWorkflowDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApipatchWorkflowWorkflowDefinition
     */
    moid: string
    /**
     * The &#39;workflow.WorkflowDefinition&#39; resource to update.
     * @type WorkflowWorkflowDefinition
     * @memberof WorkflowApipatchWorkflowWorkflowDefinition
     */
    workflowWorkflowDefinition: WorkflowWorkflowDefinition
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApipatchWorkflowWorkflowDefinition
     */
    ifMatch?: string
}

export interface WorkflowApiPatchWorkflowWorkflowInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApipatchWorkflowWorkflowInfo
     */
    moid: string
    /**
     * The &#39;workflow.WorkflowInfo&#39; resource to update.
     * @type WorkflowWorkflowInfo
     * @memberof WorkflowApipatchWorkflowWorkflowInfo
     */
    workflowWorkflowInfo: WorkflowWorkflowInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApipatchWorkflowWorkflowInfo
     */
    ifMatch?: string
}

export interface WorkflowApiUpdateWorkflowBatchApiExecutorRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApiupdateWorkflowBatchApiExecutor
     */
    moid: string
    /**
     * The &#39;workflow.BatchApiExecutor&#39; resource to update.
     * @type WorkflowBatchApiExecutor
     * @memberof WorkflowApiupdateWorkflowBatchApiExecutor
     */
    workflowBatchApiExecutor: WorkflowBatchApiExecutor
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApiupdateWorkflowBatchApiExecutor
     */
    ifMatch?: string
}

export interface WorkflowApiUpdateWorkflowCustomDataTypeDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApiupdateWorkflowCustomDataTypeDefinition
     */
    moid: string
    /**
     * The &#39;workflow.CustomDataTypeDefinition&#39; resource to update.
     * @type WorkflowCustomDataTypeDefinition
     * @memberof WorkflowApiupdateWorkflowCustomDataTypeDefinition
     */
    workflowCustomDataTypeDefinition: WorkflowCustomDataTypeDefinition
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApiupdateWorkflowCustomDataTypeDefinition
     */
    ifMatch?: string
}

export interface WorkflowApiUpdateWorkflowTaskDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApiupdateWorkflowTaskDefinition
     */
    moid: string
    /**
     * The &#39;workflow.TaskDefinition&#39; resource to update.
     * @type WorkflowTaskDefinition
     * @memberof WorkflowApiupdateWorkflowTaskDefinition
     */
    workflowTaskDefinition: WorkflowTaskDefinition
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApiupdateWorkflowTaskDefinition
     */
    ifMatch?: string
}

export interface WorkflowApiUpdateWorkflowTaskInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApiupdateWorkflowTaskInfo
     */
    moid: string
    /**
     * The &#39;workflow.TaskInfo&#39; resource to update.
     * @type WorkflowTaskInfo
     * @memberof WorkflowApiupdateWorkflowTaskInfo
     */
    workflowTaskInfo: WorkflowTaskInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApiupdateWorkflowTaskInfo
     */
    ifMatch?: string
}

export interface WorkflowApiUpdateWorkflowWorkflowDefinitionRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApiupdateWorkflowWorkflowDefinition
     */
    moid: string
    /**
     * The &#39;workflow.WorkflowDefinition&#39; resource to update.
     * @type WorkflowWorkflowDefinition
     * @memberof WorkflowApiupdateWorkflowWorkflowDefinition
     */
    workflowWorkflowDefinition: WorkflowWorkflowDefinition
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApiupdateWorkflowWorkflowDefinition
     */
    ifMatch?: string
}

export interface WorkflowApiUpdateWorkflowWorkflowInfoRequest {
    /**
     * The unique Moid identifier of a resource instance.
     * @type string
     * @memberof WorkflowApiupdateWorkflowWorkflowInfo
     */
    moid: string
    /**
     * The &#39;workflow.WorkflowInfo&#39; resource to update.
     * @type WorkflowWorkflowInfo
     * @memberof WorkflowApiupdateWorkflowWorkflowInfo
     */
    workflowWorkflowInfo: WorkflowWorkflowInfo
    /**
     * For methods that apply server-side changes, and in particular for PUT, If-Match can be used to prevent the lost update problem. It can check if the modification of a resource that the user wants to upload will not override another change that has been done since the original resource was fetched. If the request cannot be fulfilled, the 412 (Precondition Failed) response is returned. When modifying a resource using POST or PUT, the If-Match header must be set to the value of the resource ModTime property after which no lost update problem should occur. For example, a client send a GET request to obtain a resource, which includes the ModTime property. The ModTime indicates the last time the resource was created or modified. The client then sends a POST or PUT request with the If-Match header set to the ModTime property of the resource as obtained in the GET request.
     * @type string
     * @memberof WorkflowApiupdateWorkflowWorkflowInfo
     */
    ifMatch?: string
}


export class ObjectWorkflowApi {
    private api: ObservableWorkflowApi

    public constructor(configuration: Configuration, requestFactory?: WorkflowApiRequestFactory, responseProcessor?: WorkflowApiResponseProcessor) {
        this.api = new ObservableWorkflowApi(configuration, requestFactory, responseProcessor);
	}

    /**
     * Create a 'workflow.BatchApiExecutor' resource.
     * @param param the request object
     */
    public createWorkflowBatchApiExecutor(param: WorkflowApiCreateWorkflowBatchApiExecutorRequest, options?: Configuration): Promise<WorkflowBatchApiExecutor> {
        return this.api.createWorkflowBatchApiExecutor(param.workflowBatchApiExecutor, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'workflow.CustomDataTypeDefinition' resource.
     * @param param the request object
     */
    public createWorkflowCustomDataTypeDefinition(param: WorkflowApiCreateWorkflowCustomDataTypeDefinitionRequest, options?: Configuration): Promise<WorkflowCustomDataTypeDefinition> {
        return this.api.createWorkflowCustomDataTypeDefinition(param.workflowCustomDataTypeDefinition, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'workflow.TaskDefinition' resource.
     * @param param the request object
     */
    public createWorkflowTaskDefinition(param: WorkflowApiCreateWorkflowTaskDefinitionRequest, options?: Configuration): Promise<WorkflowTaskDefinition> {
        return this.api.createWorkflowTaskDefinition(param.workflowTaskDefinition, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'workflow.WorkflowDefinition' resource.
     * @param param the request object
     */
    public createWorkflowWorkflowDefinition(param: WorkflowApiCreateWorkflowWorkflowDefinitionRequest, options?: Configuration): Promise<WorkflowWorkflowDefinition> {
        return this.api.createWorkflowWorkflowDefinition(param.workflowWorkflowDefinition, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Create a 'workflow.WorkflowInfo' resource.
     * @param param the request object
     */
    public createWorkflowWorkflowInfo(param: WorkflowApiCreateWorkflowWorkflowInfoRequest, options?: Configuration): Promise<WorkflowWorkflowInfo> {
        return this.api.createWorkflowWorkflowInfo(param.workflowWorkflowInfo, param.ifMatch, param.ifNoneMatch,  options).toPromise();
    }
	
    /**
     * Delete a 'workflow.BatchApiExecutor' resource.
     * @param param the request object
     */
    public deleteWorkflowBatchApiExecutor(param: WorkflowApiDeleteWorkflowBatchApiExecutorRequest, options?: Configuration): Promise<void> {
        return this.api.deleteWorkflowBatchApiExecutor(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'workflow.CustomDataTypeDefinition' resource.
     * @param param the request object
     */
    public deleteWorkflowCustomDataTypeDefinition(param: WorkflowApiDeleteWorkflowCustomDataTypeDefinitionRequest, options?: Configuration): Promise<void> {
        return this.api.deleteWorkflowCustomDataTypeDefinition(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'workflow.TaskDefinition' resource.
     * @param param the request object
     */
    public deleteWorkflowTaskDefinition(param: WorkflowApiDeleteWorkflowTaskDefinitionRequest, options?: Configuration): Promise<void> {
        return this.api.deleteWorkflowTaskDefinition(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'workflow.WorkflowDefinition' resource.
     * @param param the request object
     */
    public deleteWorkflowWorkflowDefinition(param: WorkflowApiDeleteWorkflowWorkflowDefinitionRequest, options?: Configuration): Promise<void> {
        return this.api.deleteWorkflowWorkflowDefinition(param.moid,  options).toPromise();
    }
	
    /**
     * Delete a 'workflow.WorkflowInfo' resource.
     * @param param the request object
     */
    public deleteWorkflowWorkflowInfo(param: WorkflowApiDeleteWorkflowWorkflowInfoRequest, options?: Configuration): Promise<void> {
        return this.api.deleteWorkflowWorkflowInfo(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.BatchApiExecutor' resource.
     * @param param the request object
     */
    public getWorkflowBatchApiExecutorByMoid(param: WorkflowApiGetWorkflowBatchApiExecutorByMoidRequest, options?: Configuration): Promise<WorkflowBatchApiExecutor> {
        return this.api.getWorkflowBatchApiExecutorByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.BatchApiExecutor' resource.
     * @param param the request object
     */
    public getWorkflowBatchApiExecutorList(param: WorkflowApiGetWorkflowBatchApiExecutorListRequest, options?: Configuration): Promise<WorkflowBatchApiExecutorResponse> {
        return this.api.getWorkflowBatchApiExecutorList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.BuildTaskMeta' resource.
     * @param param the request object
     */
    public getWorkflowBuildTaskMetaByMoid(param: WorkflowApiGetWorkflowBuildTaskMetaByMoidRequest, options?: Configuration): Promise<WorkflowBuildTaskMeta> {
        return this.api.getWorkflowBuildTaskMetaByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.BuildTaskMeta' resource.
     * @param param the request object
     */
    public getWorkflowBuildTaskMetaList(param: WorkflowApiGetWorkflowBuildTaskMetaListRequest, options?: Configuration): Promise<WorkflowBuildTaskMetaResponse> {
        return this.api.getWorkflowBuildTaskMetaList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.BuildTaskMetaOwner' resource.
     * @param param the request object
     */
    public getWorkflowBuildTaskMetaOwnerByMoid(param: WorkflowApiGetWorkflowBuildTaskMetaOwnerByMoidRequest, options?: Configuration): Promise<WorkflowBuildTaskMetaOwner> {
        return this.api.getWorkflowBuildTaskMetaOwnerByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.BuildTaskMetaOwner' resource.
     * @param param the request object
     */
    public getWorkflowBuildTaskMetaOwnerList(param: WorkflowApiGetWorkflowBuildTaskMetaOwnerListRequest, options?: Configuration): Promise<WorkflowBuildTaskMetaOwnerResponse> {
        return this.api.getWorkflowBuildTaskMetaOwnerList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.Catalog' resource.
     * @param param the request object
     */
    public getWorkflowCatalogByMoid(param: WorkflowApiGetWorkflowCatalogByMoidRequest, options?: Configuration): Promise<WorkflowCatalog> {
        return this.api.getWorkflowCatalogByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.Catalog' resource.
     * @param param the request object
     */
    public getWorkflowCatalogList(param: WorkflowApiGetWorkflowCatalogListRequest, options?: Configuration): Promise<WorkflowCatalogResponse> {
        return this.api.getWorkflowCatalogList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.CustomDataTypeDefinition' resource.
     * @param param the request object
     */
    public getWorkflowCustomDataTypeDefinitionByMoid(param: WorkflowApiGetWorkflowCustomDataTypeDefinitionByMoidRequest, options?: Configuration): Promise<WorkflowCustomDataTypeDefinition> {
        return this.api.getWorkflowCustomDataTypeDefinitionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.CustomDataTypeDefinition' resource.
     * @param param the request object
     */
    public getWorkflowCustomDataTypeDefinitionList(param: WorkflowApiGetWorkflowCustomDataTypeDefinitionListRequest, options?: Configuration): Promise<WorkflowCustomDataTypeDefinitionResponse> {
        return this.api.getWorkflowCustomDataTypeDefinitionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.PendingDynamicWorkflowInfo' resource.
     * @param param the request object
     */
    public getWorkflowPendingDynamicWorkflowInfoByMoid(param: WorkflowApiGetWorkflowPendingDynamicWorkflowInfoByMoidRequest, options?: Configuration): Promise<WorkflowPendingDynamicWorkflowInfo> {
        return this.api.getWorkflowPendingDynamicWorkflowInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.PendingDynamicWorkflowInfo' resource.
     * @param param the request object
     */
    public getWorkflowPendingDynamicWorkflowInfoList(param: WorkflowApiGetWorkflowPendingDynamicWorkflowInfoListRequest, options?: Configuration): Promise<WorkflowPendingDynamicWorkflowInfoResponse> {
        return this.api.getWorkflowPendingDynamicWorkflowInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.TaskDefinition' resource.
     * @param param the request object
     */
    public getWorkflowTaskDefinitionByMoid(param: WorkflowApiGetWorkflowTaskDefinitionByMoidRequest, options?: Configuration): Promise<WorkflowTaskDefinition> {
        return this.api.getWorkflowTaskDefinitionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.TaskDefinition' resource.
     * @param param the request object
     */
    public getWorkflowTaskDefinitionList(param: WorkflowApiGetWorkflowTaskDefinitionListRequest, options?: Configuration): Promise<WorkflowTaskDefinitionResponse> {
        return this.api.getWorkflowTaskDefinitionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.TaskInfo' resource.
     * @param param the request object
     */
    public getWorkflowTaskInfoByMoid(param: WorkflowApiGetWorkflowTaskInfoByMoidRequest, options?: Configuration): Promise<WorkflowTaskInfo> {
        return this.api.getWorkflowTaskInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.TaskInfo' resource.
     * @param param the request object
     */
    public getWorkflowTaskInfoList(param: WorkflowApiGetWorkflowTaskInfoListRequest, options?: Configuration): Promise<WorkflowTaskInfoResponse> {
        return this.api.getWorkflowTaskInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.TaskMeta' resource.
     * @param param the request object
     */
    public getWorkflowTaskMetaByMoid(param: WorkflowApiGetWorkflowTaskMetaByMoidRequest, options?: Configuration): Promise<WorkflowTaskMeta> {
        return this.api.getWorkflowTaskMetaByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.TaskMeta' resource.
     * @param param the request object
     */
    public getWorkflowTaskMetaList(param: WorkflowApiGetWorkflowTaskMetaListRequest, options?: Configuration): Promise<WorkflowTaskMetaResponse> {
        return this.api.getWorkflowTaskMetaList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.WorkflowDefinition' resource.
     * @param param the request object
     */
    public getWorkflowWorkflowDefinitionByMoid(param: WorkflowApiGetWorkflowWorkflowDefinitionByMoidRequest, options?: Configuration): Promise<WorkflowWorkflowDefinition> {
        return this.api.getWorkflowWorkflowDefinitionByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.WorkflowDefinition' resource.
     * @param param the request object
     */
    public getWorkflowWorkflowDefinitionList(param: WorkflowApiGetWorkflowWorkflowDefinitionListRequest, options?: Configuration): Promise<WorkflowWorkflowDefinitionResponse> {
        return this.api.getWorkflowWorkflowDefinitionList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.WorkflowInfo' resource.
     * @param param the request object
     */
    public getWorkflowWorkflowInfoByMoid(param: WorkflowApiGetWorkflowWorkflowInfoByMoidRequest, options?: Configuration): Promise<WorkflowWorkflowInfo> {
        return this.api.getWorkflowWorkflowInfoByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.WorkflowInfo' resource.
     * @param param the request object
     */
    public getWorkflowWorkflowInfoList(param: WorkflowApiGetWorkflowWorkflowInfoListRequest, options?: Configuration): Promise<WorkflowWorkflowInfoResponse> {
        return this.api.getWorkflowWorkflowInfoList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.WorkflowMeta' resource.
     * @param param the request object
     */
    public getWorkflowWorkflowMetaByMoid(param: WorkflowApiGetWorkflowWorkflowMetaByMoidRequest, options?: Configuration): Promise<WorkflowWorkflowMeta> {
        return this.api.getWorkflowWorkflowMetaByMoid(param.moid,  options).toPromise();
    }
	
    /**
     * Read a 'workflow.WorkflowMeta' resource.
     * @param param the request object
     */
    public getWorkflowWorkflowMetaList(param: WorkflowApiGetWorkflowWorkflowMetaListRequest, options?: Configuration): Promise<WorkflowWorkflowMetaResponse> {
        return this.api.getWorkflowWorkflowMetaList(param.filter, param.orderby, param.top, param.skip, param.select, param.expand, param.apply, param.count, param.inlinecount, param.at, param.tags,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.BatchApiExecutor' resource.
     * @param param the request object
     */
    public patchWorkflowBatchApiExecutor(param: WorkflowApiPatchWorkflowBatchApiExecutorRequest, options?: Configuration): Promise<WorkflowBatchApiExecutor> {
        return this.api.patchWorkflowBatchApiExecutor(param.moid, param.workflowBatchApiExecutor, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.CustomDataTypeDefinition' resource.
     * @param param the request object
     */
    public patchWorkflowCustomDataTypeDefinition(param: WorkflowApiPatchWorkflowCustomDataTypeDefinitionRequest, options?: Configuration): Promise<WorkflowCustomDataTypeDefinition> {
        return this.api.patchWorkflowCustomDataTypeDefinition(param.moid, param.workflowCustomDataTypeDefinition, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.TaskDefinition' resource.
     * @param param the request object
     */
    public patchWorkflowTaskDefinition(param: WorkflowApiPatchWorkflowTaskDefinitionRequest, options?: Configuration): Promise<WorkflowTaskDefinition> {
        return this.api.patchWorkflowTaskDefinition(param.moid, param.workflowTaskDefinition, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.TaskInfo' resource.
     * @param param the request object
     */
    public patchWorkflowTaskInfo(param: WorkflowApiPatchWorkflowTaskInfoRequest, options?: Configuration): Promise<WorkflowTaskInfo> {
        return this.api.patchWorkflowTaskInfo(param.moid, param.workflowTaskInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.WorkflowDefinition' resource.
     * @param param the request object
     */
    public patchWorkflowWorkflowDefinition(param: WorkflowApiPatchWorkflowWorkflowDefinitionRequest, options?: Configuration): Promise<WorkflowWorkflowDefinition> {
        return this.api.patchWorkflowWorkflowDefinition(param.moid, param.workflowWorkflowDefinition, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.WorkflowInfo' resource.
     * @param param the request object
     */
    public patchWorkflowWorkflowInfo(param: WorkflowApiPatchWorkflowWorkflowInfoRequest, options?: Configuration): Promise<WorkflowWorkflowInfo> {
        return this.api.patchWorkflowWorkflowInfo(param.moid, param.workflowWorkflowInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.BatchApiExecutor' resource.
     * @param param the request object
     */
    public updateWorkflowBatchApiExecutor(param: WorkflowApiUpdateWorkflowBatchApiExecutorRequest, options?: Configuration): Promise<WorkflowBatchApiExecutor> {
        return this.api.updateWorkflowBatchApiExecutor(param.moid, param.workflowBatchApiExecutor, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.CustomDataTypeDefinition' resource.
     * @param param the request object
     */
    public updateWorkflowCustomDataTypeDefinition(param: WorkflowApiUpdateWorkflowCustomDataTypeDefinitionRequest, options?: Configuration): Promise<WorkflowCustomDataTypeDefinition> {
        return this.api.updateWorkflowCustomDataTypeDefinition(param.moid, param.workflowCustomDataTypeDefinition, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.TaskDefinition' resource.
     * @param param the request object
     */
    public updateWorkflowTaskDefinition(param: WorkflowApiUpdateWorkflowTaskDefinitionRequest, options?: Configuration): Promise<WorkflowTaskDefinition> {
        return this.api.updateWorkflowTaskDefinition(param.moid, param.workflowTaskDefinition, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.TaskInfo' resource.
     * @param param the request object
     */
    public updateWorkflowTaskInfo(param: WorkflowApiUpdateWorkflowTaskInfoRequest, options?: Configuration): Promise<WorkflowTaskInfo> {
        return this.api.updateWorkflowTaskInfo(param.moid, param.workflowTaskInfo, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.WorkflowDefinition' resource.
     * @param param the request object
     */
    public updateWorkflowWorkflowDefinition(param: WorkflowApiUpdateWorkflowWorkflowDefinitionRequest, options?: Configuration): Promise<WorkflowWorkflowDefinition> {
        return this.api.updateWorkflowWorkflowDefinition(param.moid, param.workflowWorkflowDefinition, param.ifMatch,  options).toPromise();
    }
	
    /**
     * Update a 'workflow.WorkflowInfo' resource.
     * @param param the request object
     */
    public updateWorkflowWorkflowInfo(param: WorkflowApiUpdateWorkflowWorkflowInfoRequest, options?: Configuration): Promise<WorkflowWorkflowInfo> {
        return this.api.updateWorkflowWorkflowInfo(param.moid, param.workflowWorkflowInfo, param.ifMatch,  options).toPromise();
    }
	

}



