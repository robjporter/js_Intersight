/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { IamAccountRelationship } from './IamAccountRelationship';
import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { NetworkconfigPolicyAllOf } from './NetworkconfigPolicyAllOf';
import { OrganizationOrganizationRelationship } from './OrganizationOrganizationRelationship';
import { PolicyAbstractConfigProfileRelationship } from './PolicyAbstractConfigProfileRelationship';
import { PolicyAbstractPolicy } from './PolicyAbstractPolicy';
import { HttpFile } from '../http/http';

/**
* Enable or disable Dynamic DNS, add or update DNS settings for IPv4 and IPv6 on Cisco IMC.
*/
export class NetworkconfigPolicy extends PolicyAbstractPolicy {
    /**
    * IP address of the secondary DNS server.
    */
    'alternateIpv4dnsServer'?: string;
    /**
    * IP address of the secondary DNS server.
    */
    'alternateIpv6dnsServer'?: string;
    /**
    * The domain name appended to a hostname for a Dynamic DNS (DDNS) update. If left blank, only a hostname is sent to the DDNS update request.
    */
    'dynamicDnsDomain'?: string;
    /**
    * If enabled, updates the resource records to the DNS from Cisco IMC.
    */
    'enableDynamicDns'?: boolean;
    /**
    * If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv4 in Cisco IMC to enable it.
    */
    'enableIpv4dnsFromDhcp'?: boolean;
    /**
    * If enabled, allows to configure IPv6 properties.
    */
    'enableIpv6'?: boolean;
    /**
    * If enabled, Cisco IMC retrieves the DNS server addresses from DHCP. Use DHCP field must be enabled for IPv6 in Cisco IMC to enable it.
    */
    'enableIpv6dnsFromDhcp'?: boolean;
    /**
    * IP address of the primary DNS server.
    */
    'preferredIpv4dnsServer'?: string;
    /**
    * IP address of the primary DNS server.
    */
    'preferredIpv6dnsServer'?: string;
    'applianceAccount'?: IamAccountRelationship;
    'organization'?: OrganizationOrganizationRelationship;
    /**
    * An array of relationships to policyAbstractConfigProfile resources.
    */
    'profiles'?: Array<PolicyAbstractConfigProfileRelationship>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "alternateIpv4dnsServer",
            "baseName": "AlternateIpv4dnsServer",
            "type": "string",
            "format": ""
        },
        {
            "name": "alternateIpv6dnsServer",
            "baseName": "AlternateIpv6dnsServer",
            "type": "string",
            "format": ""
        },
        {
            "name": "dynamicDnsDomain",
            "baseName": "DynamicDnsDomain",
            "type": "string",
            "format": ""
        },
        {
            "name": "enableDynamicDns",
            "baseName": "EnableDynamicDns",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "enableIpv4dnsFromDhcp",
            "baseName": "EnableIpv4dnsFromDhcp",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "enableIpv6",
            "baseName": "EnableIpv6",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "enableIpv6dnsFromDhcp",
            "baseName": "EnableIpv6dnsFromDhcp",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "preferredIpv4dnsServer",
            "baseName": "PreferredIpv4dnsServer",
            "type": "string",
            "format": ""
        },
        {
            "name": "preferredIpv6dnsServer",
            "baseName": "PreferredIpv6dnsServer",
            "type": "string",
            "format": ""
        },
        {
            "name": "applianceAccount",
            "baseName": "ApplianceAccount",
            "type": "IamAccountRelationship",
            "format": ""
        },
        {
            "name": "organization",
            "baseName": "Organization",
            "type": "OrganizationOrganizationRelationship",
            "format": ""
        },
        {
            "name": "profiles",
            "baseName": "Profiles",
            "type": "Array<PolicyAbstractConfigProfileRelationship>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(NetworkconfigPolicy.attributeTypeMap);
    }
    
    public constructor() {
        super();
    }
}

