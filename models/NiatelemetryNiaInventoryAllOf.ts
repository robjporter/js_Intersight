/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AssetDeviceRegistrationRelationship } from './AssetDeviceRegistrationRelationship';
import { NiatelemetryDiskinfo } from './NiatelemetryDiskinfo';
import { NiatelemetryNiaLicenseStateRelationship } from './NiatelemetryNiaLicenseStateRelationship';
import { HttpFile } from '../http/http';

/**
* Definition of the list of properties defined in 'niatelemetry.NiaInventory', excluding properties defined in parent classes.
*/
export class NiatelemetryNiaInventoryAllOf {
    /**
    * CPU usage of device being inventoried. This determines the percentage of CPU resources used.
    */
    'cpu'?: number;
    /**
    * Last crash reset reason of device being inventoried. This determines the last reason for a device's restart due to crash of the system.
    */
    'crashResetLogs'?: string;
    /**
    * Name of device being inventoried. The name the user assigns to the device is inventoried here.
    */
    'deviceName'?: string;
    /**
    * Type of device being inventoried. This determines whether the device is a controller, leaf or spine.
    */
    'deviceType'?: string;
    'disk'?: NiatelemetryDiskinfo;
    /**
    * Last log in time device being inventoried. This determines the last login time on the device.
    */
    'logInTime'?: string;
    /**
    * Last log out time of device being inventoried. This determines the last logout time on the device.
    */
    'logOutTime'?: string;
    /**
    * Memory usage of device being inventoried. This determines the percentage of memory resources used.
    */
    'memory'?: number;
    /**
    * Type of record DCNM / APIC / SE. This determines the type of platform where inventory was collected.
    */
    'recordType'?: string;
    /**
    * Version of record being pushed. This determines what was the API version for data available from the device.
    */
    'recordVersion'?: string;
    /**
    * Serial number of device being invetoried. The serial number is unique per device and will be used as the key.
    */
    'serial'?: string;
    /**
    * Last software downloaded of device being inventoried. This determines if software download API was used.
    */
    'softwareDownload'?: string;
    /**
    * Software version of device being inventoried. The various software version values for each device are available on cisco.com.
    */
    'version'?: string;
    'licenseState'?: NiatelemetryNiaLicenseStateRelationship;
    'registeredDevice'?: AssetDeviceRegistrationRelationship;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "cpu",
            "baseName": "Cpu",
            "type": "number",
            "format": "float"
        },
        {
            "name": "crashResetLogs",
            "baseName": "CrashResetLogs",
            "type": "string",
            "format": ""
        },
        {
            "name": "deviceName",
            "baseName": "DeviceName",
            "type": "string",
            "format": ""
        },
        {
            "name": "deviceType",
            "baseName": "DeviceType",
            "type": "string",
            "format": ""
        },
        {
            "name": "disk",
            "baseName": "Disk",
            "type": "NiatelemetryDiskinfo",
            "format": ""
        },
        {
            "name": "logInTime",
            "baseName": "LogInTime",
            "type": "string",
            "format": ""
        },
        {
            "name": "logOutTime",
            "baseName": "LogOutTime",
            "type": "string",
            "format": ""
        },
        {
            "name": "memory",
            "baseName": "Memory",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "recordType",
            "baseName": "RecordType",
            "type": "string",
            "format": ""
        },
        {
            "name": "recordVersion",
            "baseName": "RecordVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "serial",
            "baseName": "Serial",
            "type": "string",
            "format": ""
        },
        {
            "name": "softwareDownload",
            "baseName": "SoftwareDownload",
            "type": "string",
            "format": ""
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "string",
            "format": ""
        },
        {
            "name": "licenseState",
            "baseName": "LicenseState",
            "type": "NiatelemetryNiaLicenseStateRelationship",
            "format": ""
        },
        {
            "name": "registeredDevice",
            "baseName": "RegisteredDevice",
            "type": "AssetDeviceRegistrationRelationship",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return NiatelemetryNiaInventoryAllOf.attributeTypeMap;
    }
    
    public constructor() {
    }
}

