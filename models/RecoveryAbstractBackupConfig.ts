/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { PolicyAbstractPolicy } from './PolicyAbstractPolicy';
import { RecoveryAbstractBackupConfigAllOf } from './RecoveryAbstractBackupConfigAllOf';
import { HttpFile } from '../http/http';

/**
* Base Backup config which contains all the required inputs to do backup on a local or remote server.
*/
export class RecoveryAbstractBackupConfig extends PolicyAbstractPolicy {
    /**
    * The file name for the backup image. This name is added as a prefix in the name for the backup image. A unique file name for the backup image is created along with a timestamp. For example: prefix-1572431305418.
    */
    'fileNamePrefix'?: string;
    /**
    * Indicates whether the value of the 'password' property has been set.
    */
    'isPasswordSet'?: boolean;
    /**
    * Specifies whether the backup will be stored locally or remotely.
    */
    'locationType'?: RecoveryAbstractBackupConfigLocationTypeEnum;
    /**
    * Backup server password.
    */
    'password'?: string;
    /**
    * The file system path where the backup images must be stored. Include the IP address/hostname of the network share location and the complete file system path. For example: 172.29.109.234/var/backups/.
    */
    'path'?: string;
    /**
    * Protocol for transferring the backup image to the network share location.
    */
    'protocol'?: RecoveryAbstractBackupConfigProtocolEnum;
    /**
    * Number of backup copies maintained on the local or remote server. When the created backup files exceed this number, the initial backup files are overwritten in a sequential manner.
    */
    'retentionCount'?: number;
    /**
    * Backup server user name.
    */
    'userName'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "fileNamePrefix",
            "baseName": "FileNamePrefix",
            "type": "string",
            "format": ""
        },
        {
            "name": "isPasswordSet",
            "baseName": "IsPasswordSet",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "locationType",
            "baseName": "LocationType",
            "type": "RecoveryAbstractBackupConfigLocationTypeEnum",
            "format": ""
        },
        {
            "name": "password",
            "baseName": "Password",
            "type": "string",
            "format": ""
        },
        {
            "name": "path",
            "baseName": "Path",
            "type": "string",
            "format": ""
        },
        {
            "name": "protocol",
            "baseName": "Protocol",
            "type": "RecoveryAbstractBackupConfigProtocolEnum",
            "format": ""
        },
        {
            "name": "retentionCount",
            "baseName": "RetentionCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "userName",
            "baseName": "UserName",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(RecoveryAbstractBackupConfig.attributeTypeMap);
    }
    
    public constructor() {
        super();
    }
}


export type RecoveryAbstractBackupConfigLocationTypeEnum = "Network Share" | "Local Storage" ;
export type RecoveryAbstractBackupConfigProtocolEnum = "SCP" | "SFTP" | "FTP" ;

