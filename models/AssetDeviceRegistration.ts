/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AssetClusterMemberRelationship } from './AssetClusterMemberRelationship';
import { AssetDeviceClaimRelationship } from './AssetDeviceClaimRelationship';
import { AssetDeviceConfigurationRelationship } from './AssetDeviceConfigurationRelationship';
import { AssetDeviceConnection } from './AssetDeviceConnection';
import { AssetDeviceRegistrationAllOf } from './AssetDeviceRegistrationAllOf';
import { AssetDeviceRegistrationRelationship } from './AssetDeviceRegistrationRelationship';
import { AssetParentConnectionSignature } from './AssetParentConnectionSignature';
import { IamAccountRelationship } from './IamAccountRelationship';
import { IamDomainGroupRelationship } from './IamDomainGroupRelationship';
import { IamUserRelationship } from './IamUserRelationship';
import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { HttpFile } from '../http/http';

/**
* DeviceRegistration represents a device connector enabled endpoint which has registered with Intersight.
*/
export class AssetDeviceRegistration extends AssetDeviceConnection {
    /**
    * An identifier for the credential used by the device connector to authenticate with the Intersight web socket gateway.
    */
    'accessKeyId'?: string;
    /**
    * The name of the user who claimed the device for the account.
    */
    'claimedByUserName'?: string;
    /**
    * The date and time at which the device was claimed to this account.
    */
    'claimedTime'?: Date;
    'deviceHostname'?: Array<string>;
    'deviceIpAddress'?: Array<string>;
    /**
    * Indicates if the platform is an actual device or an emulated device for testing, demos, etc. Permitted values are [Normal, Emulator, ContainerEmulator].
    */
    'executionMode'?: AssetDeviceRegistrationExecutionModeEnum;
    'parentSignature'?: AssetParentConnectionSignature;
    'pid'?: Array<string>;
    /**
    * The platform type on which device connector is executing.
    */
    'platformType'?: AssetDeviceRegistrationPlatformTypeEnum;
    /**
    * The device connector's public key used by Intersight to authenticate a connection from the device connector. The public key is used to verify that the signature a device connector sends on connect has been signed by the connector's private key stored on the device's filesystem. Must be a PEM encoded RSA public key string.
    */
    'publicAccessKey'?: string;
    /**
    * Flag reported by devices to indicate an administrator of the device has disabled management operations of the device connector and only monitoring is permitted.
    */
    'readOnly'?: boolean;
    'serial'?: Array<string>;
    /**
    * The vendor of the managed device.
    */
    'vendor'?: string;
    'account'?: IamAccountRelationship;
    'claimedByUser'?: IamUserRelationship;
    /**
    * An array of relationships to assetClusterMember resources.
    */
    'clusterMembers'?: Array<AssetClusterMemberRelationship>;
    'deviceClaim'?: AssetDeviceClaimRelationship;
    'deviceConfiguration'?: AssetDeviceConfigurationRelationship;
    'domainGroup'?: IamDomainGroupRelationship;
    'parentConnection'?: AssetDeviceRegistrationRelationship;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accessKeyId",
            "baseName": "AccessKeyId",
            "type": "string",
            "format": ""
        },
        {
            "name": "claimedByUserName",
            "baseName": "ClaimedByUserName",
            "type": "string",
            "format": ""
        },
        {
            "name": "claimedTime",
            "baseName": "ClaimedTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "deviceHostname",
            "baseName": "DeviceHostname",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "deviceIpAddress",
            "baseName": "DeviceIpAddress",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "executionMode",
            "baseName": "ExecutionMode",
            "type": "AssetDeviceRegistrationExecutionModeEnum",
            "format": ""
        },
        {
            "name": "parentSignature",
            "baseName": "ParentSignature",
            "type": "AssetParentConnectionSignature",
            "format": ""
        },
        {
            "name": "pid",
            "baseName": "Pid",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "platformType",
            "baseName": "PlatformType",
            "type": "AssetDeviceRegistrationPlatformTypeEnum",
            "format": ""
        },
        {
            "name": "publicAccessKey",
            "baseName": "PublicAccessKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "readOnly",
            "baseName": "ReadOnly",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "serial",
            "baseName": "Serial",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "vendor",
            "baseName": "Vendor",
            "type": "string",
            "format": ""
        },
        {
            "name": "account",
            "baseName": "Account",
            "type": "IamAccountRelationship",
            "format": ""
        },
        {
            "name": "claimedByUser",
            "baseName": "ClaimedByUser",
            "type": "IamUserRelationship",
            "format": ""
        },
        {
            "name": "clusterMembers",
            "baseName": "ClusterMembers",
            "type": "Array<AssetClusterMemberRelationship>",
            "format": ""
        },
        {
            "name": "deviceClaim",
            "baseName": "DeviceClaim",
            "type": "AssetDeviceClaimRelationship",
            "format": ""
        },
        {
            "name": "deviceConfiguration",
            "baseName": "DeviceConfiguration",
            "type": "AssetDeviceConfigurationRelationship",
            "format": ""
        },
        {
            "name": "domainGroup",
            "baseName": "DomainGroup",
            "type": "IamDomainGroupRelationship",
            "format": ""
        },
        {
            "name": "parentConnection",
            "baseName": "ParentConnection",
            "type": "AssetDeviceRegistrationRelationship",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(AssetDeviceRegistration.attributeTypeMap);
    }
    
    public constructor() {
        super();
    }
}


export type AssetDeviceRegistrationExecutionModeEnum = "" | "Normal" | "Emulator" | "ContainerEmulator" ;
export type AssetDeviceRegistrationPlatformTypeEnum = "" | "APIC" | "DCNM" | "UCSFI" | "UCSFIISM" | "IMC" | "IMCM4" | "IMCM5" | "UCSIOM" | "HX" | "HyperFlexAP" | "UCSD" | "IntersightAppliance" | "PureStorageFlashArray" | "NetAppOntap" | "EmcScaleIo" | "EmcVmax" | "EmcVplex" | "EmcXtremIo" | "VmwareVcenter" | "MicrosoftHyperV" | "AppDynamics" | "Dynatrace" | "MicrosoftSqlServer" | "Kubernetes" | "MicrosoftAzure" | "ServiceEngine" | "IMCBlade" ;

