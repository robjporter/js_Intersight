/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { VirtualizationRemoteDisplayInfo } from './VirtualizationRemoteDisplayInfo';
import { VirtualizationVmCpuShareInfo } from './VirtualizationVmCpuShareInfo';
import { VirtualizationVmCpuSocketInfo } from './VirtualizationVmCpuSocketInfo';
import { VirtualizationVmDiskCommitInfo } from './VirtualizationVmDiskCommitInfo';
import { VirtualizationVmMemoryShareInfo } from './VirtualizationVmMemoryShareInfo';
import { VirtualizationVmwareClusterRelationship } from './VirtualizationVmwareClusterRelationship';
import { VirtualizationVmwareDatacenterRelationship } from './VirtualizationVmwareDatacenterRelationship';
import { VirtualizationVmwareDatastoreRelationship } from './VirtualizationVmwareDatastoreRelationship';
import { VirtualizationVmwareHostRelationship } from './VirtualizationVmwareHostRelationship';
import { HttpFile } from '../http/http';

/**
* Definition of the list of properties defined in 'virtualization.VmwareVirtualMachine', excluding properties defined in parent classes.
*/
export class VirtualizationVmwareVirtualMachineAllOf {
    /**
    * List of annotations provided to this VM by user. Can be long.
    */
    'annotation'?: string;
    /**
    * Time when this VM booted up.
    */
    'bootTime'?: Date;
    /**
    * The configuration name for this VM. This maybe the same as the guest hostname.
    */
    'configName'?: string;
    /**
    * Shows if virtual machine is connected to vCenter. Values are Connected, Disconnected, Orphaned, Inaccessible, and Invalid.
    */
    'connectionState'?: string;
    /**
    * Indicates if the capability to add CPUs to a running VM is enabled.
    */
    'cpuHotAddEnabled'?: boolean;
    'cpuShares'?: VirtualizationVmCpuShareInfo;
    'cpuSocketInfo'?: VirtualizationVmCpuSocketInfo;
    'customAttributes'?: Array<string>;
    /**
    * Indicates how the VM will be powered off (soft, hard etc.).
    */
    'defaultPowerOffType'?: string;
    /**
    * Shows if DHCP is used for IP/DNS on this VM.
    */
    'dhcpEnabled'?: boolean;
    'diskCommitInfo'?: VirtualizationVmDiskCommitInfo;
    'dnsServerList'?: Array<string>;
    'dnsSuffixList'?: Array<string>;
    /**
    * The folder name associated with this VM.
    */
    'folder'?: string;
    /**
    * The state of the guest OS running on this VM. Could be running, not running etc.
    */
    'guestState'?: VirtualizationVmwareVirtualMachineAllOfGuestStateEnum;
    /**
    * UUID assigned by vCenter to every VM.
    */
    'instanceUuid'?: string;
    /**
    * If true, indicates that the entity refers to a template of a virtual machine and not a real virtual machine.
    */
    'isTemplate'?: boolean;
    'macAddress'?: Array<string>;
    'memShares'?: VirtualizationVmMemoryShareInfo;
    /**
    * Adding memory to a running VM.
    */
    'memoryHotAddEnabled'?: boolean;
    /**
    * Indicates how many networks are used by this VM.
    */
    'networkCount'?: number;
    'portGroups'?: Array<string>;
    /**
    * Shows if this is a protected VM. VMs can be in protection groups.
    */
    'protectedVm'?: boolean;
    'remoteDisplayInfo'?: VirtualizationRemoteDisplayInfo;
    /**
    * Shows if support for a remote VNC access is enabled.
    */
    'remoteDisplayVncEnabled'?: boolean;
    /**
    * Name of the resource pool to which this VM belongs (optional).
    */
    'resourcePool'?: string;
    /**
    * Who owns the resource pool.
    */
    'resourcePoolOwner'?: string;
    /**
    * The parent of the current resource pool to which this VM belongs.
    */
    'resourcePoolParent'?: string;
    /**
    * Indicates if guest tools are running on this VM. Could be set to guestToolNotRunning or guestToolsRunning.
    */
    'toolRunningStatus'?: string;
    /**
    * The version of the guest tools, usually not specified.
    */
    'toolsVersion'?: string;
    /**
    * Shows the number of disks assigned to this VM.
    */
    'vmDiskCount'?: number;
    /**
    * The operational state of the VM. Could be Available, Provisioned, Maintenance mode, Deleting, etc.
    */
    'vmOverallStatus'?: string;
    /**
    * Example - [datastore3] VCSA-134/VCSA-134.vmx.
    */
    'vmPath'?: string;
    /**
    * Information about the version of this VM (vmx-09, vmx-11 etc.).
    */
    'vmVersion'?: string;
    /**
    * How many vnics are present.
    */
    'vmVnicCount'?: number;
    /**
    * Information related to the guest info's VNIC virtual device. It is a comma-separated list.
    */
    'vnicDeviceConfigId'?: string;
    'cluster'?: VirtualizationVmwareClusterRelationship;
    'datacenter'?: VirtualizationVmwareDatacenterRelationship;
    /**
    * An array of relationships to virtualizationVmwareDatastore resources.
    */
    'datastores'?: Array<VirtualizationVmwareDatastoreRelationship>;
    'host'?: VirtualizationVmwareHostRelationship;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "annotation",
            "baseName": "Annotation",
            "type": "string",
            "format": ""
        },
        {
            "name": "bootTime",
            "baseName": "BootTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "configName",
            "baseName": "ConfigName",
            "type": "string",
            "format": ""
        },
        {
            "name": "connectionState",
            "baseName": "ConnectionState",
            "type": "string",
            "format": ""
        },
        {
            "name": "cpuHotAddEnabled",
            "baseName": "CpuHotAddEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "cpuShares",
            "baseName": "CpuShares",
            "type": "VirtualizationVmCpuShareInfo",
            "format": ""
        },
        {
            "name": "cpuSocketInfo",
            "baseName": "CpuSocketInfo",
            "type": "VirtualizationVmCpuSocketInfo",
            "format": ""
        },
        {
            "name": "customAttributes",
            "baseName": "CustomAttributes",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "defaultPowerOffType",
            "baseName": "DefaultPowerOffType",
            "type": "string",
            "format": ""
        },
        {
            "name": "dhcpEnabled",
            "baseName": "DhcpEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "diskCommitInfo",
            "baseName": "DiskCommitInfo",
            "type": "VirtualizationVmDiskCommitInfo",
            "format": ""
        },
        {
            "name": "dnsServerList",
            "baseName": "DnsServerList",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "dnsSuffixList",
            "baseName": "DnsSuffixList",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "folder",
            "baseName": "Folder",
            "type": "string",
            "format": ""
        },
        {
            "name": "guestState",
            "baseName": "GuestState",
            "type": "VirtualizationVmwareVirtualMachineAllOfGuestStateEnum",
            "format": ""
        },
        {
            "name": "instanceUuid",
            "baseName": "InstanceUuid",
            "type": "string",
            "format": ""
        },
        {
            "name": "isTemplate",
            "baseName": "IsTemplate",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "macAddress",
            "baseName": "MacAddress",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "memShares",
            "baseName": "MemShares",
            "type": "VirtualizationVmMemoryShareInfo",
            "format": ""
        },
        {
            "name": "memoryHotAddEnabled",
            "baseName": "MemoryHotAddEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "networkCount",
            "baseName": "NetworkCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "portGroups",
            "baseName": "PortGroups",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "protectedVm",
            "baseName": "ProtectedVm",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "remoteDisplayInfo",
            "baseName": "RemoteDisplayInfo",
            "type": "VirtualizationRemoteDisplayInfo",
            "format": ""
        },
        {
            "name": "remoteDisplayVncEnabled",
            "baseName": "RemoteDisplayVncEnabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "resourcePool",
            "baseName": "ResourcePool",
            "type": "string",
            "format": ""
        },
        {
            "name": "resourcePoolOwner",
            "baseName": "ResourcePoolOwner",
            "type": "string",
            "format": ""
        },
        {
            "name": "resourcePoolParent",
            "baseName": "ResourcePoolParent",
            "type": "string",
            "format": ""
        },
        {
            "name": "toolRunningStatus",
            "baseName": "ToolRunningStatus",
            "type": "string",
            "format": ""
        },
        {
            "name": "toolsVersion",
            "baseName": "ToolsVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "vmDiskCount",
            "baseName": "VmDiskCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "vmOverallStatus",
            "baseName": "VmOverallStatus",
            "type": "string",
            "format": ""
        },
        {
            "name": "vmPath",
            "baseName": "VmPath",
            "type": "string",
            "format": ""
        },
        {
            "name": "vmVersion",
            "baseName": "VmVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "vmVnicCount",
            "baseName": "VmVnicCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "vnicDeviceConfigId",
            "baseName": "VnicDeviceConfigId",
            "type": "string",
            "format": ""
        },
        {
            "name": "cluster",
            "baseName": "Cluster",
            "type": "VirtualizationVmwareClusterRelationship",
            "format": ""
        },
        {
            "name": "datacenter",
            "baseName": "Datacenter",
            "type": "VirtualizationVmwareDatacenterRelationship",
            "format": ""
        },
        {
            "name": "datastores",
            "baseName": "Datastores",
            "type": "Array<VirtualizationVmwareDatastoreRelationship>",
            "format": ""
        },
        {
            "name": "host",
            "baseName": "Host",
            "type": "VirtualizationVmwareHostRelationship",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return VirtualizationVmwareVirtualMachineAllOf.attributeTypeMap;
    }
    
    public constructor() {
    }
}


export type VirtualizationVmwareVirtualMachineAllOfGuestStateEnum = "Unknown" | "NotRunning" | "Resetting" | "Running" | "ShuttingDown" | "Standby" ;

