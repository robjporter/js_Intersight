/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AnyType } from './AnyType';
import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoMoRef } from './MoMoRef';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { WorkflowBaseDataType } from './WorkflowBaseDataType';
import { WorkflowCatalogRelationship } from './WorkflowCatalogRelationship';
import { WorkflowValidationInformation } from './WorkflowValidationInformation';
import { WorkflowWorkflowDefinition } from './WorkflowWorkflowDefinition';
import { WorkflowWorkflowProperties } from './WorkflowWorkflowProperties';
import { WorkflowWorkflowTask } from './WorkflowWorkflowTask';
import { HttpFile } from '../http/http';

/**
* A relationship to the 'workflow.WorkflowDefinition' resource, or the expanded 'workflow.WorkflowDefinition' resource, or the 'null' value.
*/
export class WorkflowWorkflowDefinitionRelationship {
    /**
    * The Account ID for this managed object.
    */
    'accountMoid'?: string;
    /**
    * The concrete type of this complex type. Its value must be the same as the 'objectType' property. The OpenAPI document references this property as a discriminator value.
    */
    'classId': string;
    /**
    * The time when this managed object was created.
    */
    'createTime'?: Date;
    /**
    * The DomainGroup ID for this managed object.
    */
    'domainGroupMoid'?: string;
    /**
    * The time when this managed object was last modified.
    */
    'modTime'?: Date;
    /**
    * The unique identifier of this Managed Object instance.
    */
    'moid'?: string;
    /**
    * The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.
    */
    'objectType': string;
    'owners'?: Array<string>;
    /**
    * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.
    */
    'sharedScope'?: string;
    'tags'?: Array<MoTag>;
    'versionContext'?: MoVersionContext;
    /**
    * An array of relationships to moBaseMo resources.
    */
    'ancestors'?: Array<MoBaseMoRelationship>;
    'parent'?: MoBaseMoRelationship;
    /**
    * An array of relationships to moBaseMo resources.
    */
    'permissionResources'?: Array<MoBaseMoRelationship>;
    /**
    * a map of display names for a resource.
    */
    'displayNames'?: { [key: string]: Array<string>; };
    /**
    * When true this will be the workflow version that is used when a specific workflow definition version is not specified. The default version is used when user executes a workflow without specifying a version or when workflow is included in another workflow without a specific version. The very first workflow definition created with a name will be set as the default version, after that user can explicitly set any version of the workflow definition as the default version.
    */
    'defaultVersion'?: boolean;
    /**
    * The description for this workflow.
    */
    'description'?: string;
    'inputDefinition'?: Array<WorkflowBaseDataType>;
    /**
    * A user friendly short name to identify the workflow. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:), space ( ) or an underscore (_).
    */
    'label'?: string;
    /**
    * License entitlement required to run this workflow. It is calculated based on the highest license requirement of all its tasks.
    */
    'licenseEntitlement'?: WorkflowWorkflowDefinitionRelationshipLicenseEntitlementEnum;
    /**
    * The maximum number of tasks that can be executed on this workflow.
    */
    'maxTaskCount'?: number;
    /**
    * The name for this workflow. You can have multiple versions of the workflow with the same name. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
    */
    'name'?: string;
    'outputDefinition'?: Array<WorkflowBaseDataType>;
    /**
    * The output mappings for the workflow. The outputs for worflows will generally be task output variables that we want to export out at the end of the workflow. The format to specify the mapping is '${Source.output.JsonPath}'. 'Source' is the name of the task within the workflow. You can map any task output to a workflow output as long as the types are compatible. Following this is JSON path expression to extract JSON fragment from source's output.
    */
    'outputParameters'?: AnyType;
    'properties'?: WorkflowWorkflowProperties;
    'tasks'?: Array<WorkflowWorkflowTask>;
    /**
    * This will hold the data needed for workflow to be rendered in the user interface.
    */
    'uiRenderingData'?: AnyType;
    'validationInformation'?: WorkflowValidationInformation;
    /**
    * The version of the workflow to support multiple versions.
    */
    'version'?: number;
    'catalog'?: WorkflowCatalogRelationship;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accountMoid",
            "baseName": "AccountMoid",
            "type": "string",
            "format": ""
        },
        {
            "name": "classId",
            "baseName": "ClassId",
            "type": "string",
            "format": ""
        },
        {
            "name": "createTime",
            "baseName": "CreateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "domainGroupMoid",
            "baseName": "DomainGroupMoid",
            "type": "string",
            "format": ""
        },
        {
            "name": "modTime",
            "baseName": "ModTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "moid",
            "baseName": "Moid",
            "type": "string",
            "format": ""
        },
        {
            "name": "objectType",
            "baseName": "ObjectType",
            "type": "string",
            "format": ""
        },
        {
            "name": "owners",
            "baseName": "Owners",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "sharedScope",
            "baseName": "SharedScope",
            "type": "string",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "Tags",
            "type": "Array<MoTag>",
            "format": ""
        },
        {
            "name": "versionContext",
            "baseName": "VersionContext",
            "type": "MoVersionContext",
            "format": ""
        },
        {
            "name": "ancestors",
            "baseName": "Ancestors",
            "type": "Array<MoBaseMoRelationship>",
            "format": ""
        },
        {
            "name": "parent",
            "baseName": "Parent",
            "type": "MoBaseMoRelationship",
            "format": ""
        },
        {
            "name": "permissionResources",
            "baseName": "PermissionResources",
            "type": "Array<MoBaseMoRelationship>",
            "format": ""
        },
        {
            "name": "displayNames",
            "baseName": "DisplayNames",
            "type": "{ [key: string]: Array<string>; }",
            "format": ""
        },
        {
            "name": "defaultVersion",
            "baseName": "DefaultVersion",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string",
            "format": ""
        },
        {
            "name": "inputDefinition",
            "baseName": "InputDefinition",
            "type": "Array<WorkflowBaseDataType>",
            "format": ""
        },
        {
            "name": "label",
            "baseName": "Label",
            "type": "string",
            "format": ""
        },
        {
            "name": "licenseEntitlement",
            "baseName": "LicenseEntitlement",
            "type": "WorkflowWorkflowDefinitionRelationshipLicenseEntitlementEnum",
            "format": ""
        },
        {
            "name": "maxTaskCount",
            "baseName": "MaxTaskCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string",
            "format": ""
        },
        {
            "name": "outputDefinition",
            "baseName": "OutputDefinition",
            "type": "Array<WorkflowBaseDataType>",
            "format": ""
        },
        {
            "name": "outputParameters",
            "baseName": "OutputParameters",
            "type": "AnyType",
            "format": ""
        },
        {
            "name": "properties",
            "baseName": "Properties",
            "type": "WorkflowWorkflowProperties",
            "format": ""
        },
        {
            "name": "tasks",
            "baseName": "Tasks",
            "type": "Array<WorkflowWorkflowTask>",
            "format": ""
        },
        {
            "name": "uiRenderingData",
            "baseName": "UiRenderingData",
            "type": "AnyType",
            "format": ""
        },
        {
            "name": "validationInformation",
            "baseName": "ValidationInformation",
            "type": "WorkflowValidationInformation",
            "format": ""
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "catalog",
            "baseName": "Catalog",
            "type": "WorkflowCatalogRelationship",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return WorkflowWorkflowDefinitionRelationship.attributeTypeMap;
    }
    
    public constructor() {
    }
}


export type WorkflowWorkflowDefinitionRelationshipLicenseEntitlementEnum = "Base" | "Essential" | "Standard" | "Advantage" | "Premier" ;

