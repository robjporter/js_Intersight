/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AnyType } from './AnyType';
import { MoBaseMo } from './MoBaseMo';
import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { WorkflowApi } from './WorkflowApi';
import { WorkflowBatchApiExecutorAllOf } from './WorkflowBatchApiExecutorAllOf';
import { WorkflowTaskConstraints } from './WorkflowTaskConstraints';
import { WorkflowTaskDefinitionRelationship } from './WorkflowTaskDefinitionRelationship';
import { HttpFile } from '../http/http';

/**
* Intersight allows generic API tasks to be created by taking the API request body and a response parser specification in the form of content.Grammar object. Batch API associates the list of API requests to be executed as part of single task execution. Each API request takes the request body and a response parser specification.
*/
export class WorkflowBatchApiExecutor extends MoBaseMo {
    'batch'?: Array<WorkflowApi>;
    'constraints'?: WorkflowTaskConstraints;
    /**
    * A detailed description about the batch APIs.
    */
    'description'?: string;
    /**
    * Name for the batch API task.
    */
    'name'?: string;
    /**
    * All the possible outcomes of this task are captured here. Outcomes property is a collection property of type workflow.Outcome objects. The outcomes can be mapped to the message to be shown. The outcomes are evaluated in the order they are given. At the end of the outcomes list, an catchall success/fail outcome can be added with condition as 'true'. This is an optional property and if not specified the task will be marked as success.
    */
    'outcomes'?: AnyType;
    /**
    * Intersight Orchestrator allows the extraction of required values from API responses using the API response grammar. These extracted values can be mapped to task output parameters defined in task definition. The mapping of API output parameters to the task output parameters is provided as JSON in this property.
    */
    'output'?: AnyType;
    /**
    * The skip expression, if provided, allows the batch API executor to skip the task execution when the given expression evaluates to true. The expression is given as such a golang template that has to be evaluated to a final content true/false. The expression is an optional and in case not provided, the API will always be executed.
    */
    'skipOnCondition'?: string;
    'taskDefinition'?: WorkflowTaskDefinitionRelationship;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "batch",
            "baseName": "Batch",
            "type": "Array<WorkflowApi>",
            "format": ""
        },
        {
            "name": "constraints",
            "baseName": "Constraints",
            "type": "WorkflowTaskConstraints",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "Description",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string",
            "format": ""
        },
        {
            "name": "outcomes",
            "baseName": "Outcomes",
            "type": "AnyType",
            "format": ""
        },
        {
            "name": "output",
            "baseName": "Output",
            "type": "AnyType",
            "format": ""
        },
        {
            "name": "skipOnCondition",
            "baseName": "SkipOnCondition",
            "type": "string",
            "format": ""
        },
        {
            "name": "taskDefinition",
            "baseName": "TaskDefinition",
            "type": "WorkflowTaskDefinitionRelationship",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WorkflowBatchApiExecutor.attributeTypeMap);
    }
    
    public constructor() {
        super();
    }
}

