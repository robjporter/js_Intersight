/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { TelemetryDruidDataSource } from './TelemetryDruidDataSource';
import { TelemetryDruidQueryContext } from './TelemetryDruidQueryContext';
import { HttpFile } from '../http/http';

export class TelemetryDruidSegmentMetadataRequestAllOf {
    'dataSource': TelemetryDruidDataSource;
    /**
    * A JSON Object representing ISO-8601 Intervals. This defines the time ranges to run the query over. If an interval is not specified, the query will use a default interval that spans a configurable period before the end time of the most recent segment.
    */
    'intervals'?: Array<string>;
    /**
    * A JSON Object representing what columns should be included in the result. Defaults to \"all\".
    */
    'toInclude'?: any;
    /**
    * Merge all individual segment metadata results into a single result.
    */
    'merge'?: boolean;
    'context'?: TelemetryDruidQueryContext;
    /**
    * A list of Strings specifying what column properties (e.g. cardinality, size) should be calculated and returned in the result. Defaults to [\"cardinality\", \"interval\", \"minmax\"], but can be overridden with using the segment metadata query config. * cardinality - in the result will return the estimated floor of cardinality for each column. Only relevant for dimension columns. * minmax - Estimated min/max values for each column. Only relevant for dimension columns. * size - in the result will contain the estimated total segment byte size as if the data were stored in text format. * intervals - in the result will contain the list of intervals associated with the queried segments. * timestampSpec - in the result will contain timestampSpec of data stored in segments. This can be null if timestampSpec of segments was unknown or unmergeable (if merging is enabled). * queryGranularity - in the result will contain query granularity of data stored in segments. This can be null if query granularity of segments was unknown or unmergeable (if merging is enabled). * aggregators - in the result will contain the list of aggregators usable for querying metric columns. This may be null if the aggregators are unknown or unmergeable (if merging is enabled). Merging can be strict or lenient. The form of the result is a map of column name to aggregator. * rollup - in the result is true/false/null. When merging is enabled, if some are rollup, others are not, result is null.
    */
    'analysisTypes'?: Array<string>;
    /**
    * If true, and if the \"aggregators\" analysisType is enabled, aggregators will be merged leniently.
    */
    'lenientAggregatorMerge'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "dataSource",
            "baseName": "dataSource",
            "type": "TelemetryDruidDataSource",
            "format": ""
        },
        {
            "name": "intervals",
            "baseName": "intervals",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "toInclude",
            "baseName": "toInclude",
            "type": "any",
            "format": ""
        },
        {
            "name": "merge",
            "baseName": "merge",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "context",
            "baseName": "context",
            "type": "TelemetryDruidQueryContext",
            "format": ""
        },
        {
            "name": "analysisTypes",
            "baseName": "analysisTypes",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "lenientAggregatorMerge",
            "baseName": "lenientAggregatorMerge",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return TelemetryDruidSegmentMetadataRequestAllOf.attributeTypeMap;
    }
    
    public constructor() {
    }
}

