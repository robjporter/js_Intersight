/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AnyType } from './AnyType';
import { HyperflexClusterProfileRelationship } from './HyperflexClusterProfileRelationship';
import { IamAccountRelationship } from './IamAccountRelationship';
import { IamPermissionRelationship } from './IamPermissionRelationship';
import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoMoRef } from './MoMoRef';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { OrganizationOrganizationRelationship } from './OrganizationOrganizationRelationship';
import { ServerProfileRelationship } from './ServerProfileRelationship';
import { WorkflowMessage } from './WorkflowMessage';
import { WorkflowPendingDynamicWorkflowInfoRelationship } from './WorkflowPendingDynamicWorkflowInfoRelationship';
import { WorkflowTaskInfoRelationship } from './WorkflowTaskInfoRelationship';
import { WorkflowWorkflowDefinitionRelationship } from './WorkflowWorkflowDefinitionRelationship';
import { WorkflowWorkflowInfo } from './WorkflowWorkflowInfo';
import { WorkflowWorkflowInfoProperties } from './WorkflowWorkflowInfoProperties';
import { HttpFile } from '../http/http';

/**
* A relationship to the 'workflow.WorkflowInfo' resource, or the expanded 'workflow.WorkflowInfo' resource, or the 'null' value.
*/
export class WorkflowWorkflowInfoRelationship {
    /**
    * The Account ID for this managed object.
    */
    'accountMoid'?: string;
    /**
    * The concrete type of this complex type. Its value must be the same as the 'objectType' property. The OpenAPI document references this property as a discriminator value.
    */
    'classId': string;
    /**
    * The time when this managed object was created.
    */
    'createTime'?: Date;
    /**
    * The DomainGroup ID for this managed object.
    */
    'domainGroupMoid'?: string;
    /**
    * The time when this managed object was last modified.
    */
    'modTime'?: Date;
    /**
    * The unique identifier of this Managed Object instance.
    */
    'moid'?: string;
    /**
    * The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.
    */
    'objectType': string;
    'owners'?: Array<string>;
    /**
    * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.
    */
    'sharedScope'?: string;
    'tags'?: Array<MoTag>;
    'versionContext'?: MoVersionContext;
    /**
    * An array of relationships to moBaseMo resources.
    */
    'ancestors'?: Array<MoBaseMoRelationship>;
    'parent'?: MoBaseMoRelationship;
    /**
    * An array of relationships to moBaseMo resources.
    */
    'permissionResources'?: Array<MoBaseMoRelationship>;
    /**
    * a map of display names for a resource.
    */
    'displayNames'?: { [key: string]: Array<string>; };
    /**
    * The action of the workflow such as start, cancel, retry, pause.
    */
    'action'?: WorkflowWorkflowInfoRelationshipActionEnum;
    /**
    * The time when the workflow info will be removed from database.
    */
    'cleanupTime'?: Date;
    /**
    * The time when the workflow reached a final state.
    */
    'endTime'?: Date;
    /**
    * The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from database.
    */
    'failedWorkflowCleanupDuration'?: number;
    /**
    * All the given inputs for the workflow.
    */
    'input'?: AnyType;
    /**
    * A workflow instance Id which is the unique identified for the workflow execution.
    */
    'instId'?: string;
    /**
    * Denotes if this workflow is internal and should be hidden from user view of running workflows.
    */
    'internal'?: boolean;
    /**
    * The last action that was issued on the workflow is saved in this field.
    */
    'lastAction'?: WorkflowWorkflowInfoRelationshipLastActionEnum;
    'message'?: Array<WorkflowMessage>;
    /**
    * Version of the workflow metadata for which this workflow execution was started.
    */
    'metaVersion'?: number;
    /**
    * A name of the workflow execution instance.
    */
    'name'?: string;
    /**
    * All the generated outputs for the workflow.
    */
    'output'?: AnyType;
    /**
    * This field indicates percentage of workflow task execution.
    */
    'progress'?: number;
    'properties'?: WorkflowWorkflowInfoProperties;
    /**
    * This field is applicable when Retry action is issued for a workflow which is in a final state. When this field is not specified then the workflow will retry from the start of the workflow. When this field is specified then the workflow will be retried from the specified task. The field should carry the task name which is the unique name of the task within the workflow. The task name must be one of the tasks that completed or failed in the previous run, you cannot retry a workflow from a task which wasn't run in the previous iteration.
    */
    'retryFromTaskName'?: string;
    /**
    * The source microservice name which is the owner for this workflow.
    */
    'src'?: string;
    /**
    * The time when the workflow was started for execution.
    */
    'startTime'?: Date;
    /**
    * A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED).
    */
    'status'?: string;
    /**
    * The duration in hours after which the workflow info for successful workflow will be removed from database.
    */
    'successWorkflowCleanupDuration'?: number;
    /**
    * The trace id to keep track of workflow execution.
    */
    'traceId'?: string;
    /**
    * A type of the workflow (serverconfig, ansible_monitoring).
    */
    'type'?: string;
    /**
    * The user identifier which indicates the user that started this workflow.
    */
    'userId'?: string;
    /**
    * Denotes the reason workflow is in waiting status.
    */
    'waitReason'?: WorkflowWorkflowInfoRelationshipWaitReasonEnum;
    /**
    * The workflow context which contains initiator and target information.
    */
    'workflowCtx'?: AnyType;
    /**
    * The type of workflow meta. Derived from the workflow meta that is used to launch this workflow instance.
    */
    'workflowMetaType'?: WorkflowWorkflowInfoRelationshipWorkflowMetaTypeEnum;
    /**
    * Total number of workflow tasks in this workflow.
    */
    'workflowTaskCount'?: number;
    '_0profile'?: ServerProfileRelationship;
    '_1clusterProfile'?: HyperflexClusterProfileRelationship;
    'account'?: IamAccountRelationship;
    'associatedObject'?: MoBaseMoRelationship;
    'organization'?: OrganizationOrganizationRelationship;
    'parentTaskInfo'?: WorkflowTaskInfoRelationship;
    'pendingDynamicWorkflowInfo'?: WorkflowPendingDynamicWorkflowInfoRelationship;
    'permission'?: IamPermissionRelationship;
    /**
    * An array of relationships to workflowTaskInfo resources.
    */
    'taskInfos'?: Array<WorkflowTaskInfoRelationship>;
    'workflowDefinition'?: WorkflowWorkflowDefinitionRelationship;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accountMoid",
            "baseName": "AccountMoid",
            "type": "string",
            "format": ""
        },
        {
            "name": "classId",
            "baseName": "ClassId",
            "type": "string",
            "format": ""
        },
        {
            "name": "createTime",
            "baseName": "CreateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "domainGroupMoid",
            "baseName": "DomainGroupMoid",
            "type": "string",
            "format": ""
        },
        {
            "name": "modTime",
            "baseName": "ModTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "moid",
            "baseName": "Moid",
            "type": "string",
            "format": ""
        },
        {
            "name": "objectType",
            "baseName": "ObjectType",
            "type": "string",
            "format": ""
        },
        {
            "name": "owners",
            "baseName": "Owners",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "sharedScope",
            "baseName": "SharedScope",
            "type": "string",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "Tags",
            "type": "Array<MoTag>",
            "format": ""
        },
        {
            "name": "versionContext",
            "baseName": "VersionContext",
            "type": "MoVersionContext",
            "format": ""
        },
        {
            "name": "ancestors",
            "baseName": "Ancestors",
            "type": "Array<MoBaseMoRelationship>",
            "format": ""
        },
        {
            "name": "parent",
            "baseName": "Parent",
            "type": "MoBaseMoRelationship",
            "format": ""
        },
        {
            "name": "permissionResources",
            "baseName": "PermissionResources",
            "type": "Array<MoBaseMoRelationship>",
            "format": ""
        },
        {
            "name": "displayNames",
            "baseName": "DisplayNames",
            "type": "{ [key: string]: Array<string>; }",
            "format": ""
        },
        {
            "name": "action",
            "baseName": "Action",
            "type": "WorkflowWorkflowInfoRelationshipActionEnum",
            "format": ""
        },
        {
            "name": "cleanupTime",
            "baseName": "CleanupTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "endTime",
            "baseName": "EndTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "failedWorkflowCleanupDuration",
            "baseName": "FailedWorkflowCleanupDuration",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "input",
            "baseName": "Input",
            "type": "AnyType",
            "format": ""
        },
        {
            "name": "instId",
            "baseName": "InstId",
            "type": "string",
            "format": ""
        },
        {
            "name": "internal",
            "baseName": "Internal",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "lastAction",
            "baseName": "LastAction",
            "type": "WorkflowWorkflowInfoRelationshipLastActionEnum",
            "format": ""
        },
        {
            "name": "message",
            "baseName": "Message",
            "type": "Array<WorkflowMessage>",
            "format": ""
        },
        {
            "name": "metaVersion",
            "baseName": "MetaVersion",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string",
            "format": ""
        },
        {
            "name": "output",
            "baseName": "Output",
            "type": "AnyType",
            "format": ""
        },
        {
            "name": "progress",
            "baseName": "Progress",
            "type": "number",
            "format": "float"
        },
        {
            "name": "properties",
            "baseName": "Properties",
            "type": "WorkflowWorkflowInfoProperties",
            "format": ""
        },
        {
            "name": "retryFromTaskName",
            "baseName": "RetryFromTaskName",
            "type": "string",
            "format": ""
        },
        {
            "name": "src",
            "baseName": "Src",
            "type": "string",
            "format": ""
        },
        {
            "name": "startTime",
            "baseName": "StartTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "Status",
            "type": "string",
            "format": ""
        },
        {
            "name": "successWorkflowCleanupDuration",
            "baseName": "SuccessWorkflowCleanupDuration",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "traceId",
            "baseName": "TraceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "Type",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "UserId",
            "type": "string",
            "format": ""
        },
        {
            "name": "waitReason",
            "baseName": "WaitReason",
            "type": "WorkflowWorkflowInfoRelationshipWaitReasonEnum",
            "format": ""
        },
        {
            "name": "workflowCtx",
            "baseName": "WorkflowCtx",
            "type": "AnyType",
            "format": ""
        },
        {
            "name": "workflowMetaType",
            "baseName": "WorkflowMetaType",
            "type": "WorkflowWorkflowInfoRelationshipWorkflowMetaTypeEnum",
            "format": ""
        },
        {
            "name": "workflowTaskCount",
            "baseName": "WorkflowTaskCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "_0profile",
            "baseName": "_0_Profile",
            "type": "ServerProfileRelationship",
            "format": ""
        },
        {
            "name": "_1clusterProfile",
            "baseName": "_1_ClusterProfile",
            "type": "HyperflexClusterProfileRelationship",
            "format": ""
        },
        {
            "name": "account",
            "baseName": "Account",
            "type": "IamAccountRelationship",
            "format": ""
        },
        {
            "name": "associatedObject",
            "baseName": "AssociatedObject",
            "type": "MoBaseMoRelationship",
            "format": ""
        },
        {
            "name": "organization",
            "baseName": "Organization",
            "type": "OrganizationOrganizationRelationship",
            "format": ""
        },
        {
            "name": "parentTaskInfo",
            "baseName": "ParentTaskInfo",
            "type": "WorkflowTaskInfoRelationship",
            "format": ""
        },
        {
            "name": "pendingDynamicWorkflowInfo",
            "baseName": "PendingDynamicWorkflowInfo",
            "type": "WorkflowPendingDynamicWorkflowInfoRelationship",
            "format": ""
        },
        {
            "name": "permission",
            "baseName": "Permission",
            "type": "IamPermissionRelationship",
            "format": ""
        },
        {
            "name": "taskInfos",
            "baseName": "TaskInfos",
            "type": "Array<WorkflowTaskInfoRelationship>",
            "format": ""
        },
        {
            "name": "workflowDefinition",
            "baseName": "WorkflowDefinition",
            "type": "WorkflowWorkflowDefinitionRelationship",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return WorkflowWorkflowInfoRelationship.attributeTypeMap;
    }
    
    public constructor() {
    }
}


export type WorkflowWorkflowInfoRelationshipActionEnum = "None" | "Create" | "Start" | "Pause" | "Resume" | "Retry" | "RetryFailed" | "Cancel" ;
export type WorkflowWorkflowInfoRelationshipLastActionEnum = "None" | "Create" | "Start" | "Pause" | "Resume" | "Retry" | "RetryFailed" | "Cancel" ;
export type WorkflowWorkflowInfoRelationshipWaitReasonEnum = "None" | "GatherTasks" | "Duplicate" | "RateLimit" | "WaitTask" | "PendingRetryFailed" ;
export type WorkflowWorkflowInfoRelationshipWorkflowMetaTypeEnum = "SystemDefined" | "UserDefined" | "Dynamic" ;

