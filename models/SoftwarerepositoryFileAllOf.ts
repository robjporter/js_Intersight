/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SoftwarerepositoryFileServer } from './SoftwarerepositoryFileServer';
import { HttpFile } from '../http/http';

/**
* Definition of the list of properties defined in 'softwarerepository.File', excluding properties defined in parent classes.
*/
export class SoftwarerepositoryFileAllOf {
    /**
    * User provided description about the file. Cisco provided description for image inventoried from a Cisco repository.
    */
    'description'?: string;
    /**
    * The number of times this file has been downloaded from the local repository. It is used by the repository monitoring process to determine the files that are to be evicted from the cache.
    */
    'downloadCount'?: number;
    /**
    * The action to be performed on the imported file. If 'PreCache' is set, the image will be cached in Appliance. Applicable in Intersight appliance deployment. If 'Evict' is set, the cached file will be removed. Applicable in Intersight appliance deployment. If 'GeneratePreSignedUploadUrl' is set, generates pre signed URL (s) for the file to be imported into the repository. Applicable for local machine source. The URL (s) will be populated under LocalMachine file server. If 'CompleteImportProcess' is set, the ImportState is marked as 'Imported'. Applicable for local machine source. If 'Cancel' is set, the ImportState is marked as 'Failed'. Applicable for local machine source.
    */
    'importAction'?: SoftwarerepositoryFileAllOfImportActionEnum;
    /**
    * The state  of this file in the repository or Appliance. The importState is updated during the import operation and as part of the repository monitoring process.
    */
    'importState'?: SoftwarerepositoryFileAllOfImportStateEnum;
    /**
    * The time at which this image or file was imported/cached into the repositry. if the 'ImportState' is 'Imported', the time at which this image or file was imported. if the 'ImportState' is 'Cached', the time at which this image or file was cached.
    */
    'importedTime'?: Date;
    /**
    * The time at which this file was last downloaded from the local repository. It is used by the repository monitoring process to determine the files that are to be evicted from the cache.
    */
    'lastAccessTime'?: Date;
    /**
    * The md5sum checksum of the file. This information is available for all Cisco distributed images and files imported to the local repository.
    */
    'md5sum'?: string;
    /**
    * The name of the file. It is populated as part of the image import operation.
    */
    'name'?: string;
    /**
    * The date on which the file was released or distributed by its vendor.
    */
    'releaseDate'?: Date;
    /**
    * The sha512sum of the file. This information is available for all Cisco distributed images and files imported to the local repository.
    */
    'sha512sum'?: string;
    /**
    * The size (in bytes) of the file. This information is available for all Cisco distributed images and files imported to the local repository.
    */
    'size'?: number;
    /**
    * The software advisory, if any, provided by the vendor for this file.
    */
    'softwareAdvisoryUrl'?: string;
    'source'?: SoftwarerepositoryFileServer;
    /**
    * Vendor provided version for the file.
    */
    'version'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "description",
            "baseName": "Description",
            "type": "string",
            "format": ""
        },
        {
            "name": "downloadCount",
            "baseName": "DownloadCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "importAction",
            "baseName": "ImportAction",
            "type": "SoftwarerepositoryFileAllOfImportActionEnum",
            "format": ""
        },
        {
            "name": "importState",
            "baseName": "ImportState",
            "type": "SoftwarerepositoryFileAllOfImportStateEnum",
            "format": ""
        },
        {
            "name": "importedTime",
            "baseName": "ImportedTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "lastAccessTime",
            "baseName": "LastAccessTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "md5sum",
            "baseName": "Md5sum",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string",
            "format": ""
        },
        {
            "name": "releaseDate",
            "baseName": "ReleaseDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "sha512sum",
            "baseName": "Sha512sum",
            "type": "string",
            "format": ""
        },
        {
            "name": "size",
            "baseName": "Size",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "softwareAdvisoryUrl",
            "baseName": "SoftwareAdvisoryUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "source",
            "baseName": "Source",
            "type": "SoftwarerepositoryFileServer",
            "format": ""
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return SoftwarerepositoryFileAllOf.attributeTypeMap;
    }
    
    public constructor() {
    }
}


export type SoftwarerepositoryFileAllOfImportActionEnum = "None" | "GeneratePreSignedUploadUrl" | "GeneratePreSignedDownloadUrl" | "CompleteImportProcess" | "PreCache" | "Cancel" | "Evict" ;
export type SoftwarerepositoryFileAllOfImportStateEnum = "ReadyForImport" | "Importing" | "Imported" | "Failed" | "MetaOnly" | "ReadyForCache" | "Caching" | "Cached" | "CachingFailed" | "Corrupted" | "Evicted" ;

