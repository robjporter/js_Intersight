/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AssetDeviceRegistrationRelationship } from './AssetDeviceRegistrationRelationship';
import { HyperflexAlarmRelationship } from './HyperflexAlarmRelationship';
import { HyperflexClusterAllOf } from './HyperflexClusterAllOf';
import { HyperflexHealthRelationship } from './HyperflexHealthRelationship';
import { HyperflexNodeRelationship } from './HyperflexNodeRelationship';
import { HyperflexSummary } from './HyperflexSummary';
import { MoBaseMo } from './MoBaseMo';
import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { HttpFile } from '../http/http';

/**
* A HyperFlex cluster. Contains inventory information concerning the health, software versions, storage, and nodes of the cluster.
*/
export class HyperflexCluster extends MoBaseMo {
    /**
    * The number of days remaining before the cluster's storage utilization reaches the recommended capacity limit of 76%. Default value is math.MaxInt32 to indicate that the capacity runway is \"Unknown\" for a cluster that is not connected or with not sufficient data.
    */
    'capacityRunway'?: number;
    /**
    * The name of this HyperFlex cluster.
    */
    'clusterName'?: string;
    /**
    * The storage type of this cluster (All Flash or Hybrid).
    */
    'clusterType'?: number;
    /**
    * The unique identifier for this HyperFlex cluster.
    */
    'clusterUuid'?: string;
    /**
    * The number of compute nodes that belong to this cluster.
    */
    'computeNodeCount'?: number;
    /**
    * The number of converged nodes that belong to this cluster.
    */
    'convergedNodeCount'?: number;
    /**
    * The deployment type of the HyperFlex cluster. The cluster can have one of the following configurations: 1. Datacenter: The HyperFlex cluster consists of UCS Fabric Interconnect-attached nodes on a single site. 2. Stretched Cluster: The HyperFlex cluster consists of UCS Fabric Interconnect-attached nodes distributed across multiple sites. 3. Edge: The HyperFlex cluster consists of 2-4 standalone nodes. If the cluster is running a HyperFlex Data Platform version less than 4.0 or if the deployment type cannot be determined, the deployment type is set as 'NA' (not available).
    */
    'deploymentType'?: HyperflexClusterDeploymentTypeEnum;
    /**
    * The unique identifier of the device registration that represents this HyperFlex cluster's connection to Intersight.
    */
    'deviceId'?: string;
    /**
    * The number of yellow (warning) and red (critical) alarms stored as an aggregate. The first 16 bits indicate the number of red alarms, and the last 16 bits contain the number of yellow alarms.
    */
    'fltAggr'?: number;
    /**
    * The HyperFlex Data Platform version of this cluster.
    */
    'hxVersion'?: string;
    /**
    * The version and build number of the HyperFlex Data Platform for this cluster. After a cluster upgrade, this version string will be updated on the next inventory cycle to reflect the newly installed version.
    */
    'hxdpBuildVersion'?: string;
    /**
    * The type of hypervisor running on this cluster.
    */
    'hypervisorType'?: HyperflexClusterHypervisorTypeEnum;
    /**
    * The version of hypervisor running on this cluster.
    */
    'hypervisorVersion'?: string;
    'summary'?: HyperflexSummary;
    /**
    * The storage utilization percentage is computed based on total capacity and current capacity utilization.
    */
    'utilizationPercentage'?: number;
    /**
    * The storage utilization trend percentage represents the trend in percentage computed using the first and last point from historical data.
    */
    'utilizationTrendPercentage'?: number;
    /**
    * The number of virtual machines present on this cluster.
    */
    'vmCount'?: number;
    /**
    * An array of relationships to hyperflexAlarm resources.
    */
    'alarm'?: Array<HyperflexAlarmRelationship>;
    'health'?: HyperflexHealthRelationship;
    /**
    * An array of relationships to hyperflexNode resources.
    */
    'nodes'?: Array<HyperflexNodeRelationship>;
    'registeredDevice'?: AssetDeviceRegistrationRelationship;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "capacityRunway",
            "baseName": "CapacityRunway",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "clusterName",
            "baseName": "ClusterName",
            "type": "string",
            "format": ""
        },
        {
            "name": "clusterType",
            "baseName": "ClusterType",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "clusterUuid",
            "baseName": "ClusterUuid",
            "type": "string",
            "format": ""
        },
        {
            "name": "computeNodeCount",
            "baseName": "ComputeNodeCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "convergedNodeCount",
            "baseName": "ConvergedNodeCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "deploymentType",
            "baseName": "DeploymentType",
            "type": "HyperflexClusterDeploymentTypeEnum",
            "format": ""
        },
        {
            "name": "deviceId",
            "baseName": "DeviceId",
            "type": "string",
            "format": ""
        },
        {
            "name": "fltAggr",
            "baseName": "FltAggr",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "hxVersion",
            "baseName": "HxVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "hxdpBuildVersion",
            "baseName": "HxdpBuildVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "hypervisorType",
            "baseName": "HypervisorType",
            "type": "HyperflexClusterHypervisorTypeEnum",
            "format": ""
        },
        {
            "name": "hypervisorVersion",
            "baseName": "HypervisorVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "summary",
            "baseName": "Summary",
            "type": "HyperflexSummary",
            "format": ""
        },
        {
            "name": "utilizationPercentage",
            "baseName": "UtilizationPercentage",
            "type": "number",
            "format": "float"
        },
        {
            "name": "utilizationTrendPercentage",
            "baseName": "UtilizationTrendPercentage",
            "type": "number",
            "format": "float"
        },
        {
            "name": "vmCount",
            "baseName": "VmCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "alarm",
            "baseName": "Alarm",
            "type": "Array<HyperflexAlarmRelationship>",
            "format": ""
        },
        {
            "name": "health",
            "baseName": "Health",
            "type": "HyperflexHealthRelationship",
            "format": ""
        },
        {
            "name": "nodes",
            "baseName": "Nodes",
            "type": "Array<HyperflexNodeRelationship>",
            "format": ""
        },
        {
            "name": "registeredDevice",
            "baseName": "RegisteredDevice",
            "type": "AssetDeviceRegistrationRelationship",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HyperflexCluster.attributeTypeMap);
    }
    
    public constructor() {
        super();
    }
}


export type HyperflexClusterDeploymentTypeEnum = "NA" | "Datacenter" | "Stretched Cluster" | "Edge" ;
export type HyperflexClusterHypervisorTypeEnum = "ESXi" ;

