/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MetaAccessPrivilege } from './MetaAccessPrivilege';
import { MetaDefinitionAllOf } from './MetaDefinitionAllOf';
import { MetaPropDefinition } from './MetaPropDefinition';
import { MetaRelationshipDefinition } from './MetaRelationshipDefinition';
import { MoBaseMo } from './MoBaseMo';
import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { HttpFile } from '../http/http';

/**
* The meta-data of managed objects and complex types.
*/
export class MetaDefinition extends MoBaseMo {
    'accessPrivileges'?: Array<MetaAccessPrivilege>;
    'ancestorClasses'?: Array<string>;
    /**
    * Boolean flag to specify whether the meta class is a concrete class or not.
    */
    'isConcrete'?: boolean;
    /**
    * Indicates whether the meta class is a complex type or managed object.
    */
    'metaType'?: MetaDefinitionMetaTypeEnum;
    /**
    * The fully-qualified class name of the Managed Object or complex type. For example, \"compute:Blade\" where the Managed Object is \"Blade\" and the package is 'compute'.
    */
    'name'?: string;
    /**
    * The namespace of the meta.
    */
    'namespace'?: string;
    /**
    * The fully-qualified name of the parent metaclass in the class inheritance hierarchy.
    */
    'parentClass'?: string;
    /**
    * Boolean flag to specify whether instances of this class type can be specified in permissions for instance based access control. Permissions can be created for entire Intersight account or to a subset of resources (instance based access control). In the first release, permissions are supported for entire account or for a subset of organizations.
    */
    'permissionSupported'?: boolean;
    'properties'?: Array<MetaPropDefinition>;
    /**
    * Boolean flag to specify whether instances of this class type can be assigned to resource groups that are part of an organization for access control. Inventoried physical/logical objects which needs access control should have rbacResource=yes. These objects are not part of any organization by default like device registrations and should be assigned to organizations for access control. Profiles, policies, workflow definitions which are created by specifying organization need not have this flag set.
    */
    'rbacResource'?: boolean;
    'relationships'?: Array<MetaRelationshipDefinition>;
    /**
    * Restful URL path for the meta.
    */
    'restPath'?: string;
    /**
    * The version of the service that defines the meta-data.
    */
    'version'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accessPrivileges",
            "baseName": "AccessPrivileges",
            "type": "Array<MetaAccessPrivilege>",
            "format": ""
        },
        {
            "name": "ancestorClasses",
            "baseName": "AncestorClasses",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "isConcrete",
            "baseName": "IsConcrete",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "metaType",
            "baseName": "MetaType",
            "type": "MetaDefinitionMetaTypeEnum",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string",
            "format": ""
        },
        {
            "name": "namespace",
            "baseName": "Namespace",
            "type": "string",
            "format": ""
        },
        {
            "name": "parentClass",
            "baseName": "ParentClass",
            "type": "string",
            "format": ""
        },
        {
            "name": "permissionSupported",
            "baseName": "PermissionSupported",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "properties",
            "baseName": "Properties",
            "type": "Array<MetaPropDefinition>",
            "format": ""
        },
        {
            "name": "rbacResource",
            "baseName": "RbacResource",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "relationships",
            "baseName": "Relationships",
            "type": "Array<MetaRelationshipDefinition>",
            "format": ""
        },
        {
            "name": "restPath",
            "baseName": "RestPath",
            "type": "string",
            "format": ""
        },
        {
            "name": "version",
            "baseName": "Version",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(MetaDefinition.attributeTypeMap);
    }
    
    public constructor() {
        super();
    }
}


export type MetaDefinitionMetaTypeEnum = "ManagedObject" | "ComplexType" ;

