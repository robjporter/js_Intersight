/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* Definition of the list of properties defined in 'storage.VirtualDriveConfig', excluding properties defined in parent classes.
*/
export class StorageVirtualDriveConfigAllOf {
    /**
    * Access policy that host has on this virtual drive.
    */
    'accessPolicy'?: StorageVirtualDriveConfigAllOfAccessPolicyEnum;
    /**
    * This flag enables the use of this virtual drive as a boot drive.
    */
    'bootDrive'?: boolean;
    /**
    * Disk group policy that has the disk group in which this virtual drive needs to be created.
    */
    'diskGroupName'?: string;
    /**
    * Disk group policy that has the disk group in which this virtual drive needs to be created.
    */
    'diskGroupPolicy'?: string;
    /**
    * This property expect disk cache policy.
    */
    'driveCache'?: StorageVirtualDriveConfigAllOfDriveCacheEnum;
    /**
    * This flag enables this virtual drive to use all the available space in the disk group. When this flag is configured, the size property is ignored.
    */
    'expandToAvailable'?: boolean;
    /**
    * This property expects the desired IO mode - direct IO or cached IO.
    */
    'ioPolicy'?: StorageVirtualDriveConfigAllOfIoPolicyEnum;
    /**
    * The name of the virtual drive. The name can be between 1 and 15 alphanumeric characters. Spaces or any special characters other than - (hyphen), _ (underscore), : (colon), and . (period) are not allowed.
    */
    'name'?: string;
    /**
    * Read ahead mode to be used to read data from this virtual drive.
    */
    'readPolicy'?: StorageVirtualDriveConfigAllOfReadPolicyEnum;
    /**
    * Virtual drive size in MB. This is a required field unless the 'Expand to Available' option is enabled.
    */
    'size'?: number;
    /**
    * Write mode to be used to write data to this virtual drive.
    */
    'writePolicy'?: StorageVirtualDriveConfigAllOfWritePolicyEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accessPolicy",
            "baseName": "AccessPolicy",
            "type": "StorageVirtualDriveConfigAllOfAccessPolicyEnum",
            "format": ""
        },
        {
            "name": "bootDrive",
            "baseName": "BootDrive",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "diskGroupName",
            "baseName": "DiskGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "diskGroupPolicy",
            "baseName": "DiskGroupPolicy",
            "type": "string",
            "format": ""
        },
        {
            "name": "driveCache",
            "baseName": "DriveCache",
            "type": "StorageVirtualDriveConfigAllOfDriveCacheEnum",
            "format": ""
        },
        {
            "name": "expandToAvailable",
            "baseName": "ExpandToAvailable",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "ioPolicy",
            "baseName": "IoPolicy",
            "type": "StorageVirtualDriveConfigAllOfIoPolicyEnum",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string",
            "format": ""
        },
        {
            "name": "readPolicy",
            "baseName": "ReadPolicy",
            "type": "StorageVirtualDriveConfigAllOfReadPolicyEnum",
            "format": ""
        },
        {
            "name": "size",
            "baseName": "Size",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "writePolicy",
            "baseName": "WritePolicy",
            "type": "StorageVirtualDriveConfigAllOfWritePolicyEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return StorageVirtualDriveConfigAllOf.attributeTypeMap;
    }
    
    public constructor() {
    }
}


export type StorageVirtualDriveConfigAllOfAccessPolicyEnum = "Default" | "ReadWrite" | "ReadOnly" | "Blocked" ;
export type StorageVirtualDriveConfigAllOfDriveCacheEnum = "Default" | "NoChange" | "Enable" | "Disable" ;
export type StorageVirtualDriveConfigAllOfIoPolicyEnum = "Default" | "Direct" | "Cached" ;
export type StorageVirtualDriveConfigAllOfReadPolicyEnum = "Default" | "ReadAhead" | "NoReadAhead" ;
export type StorageVirtualDriveConfigAllOfWritePolicyEnum = "Default" | "WriteThrough" | "WriteBackGoodBbu" | "AlwaysWriteBack" ;

