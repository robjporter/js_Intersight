/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AssetDeviceRegistrationRelationship } from './AssetDeviceRegistrationRelationship';
import { InfraHardwareInfo } from './InfraHardwareInfo';
import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoMoRef } from './MoMoRef';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { VirtualizationComputeCapacity } from './VirtualizationComputeCapacity';
import { VirtualizationCpuInfo } from './VirtualizationCpuInfo';
import { VirtualizationMemoryCapacity } from './VirtualizationMemoryCapacity';
import { VirtualizationProductInfo } from './VirtualizationProductInfo';
import { VirtualizationResourceConsumption } from './VirtualizationResourceConsumption';
import { VirtualizationVmwareClusterRelationship } from './VirtualizationVmwareClusterRelationship';
import { VirtualizationVmwareDatacenterRelationship } from './VirtualizationVmwareDatacenterRelationship';
import { VirtualizationVmwareDatastoreRelationship } from './VirtualizationVmwareDatastoreRelationship';
import { VirtualizationVmwareHost } from './VirtualizationVmwareHost';
import { HttpFile } from '../http/http';

/**
* A relationship to the 'virtualization.VmwareHost' resource, or the expanded 'virtualization.VmwareHost' resource, or the 'null' value.
*/
export class VirtualizationVmwareHostRelationship {
    /**
    * The Account ID for this managed object.
    */
    'accountMoid'?: string;
    /**
    * The concrete type of this complex type. Its value must be the same as the 'objectType' property. The OpenAPI document references this property as a discriminator value.
    */
    'classId': string;
    /**
    * The time when this managed object was created.
    */
    'createTime'?: Date;
    /**
    * The DomainGroup ID for this managed object.
    */
    'domainGroupMoid'?: string;
    /**
    * The time when this managed object was last modified.
    */
    'modTime'?: Date;
    /**
    * The unique identifier of this Managed Object instance.
    */
    'moid'?: string;
    /**
    * The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.
    */
    'objectType': string;
    'owners'?: Array<string>;
    /**
    * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.
    */
    'sharedScope'?: string;
    'tags'?: Array<MoTag>;
    'versionContext'?: MoVersionContext;
    /**
    * An array of relationships to moBaseMo resources.
    */
    'ancestors'?: Array<MoBaseMoRelationship>;
    'parent'?: MoBaseMoRelationship;
    /**
    * An array of relationships to moBaseMo resources.
    */
    'permissionResources'?: Array<MoBaseMoRelationship>;
    /**
    * a map of display names for a resource.
    */
    'displayNames'?: { [key: string]: Array<string>; };
    'registeredDevice'?: AssetDeviceRegistrationRelationship;
    'cpuInfo'?: VirtualizationCpuInfo;
    'hardwareInfo'?: InfraHardwareInfo;
    /**
    * Identifies the broad type of the underlying hypervisor.
    */
    'hypervisorType'?: VirtualizationVmwareHostRelationshipHypervisorTypeEnum;
    /**
    * The internally generated identity of this host. This entity is not manipulated by users. It aids in uniquely identifying the datacenter object. For VMware, this is an MOR (managed object reference).
    */
    'identity'?: string;
    /**
    * Is this host in maintenance mode. Set to true or false.
    */
    'maintenanceMode'?: boolean;
    'memoryCapacity'?: VirtualizationMemoryCapacity;
    /**
    * Commercial model information about this hardware.
    */
    'model'?: string;
    /**
    * Name of this host supplied by user. It is not the identity of the host. The name is subject to user manipulations.
    */
    'name'?: string;
    'processorCapacity'?: VirtualizationComputeCapacity;
    'productInfo'?: VirtualizationProductInfo;
    /**
    * Serial number of this host (internally generated).
    */
    'serial'?: string;
    /**
    * Host health status, as reported by the hypervisor platform.
    */
    'status'?: VirtualizationVmwareHostRelationshipStatusEnum;
    /**
    * The uptime of the host, stored as Duration (from w3c).
    */
    'upTime'?: string;
    /**
    * Universally unique identity of this host (example b3d4483b-5560-9342-8309-b486c9236610). Internally generated.
    */
    'uuid'?: string;
    /**
    * Commercial vendor details of this hardware.
    */
    'vendor'?: string;
    /**
    * The time when this host booted up.
    */
    'bootTime'?: Date;
    /**
    * Indicates if the host is connected to the vCenter. Values are connected, not connected.
    */
    'connectionState'?: string;
    /**
    * Is the host Powered-up or Powered-down.
    */
    'hwPowerState'?: VirtualizationVmwareHostRelationshipHwPowerStateEnum;
    /**
    * The count of all network adapters attached to this host.
    */
    'networkAdapterCount'?: number;
    'resourceConsumed'?: VirtualizationResourceConsumption;
    /**
    * The count of all storage adapters attached to this host.
    */
    'storageAdapterCount'?: number;
    /**
    * The identity of this host within vCenter (optional).
    */
    'vcenterHostId'?: string;
    'cluster'?: VirtualizationVmwareClusterRelationship;
    'datacenter'?: VirtualizationVmwareDatacenterRelationship;
    /**
    * An array of relationships to virtualizationVmwareDatastore resources.
    */
    'datastores'?: Array<VirtualizationVmwareDatastoreRelationship>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accountMoid",
            "baseName": "AccountMoid",
            "type": "string",
            "format": ""
        },
        {
            "name": "classId",
            "baseName": "ClassId",
            "type": "string",
            "format": ""
        },
        {
            "name": "createTime",
            "baseName": "CreateTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "domainGroupMoid",
            "baseName": "DomainGroupMoid",
            "type": "string",
            "format": ""
        },
        {
            "name": "modTime",
            "baseName": "ModTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "moid",
            "baseName": "Moid",
            "type": "string",
            "format": ""
        },
        {
            "name": "objectType",
            "baseName": "ObjectType",
            "type": "string",
            "format": ""
        },
        {
            "name": "owners",
            "baseName": "Owners",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "sharedScope",
            "baseName": "SharedScope",
            "type": "string",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "Tags",
            "type": "Array<MoTag>",
            "format": ""
        },
        {
            "name": "versionContext",
            "baseName": "VersionContext",
            "type": "MoVersionContext",
            "format": ""
        },
        {
            "name": "ancestors",
            "baseName": "Ancestors",
            "type": "Array<MoBaseMoRelationship>",
            "format": ""
        },
        {
            "name": "parent",
            "baseName": "Parent",
            "type": "MoBaseMoRelationship",
            "format": ""
        },
        {
            "name": "permissionResources",
            "baseName": "PermissionResources",
            "type": "Array<MoBaseMoRelationship>",
            "format": ""
        },
        {
            "name": "displayNames",
            "baseName": "DisplayNames",
            "type": "{ [key: string]: Array<string>; }",
            "format": ""
        },
        {
            "name": "registeredDevice",
            "baseName": "RegisteredDevice",
            "type": "AssetDeviceRegistrationRelationship",
            "format": ""
        },
        {
            "name": "cpuInfo",
            "baseName": "CpuInfo",
            "type": "VirtualizationCpuInfo",
            "format": ""
        },
        {
            "name": "hardwareInfo",
            "baseName": "HardwareInfo",
            "type": "InfraHardwareInfo",
            "format": ""
        },
        {
            "name": "hypervisorType",
            "baseName": "HypervisorType",
            "type": "VirtualizationVmwareHostRelationshipHypervisorTypeEnum",
            "format": ""
        },
        {
            "name": "identity",
            "baseName": "Identity",
            "type": "string",
            "format": ""
        },
        {
            "name": "maintenanceMode",
            "baseName": "MaintenanceMode",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "memoryCapacity",
            "baseName": "MemoryCapacity",
            "type": "VirtualizationMemoryCapacity",
            "format": ""
        },
        {
            "name": "model",
            "baseName": "Model",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string",
            "format": ""
        },
        {
            "name": "processorCapacity",
            "baseName": "ProcessorCapacity",
            "type": "VirtualizationComputeCapacity",
            "format": ""
        },
        {
            "name": "productInfo",
            "baseName": "ProductInfo",
            "type": "VirtualizationProductInfo",
            "format": ""
        },
        {
            "name": "serial",
            "baseName": "Serial",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "Status",
            "type": "VirtualizationVmwareHostRelationshipStatusEnum",
            "format": ""
        },
        {
            "name": "upTime",
            "baseName": "UpTime",
            "type": "string",
            "format": ""
        },
        {
            "name": "uuid",
            "baseName": "Uuid",
            "type": "string",
            "format": ""
        },
        {
            "name": "vendor",
            "baseName": "Vendor",
            "type": "string",
            "format": ""
        },
        {
            "name": "bootTime",
            "baseName": "BootTime",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "connectionState",
            "baseName": "ConnectionState",
            "type": "string",
            "format": ""
        },
        {
            "name": "hwPowerState",
            "baseName": "HwPowerState",
            "type": "VirtualizationVmwareHostRelationshipHwPowerStateEnum",
            "format": ""
        },
        {
            "name": "networkAdapterCount",
            "baseName": "NetworkAdapterCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "resourceConsumed",
            "baseName": "ResourceConsumed",
            "type": "VirtualizationResourceConsumption",
            "format": ""
        },
        {
            "name": "storageAdapterCount",
            "baseName": "StorageAdapterCount",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "vcenterHostId",
            "baseName": "VcenterHostId",
            "type": "string",
            "format": ""
        },
        {
            "name": "cluster",
            "baseName": "Cluster",
            "type": "VirtualizationVmwareClusterRelationship",
            "format": ""
        },
        {
            "name": "datacenter",
            "baseName": "Datacenter",
            "type": "VirtualizationVmwareDatacenterRelationship",
            "format": ""
        },
        {
            "name": "datastores",
            "baseName": "Datastores",
            "type": "Array<VirtualizationVmwareDatastoreRelationship>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return VirtualizationVmwareHostRelationship.attributeTypeMap;
    }
    
    public constructor() {
    }
}


export type VirtualizationVmwareHostRelationshipHypervisorTypeEnum = "Unknown" | "ESXi" ;
export type VirtualizationVmwareHostRelationshipStatusEnum = "Unknown" | "Degraded" | "Critical" | "Ok" ;
export type VirtualizationVmwareHostRelationshipHwPowerStateEnum = "Unknown" | "PoweredOn" | "PoweredOff" | "StandBy" | "Paused" ;

