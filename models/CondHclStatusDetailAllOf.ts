/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CondHclStatusRelationship } from './CondHclStatusRelationship';
import { InventoryBaseRelationship } from './InventoryBaseRelationship';
import { HttpFile } from '../http/http';

/**
* Definition of the list of properties defined in 'cond.HclStatusDetail', excluding properties defined in parent classes.
*/
export class CondHclStatusDetailAllOf {
    /**
    * The model is considered as part of the hardware profile for the component. This will provide the HCL validation status for the hardware profile. The reasons can be one of the following \"Incompatible-Server-With-Component\" - the server model and component combination is not listed in HCL \"Incompatible-Firmware\" - The server's firmware is not listed for this component's hardware profile \"Incompatible-Component\" - the component's model is not listed in the HCL \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the hardware profile was not evaulated for the component because the server's hw/sw status is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.
    */
    'hardwareStatus'?: CondHclStatusDetailAllOfHardwareStatusEnum;
    /**
    * The current CIMC version for the server normalized for querying HCL data.
    */
    'hclCimcVersion'?: string;
    /**
    * The current driver name of the component we are validating normalized for querying HCL data.
    */
    'hclDriverName'?: string;
    /**
    * The current driver version of the component we are validating normalized for querying HCL data.
    */
    'hclDriverVersion'?: string;
    /**
    * The current firmware version of the component model normalized for querying HCL data.
    */
    'hclFirmwareVersion'?: string;
    /**
    * The component model we are trying to validate normalized for querying HCL data.
    */
    'hclModel'?: string;
    /**
    * The current CIMC version for the server as received from inventory.
    */
    'invCimcVersion'?: string;
    /**
    * The current driver name of the component we are validating as received from inventory.
    */
    'invDriverName'?: string;
    /**
    * The current driver version of the component we are validating as received from inventory.
    */
    'invDriverVersion'?: string;
    /**
    * The current firmware version of the component model as received from inventory.
    */
    'invFirmwareVersion'?: string;
    /**
    * The component model we are trying to validate as received from inventory.
    */
    'invModel'?: string;
    /**
    * The reason for the status. The reason can be one of \"Incompatible-Server-With-Component\" - HCL validation has failed because the server model is not validated with this component \"Incompatible-Processor\" - HCL validation has failed because the processor is not validated with this server \"Incompatible-Os-Info\" - HCL validation has failed because the os vendor and version is not validated with this server \"Incompatible-Component-Model\" - HCL validation has failed because the component model is not validated \"Incompatible-Firmware\" - HCL validation has failed because the component or server firmware version is not validated \"Incompatible-Driver\" - HCL validation has failed because the driver version is not validated \"Incompatible-Firmware-Driver\" - HCL validation has failed because the firmware version and driver version is not validated \"Missing-Os-Driver-Info\" - HCL validation was not performed because we are missing os driver information form the inventory \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Service-Error\" - HCL data service is available but an error occured when making the request or parsing the response \"Unrecognized-Protocol\" - This service does not recognize the reason code in the response from the HCL data service \"Compatible\" - this component's inventory data has \"Validated\" status with the HCL. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.
    */
    'reason'?: CondHclStatusDetailAllOfReasonEnum;
    /**
    * The firmware, driver name and driver version are considered as part of the software profile for the component. This will provide the HCL validation status for the software profile. The reasons can be one of the following \"Incompatible-Firmware\" - the component's firmware is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Driver\" - the component's driver is not listed under the server's hardware and software profile and the component's hardware profile \"Incompatible-Firmware-Driver\" - the component's firmware and driver are not listed under the server's hardware and software profile and the component's hardware profile \"Service-Unavailable\" - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \"Not-Evaluated\" - the component's hardware status was not evaluated because the server's hardware or software profile is not listed or server is exempted. \"Compatible\" - this component's hardware profile is listed in the HCL.
    */
    'softwareStatus'?: CondHclStatusDetailAllOfSoftwareStatusEnum;
    /**
    * The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \"Unknown\" - we do not have enough information to evaluate against the HCL data \"Validated\" - we have validated this component against the HCL and it has \"Validated\" status \"Not-Validated\" - we have validated this component against the HCL and it has \"Not-Validated\" status. \"Not-Evaluated\" - The component is not evaluated against the HCL because the server is exempted.
    */
    'status'?: CondHclStatusDetailAllOfStatusEnum;
    'component'?: InventoryBaseRelationship;
    'hclStatus'?: CondHclStatusRelationship;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "hardwareStatus",
            "baseName": "HardwareStatus",
            "type": "CondHclStatusDetailAllOfHardwareStatusEnum",
            "format": ""
        },
        {
            "name": "hclCimcVersion",
            "baseName": "HclCimcVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "hclDriverName",
            "baseName": "HclDriverName",
            "type": "string",
            "format": ""
        },
        {
            "name": "hclDriverVersion",
            "baseName": "HclDriverVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "hclFirmwareVersion",
            "baseName": "HclFirmwareVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "hclModel",
            "baseName": "HclModel",
            "type": "string",
            "format": ""
        },
        {
            "name": "invCimcVersion",
            "baseName": "InvCimcVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "invDriverName",
            "baseName": "InvDriverName",
            "type": "string",
            "format": ""
        },
        {
            "name": "invDriverVersion",
            "baseName": "InvDriverVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "invFirmwareVersion",
            "baseName": "InvFirmwareVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "invModel",
            "baseName": "InvModel",
            "type": "string",
            "format": ""
        },
        {
            "name": "reason",
            "baseName": "Reason",
            "type": "CondHclStatusDetailAllOfReasonEnum",
            "format": ""
        },
        {
            "name": "softwareStatus",
            "baseName": "SoftwareStatus",
            "type": "CondHclStatusDetailAllOfSoftwareStatusEnum",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "Status",
            "type": "CondHclStatusDetailAllOfStatusEnum",
            "format": ""
        },
        {
            "name": "component",
            "baseName": "Component",
            "type": "InventoryBaseRelationship",
            "format": ""
        },
        {
            "name": "hclStatus",
            "baseName": "HclStatus",
            "type": "CondHclStatusRelationship",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return CondHclStatusDetailAllOf.attributeTypeMap;
    }
    
    public constructor() {
    }
}


export type CondHclStatusDetailAllOfHardwareStatusEnum = "Missing-Os-Driver-Info" | "Incompatible-Server-With-Component" | "Incompatible-Processor" | "Incompatible-Os-Info" | "Incompatible-Component-Model" | "Incompatible-Firmware" | "Incompatible-Driver" | "Incompatible-Firmware-Driver" | "Service-Unavailable" | "Service-Error" | "Unrecognized-Protocol" | "Not-Evaluated" | "Compatible" ;
export type CondHclStatusDetailAllOfReasonEnum = "Missing-Os-Driver-Info" | "Incompatible-Server-With-Component" | "Incompatible-Processor" | "Incompatible-Os-Info" | "Incompatible-Component-Model" | "Incompatible-Firmware" | "Incompatible-Driver" | "Incompatible-Firmware-Driver" | "Service-Unavailable" | "Service-Error" | "Unrecognized-Protocol" | "Not-Evaluated" | "Compatible" ;
export type CondHclStatusDetailAllOfSoftwareStatusEnum = "Missing-Os-Driver-Info" | "Incompatible-Server-With-Component" | "Incompatible-Processor" | "Incompatible-Os-Info" | "Incompatible-Component-Model" | "Incompatible-Firmware" | "Incompatible-Driver" | "Incompatible-Firmware-Driver" | "Service-Unavailable" | "Service-Error" | "Unrecognized-Protocol" | "Not-Evaluated" | "Compatible" ;
export type CondHclStatusDetailAllOfStatusEnum = "Incomplete" | "Not-Found" | "Not-Listed" | "Validated" | "Not-Evaluated" ;

