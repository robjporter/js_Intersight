/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { OrganizationOrganizationRelationship } from './OrganizationOrganizationRelationship';
import { PolicyAbstractConfigProfileRelationship } from './PolicyAbstractConfigProfileRelationship';
import { PolicyAbstractPolicy } from './PolicyAbstractPolicy';
import { SnmpPolicyAllOf } from './SnmpPolicyAllOf';
import { SnmpTrap } from './SnmpTrap';
import { SnmpUser } from './SnmpUser';
import { HttpFile } from '../http/http';

/**
* Policy to configure SNMP settings on endpoint.
*/
export class SnmpPolicy extends PolicyAbstractPolicy {
    /**
    * The default SNMPv1, SNMPv2c community name or SNMPv3 username to include on any trap messages sent to the SNMP host. The name can be 18 characters long.
    */
    'accessCommunityString'?: string;
    /**
    * Controls access to the information in the inventory tables. Applicable only for SNMPv1 and SNMPv2c users.
    */
    'communityAccess'?: SnmpPolicyCommunityAccessEnum;
    /**
    * State of the SNMP Policy on the endpoint. If enabled, the endpoint sends SNMP traps to the designated host.
    */
    'enabled'?: boolean;
    /**
    * User-defined unique identification of the static engine.
    */
    'engineId'?: string;
    /**
    * Port on which Cisco IMC SNMP agent runs.
    */
    'snmpPort'?: number;
    'snmpTraps'?: Array<SnmpTrap>;
    'snmpUsers'?: Array<SnmpUser>;
    /**
    * Contact person responsible for the SNMP implementation. Enter a string up to 64 characters, such as an email address or a name and telephone number.
    */
    'sysContact'?: string;
    /**
    * Location of host on which the SNMP agent (server) runs.
    */
    'sysLocation'?: string;
    /**
    * SNMP community group used for sending SNMP trap to other devices. Valid only for SNMPv2c users.
    */
    'trapCommunity'?: string;
    'organization'?: OrganizationOrganizationRelationship;
    /**
    * An array of relationships to policyAbstractConfigProfile resources.
    */
    'profiles'?: Array<PolicyAbstractConfigProfileRelationship>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accessCommunityString",
            "baseName": "AccessCommunityString",
            "type": "string",
            "format": ""
        },
        {
            "name": "communityAccess",
            "baseName": "CommunityAccess",
            "type": "SnmpPolicyCommunityAccessEnum",
            "format": ""
        },
        {
            "name": "enabled",
            "baseName": "Enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "engineId",
            "baseName": "EngineId",
            "type": "string",
            "format": ""
        },
        {
            "name": "snmpPort",
            "baseName": "SnmpPort",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "snmpTraps",
            "baseName": "SnmpTraps",
            "type": "Array<SnmpTrap>",
            "format": ""
        },
        {
            "name": "snmpUsers",
            "baseName": "SnmpUsers",
            "type": "Array<SnmpUser>",
            "format": ""
        },
        {
            "name": "sysContact",
            "baseName": "SysContact",
            "type": "string",
            "format": ""
        },
        {
            "name": "sysLocation",
            "baseName": "SysLocation",
            "type": "string",
            "format": ""
        },
        {
            "name": "trapCommunity",
            "baseName": "TrapCommunity",
            "type": "string",
            "format": ""
        },
        {
            "name": "organization",
            "baseName": "Organization",
            "type": "OrganizationOrganizationRelationship",
            "format": ""
        },
        {
            "name": "profiles",
            "baseName": "Profiles",
            "type": "Array<PolicyAbstractConfigProfileRelationship>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SnmpPolicy.attributeTypeMap);
    }
    
    public constructor() {
        super();
    }
}


export type SnmpPolicyCommunityAccessEnum = "Disabled" | "Limited" | "Full" ;

