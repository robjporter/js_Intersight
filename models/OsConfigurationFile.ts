/**
 * Cisco Intersight
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-05-14T14:50:55-07:00.
 *
 * OpenAPI spec version: 1.0.9-1731
 * Contact: intersight@cisco.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HclOperatingSystemRelationship } from './HclOperatingSystemRelationship';
import { MoBaseMo } from './MoBaseMo';
import { MoBaseMoRelationship } from './MoBaseMoRelationship';
import { MoTag } from './MoTag';
import { MoVersionContext } from './MoVersionContext';
import { OsCatalogRelationship } from './OsCatalogRelationship';
import { OsConfigurationFileAllOf } from './OsConfigurationFileAllOf';
import { OsPlaceHolder } from './OsPlaceHolder';
import { HttpFile } from '../http/http';

/**
* A ConfigurationFile is an OS specific answer file that helps with the unattended installation. The file can also be a template file with placeholders instead of actual answers. Intersight supports the golang template syntax specified in https://golang.org/pkg/text/template/. The template supports placeholders for all the properties of os.Answers MO type as well as any additional user-defined properties. The values for these placeholders shall be given during OS installation in the form of os.Answers type and 'additionalProperties' in os.OsInstall object.
*/
export class OsConfigurationFile extends MoBaseMo {
    /**
    * The content of the entire configuration file is stored as value. The content can either be a static file content or a template content. The template is expected to conform to the golang template syntax. The values from os.Answers properties will be used to populate this template.
    */
    'fileContent'?: string;
    /**
    * The name of the OS ConfigurationFile that uniquely identifies the configuration file.
    */
    'name'?: string;
    'placeholders'?: Array<OsPlaceHolder>;
    /**
    * An internal property that is used to distinguish between the pre-canned OS configuration file entries and user provided entries.
    */
    'supported'?: boolean;
    'catalog'?: OsCatalogRelationship;
    /**
    * An array of relationships to hclOperatingSystem resources.
    */
    'distributions'?: Array<HclOperatingSystemRelationship>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "fileContent",
            "baseName": "FileContent",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "Name",
            "type": "string",
            "format": ""
        },
        {
            "name": "placeholders",
            "baseName": "Placeholders",
            "type": "Array<OsPlaceHolder>",
            "format": ""
        },
        {
            "name": "supported",
            "baseName": "Supported",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "catalog",
            "baseName": "Catalog",
            "type": "OsCatalogRelationship",
            "format": ""
        },
        {
            "name": "distributions",
            "baseName": "Distributions",
            "type": "Array<HclOperatingSystemRelationship>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OsConfigurationFile.attributeTypeMap);
    }
    
    public constructor() {
        super();
    }
}

